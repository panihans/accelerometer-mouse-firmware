
rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7b8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800a8f8  0800a8f8  0001a8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a9ec  0800a9ec  0001a9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a9f0  0800a9f0  0001a9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000168  20000004  0800a9f4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008c8  2000016c  0800ab5c  0002016c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000a34  0800ab5c  00020a34  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00023501  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000047d5  00000000  00000000  0004369d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d20  00000000  00000000  00047e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001b40  00000000  00000000  00049b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024ac2  00000000  00000000  0004b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e3c6  00000000  00000000  0007019a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d8bce  00000000  00000000  0008e560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0016712e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007a7c  00000000  00000000  00167184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000016c 	.word	0x2000016c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a8e0 	.word	0x0800a8e0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000170 	.word	0x20000170
 800017c:	0800a8e0 	.word	0x0800a8e0

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <update_buttons>:
uint8_t middle_down = 0;
uint8_t right_down = 0;
uint8_t b4_down = 0;
uint8_t b5_down = 0;

void update_buttons() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
 	if (HAL_GPIO_ReadPin(LEFT_UP_GPIO_Port, LEFT_UP_Pin)) {
 8000a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f001 fa04 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <update_buttons+0x1c>
		left_down = 0;
 8000a92:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <update_buttons+0xd8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(LEFT_DOWN_GPIO_Port, LEFT_DOWN_Pin)) {
 8000a98:	2108      	movs	r1, #8
 8000a9a:	482f      	ldr	r0, [pc, #188]	; (8000b58 <update_buttons+0xdc>)
 8000a9c:	f001 f9fa 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <update_buttons+0x30>
		left_down = 1;
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <update_buttons+0xd8>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(MIDDLE_UP_GPIO_Port, MIDDLE_UP_Pin)) {
 8000aac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab4:	f001 f9ee 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <update_buttons+0x48>
		middle_down = 0;
 8000abe:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <update_buttons+0xe0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(MIDDLE_DOWN_GPIO_Port, MIDDLE_DOWN_Pin)) {
 8000ac4:	2110      	movs	r1, #16
 8000ac6:	4826      	ldr	r0, [pc, #152]	; (8000b60 <update_buttons+0xe4>)
 8000ac8:	f001 f9e4 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <update_buttons+0x5c>
		middle_down = 1;
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <update_buttons+0xe0>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(RIGHT_UP_GPIO_Port, RIGHT_UP_Pin)) {
 8000ad8:	2102      	movs	r1, #2
 8000ada:	481f      	ldr	r0, [pc, #124]	; (8000b58 <update_buttons+0xdc>)
 8000adc:	f001 f9da 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d002      	beq.n	8000aec <update_buttons+0x70>
		right_down = 0;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <update_buttons+0xe8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(RIGHT_DOWN_GPIO_Port, RIGHT_DOWN_Pin)) {
 8000aec:	2101      	movs	r1, #1
 8000aee:	481a      	ldr	r0, [pc, #104]	; (8000b58 <update_buttons+0xdc>)
 8000af0:	f001 f9d0 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <update_buttons+0x84>
		right_down = 1;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <update_buttons+0xe8>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B4_UP_GPIO_Port, B4_UP_Pin)) {
 8000b00:	2120      	movs	r1, #32
 8000b02:	4815      	ldr	r0, [pc, #84]	; (8000b58 <update_buttons+0xdc>)
 8000b04:	f001 f9c6 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d002      	beq.n	8000b14 <update_buttons+0x98>
		b4_down = 0;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <update_buttons+0xec>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B4_DOWN_GPIO_Port, B4_DOWN_Pin)) {
 8000b14:	2110      	movs	r1, #16
 8000b16:	4810      	ldr	r0, [pc, #64]	; (8000b58 <update_buttons+0xdc>)
 8000b18:	f001 f9bc 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d002      	beq.n	8000b28 <update_buttons+0xac>
		b4_down = 1;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <update_buttons+0xec>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B5_UP_GPIO_Port, B5_UP_Pin)) {
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	480b      	ldr	r0, [pc, #44]	; (8000b58 <update_buttons+0xdc>)
 8000b2c:	f001 f9b2 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d002      	beq.n	8000b3c <update_buttons+0xc0>
		b5_down = 0;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <update_buttons+0xf0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B5_DOWN_GPIO_Port, B5_DOWN_Pin)) {
 8000b3c:	2140      	movs	r1, #64	; 0x40
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <update_buttons+0xdc>)
 8000b40:	f001 f9a8 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d002      	beq.n	8000b50 <update_buttons+0xd4>
		b5_down = 1;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <update_buttons+0xf0>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
	}
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000188 	.word	0x20000188
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	20000189 	.word	0x20000189
 8000b60:	48001000 	.word	0x48001000
 8000b64:	2000018a 	.word	0x2000018a
 8000b68:	2000018b 	.word	0x2000018b
 8000b6c:	2000018c 	.word	0x2000018c

08000b70 <read_register>:
#include "imu.h"
#include "math.h"

uint8_t read_register(uint8_t r) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
	uint8_t pTxData[1] = { r | (1UL << 7) };
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	733b      	strb	r3, [r7, #12]
	uint8_t pRxData[1] = { 0 };
 8000b84:	2300      	movs	r3, #0
 8000b86:	723b      	strb	r3, [r7, #8]
	CS_START();
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b90:	f001 f998 	bl	8001ec4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, HAL_MAX_DELAY);
 8000b94:	f107 010c 	add.w	r1, r7, #12
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	480b      	ldr	r0, [pc, #44]	; (8000bcc <read_register+0x5c>)
 8000ba0:	f004 fd30 	bl	8005604 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 1, HAL_MAX_DELAY);
 8000ba4:	f107 0108 	add.w	r1, r7, #8
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bac:	2201      	movs	r2, #1
 8000bae:	4807      	ldr	r0, [pc, #28]	; (8000bcc <read_register+0x5c>)
 8000bb0:	f004 fe96 	bl	80058e0 <HAL_SPI_Receive>
	CS_END();
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2110      	movs	r1, #16
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f001 f982 	bl	8001ec4 <HAL_GPIO_WritePin>
	return pRxData[0];
 8000bc0:	7a3b      	ldrb	r3, [r7, #8]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200001bc 	.word	0x200001bc

08000bd0 <write_register>:

void write_register(uint8_t r, uint8_t value) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	460a      	mov	r2, r1
 8000bda:	71fb      	strb	r3, [r7, #7]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	71bb      	strb	r3, [r7, #6]
	uint8_t pTxData[2] = { r, value };
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	733b      	strb	r3, [r7, #12]
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	737b      	strb	r3, [r7, #13]
	uint8_t pRxData[2] = { 0, 0 };
 8000be8:	2300      	movs	r3, #0
 8000bea:	813b      	strh	r3, [r7, #8]
	CS_START();
 8000bec:	2200      	movs	r2, #0
 8000bee:	2110      	movs	r1, #16
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f001 f966 	bl	8001ec4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 2, HAL_MAX_DELAY);
 8000bf8:	f107 010c 	add.w	r1, r7, #12
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	2202      	movs	r2, #2
 8000c02:	480a      	ldr	r0, [pc, #40]	; (8000c2c <write_register+0x5c>)
 8000c04:	f004 fcfe 	bl	8005604 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 2, HAL_MAX_DELAY);
 8000c08:	f107 0108 	add.w	r1, r7, #8
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	2202      	movs	r2, #2
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <write_register+0x5c>)
 8000c14:	f004 fe64 	bl	80058e0 <HAL_SPI_Receive>
	CS_END();
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2110      	movs	r1, #16
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f001 f950 	bl	8001ec4 <HAL_GPIO_WritePin>
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200001bc 	.word	0x200001bc

08000c30 <imu_setup>:

#define ACCEL_CALIBRATION_N 100
int16_t x_offset, y_offset, z_offset = 0;
void imu_setup() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
	// reset IMU
	while (1) {
		write_register(PWR_MGMT_1, (1UL << 7));
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	206b      	movs	r0, #107	; 0x6b
 8000c3a:	f7ff ffc9 	bl	8000bd0 <write_register>
		HAL_Delay(100);
 8000c3e:	2064      	movs	r0, #100	; 0x64
 8000c40:	f000 fe8c 	bl	800195c <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000c44:	206b      	movs	r0, #107	; 0x6b
 8000c46:	f7ff ff93 	bl	8000b70 <read_register>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	73fb      	strb	r3, [r7, #15]
		if (reg & (1UL << 6)) {
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0ee      	beq.n	8000c36 <imu_setup+0x6>
		}
	}

	// wake up
	while (1) {
		write_register(PWR_MGMT_1, (1 << 0));
 8000c58:	2101      	movs	r1, #1
 8000c5a:	206b      	movs	r0, #107	; 0x6b
 8000c5c:	f7ff ffb8 	bl	8000bd0 <write_register>
		HAL_Delay(100);
 8000c60:	2064      	movs	r0, #100	; 0x64
 8000c62:	f000 fe7b 	bl	800195c <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000c66:	206b      	movs	r0, #107	; 0x6b
 8000c68:	f7ff ff82 	bl	8000b70 <read_register>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73bb      	strb	r3, [r7, #14]
		if (reg & (1 << 0)) {
 8000c70:	7bbb      	ldrb	r3, [r7, #14]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0ee      	beq.n	8000c58 <imu_setup+0x28>
		}
	}

	//disable i2c
	while (1) {
		write_register(USER_CTRL, (1 << 4));
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	206a      	movs	r0, #106	; 0x6a
 8000c7e:	f7ff ffa7 	bl	8000bd0 <write_register>
		HAL_Delay(100);
 8000c82:	2064      	movs	r0, #100	; 0x64
 8000c84:	f000 fe6a 	bl	800195c <HAL_Delay>
		uint8_t reg = read_register(USER_CTRL);
 8000c88:	206a      	movs	r0, #106	; 0x6a
 8000c8a:	f7ff ff71 	bl	8000b70 <read_register>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	737b      	strb	r3, [r7, #13]
		if (reg & (1 << 4)) {
 8000c92:	7b7b      	ldrb	r3, [r7, #13]
 8000c94:	f003 0310 	and.w	r3, r3, #16
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0ee      	beq.n	8000c7a <imu_setup+0x4a>
		}
	}

	//accel +-16g
	while (1) {
		write_register(ACCEL_CONFIG, (1 << 4) | (1 << 3));
 8000c9c:	2118      	movs	r1, #24
 8000c9e:	201c      	movs	r0, #28
 8000ca0:	f7ff ff96 	bl	8000bd0 <write_register>
		HAL_Delay(100);
 8000ca4:	2064      	movs	r0, #100	; 0x64
 8000ca6:	f000 fe59 	bl	800195c <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG);
 8000caa:	201c      	movs	r0, #28
 8000cac:	f7ff ff60 	bl	8000b70 <read_register>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	733b      	strb	r3, [r7, #12]
		if (reg & (1 << 4) && reg & (1 << 3)) {
 8000cb4:	7b3b      	ldrb	r3, [r7, #12]
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0ee      	beq.n	8000c9c <imu_setup+0x6c>
 8000cbe:	7b3b      	ldrb	r3, [r7, #12]
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0e9      	beq.n	8000c9c <imu_setup+0x6c>
		}
	}

	//accel low pass filter setting
	while (1) {
		write_register(ACCEL_CONFIG_2, 1);
 8000cc8:	2101      	movs	r1, #1
 8000cca:	201d      	movs	r0, #29
 8000ccc:	f7ff ff80 	bl	8000bd0 <write_register>
		HAL_Delay(100);
 8000cd0:	2064      	movs	r0, #100	; 0x64
 8000cd2:	f000 fe43 	bl	800195c <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG_2);
 8000cd6:	201d      	movs	r0, #29
 8000cd8:	f7ff ff4a 	bl	8000b70 <read_register>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	72fb      	strb	r3, [r7, #11]
		if (reg == 1) {
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d000      	beq.n	8000ce8 <imu_setup+0xb8>
	while (1) {
 8000ce6:	e7ef      	b.n	8000cc8 <imu_setup+0x98>
			break;
 8000ce8:	bf00      	nop
		}
	}

	//accel offset calculation
	int16_t x = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	813b      	strh	r3, [r7, #8]
	int16_t y = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	int16_t z = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	80bb      	strh	r3, [r7, #4]
	int32_t xsum = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
	int32_t ysum = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
	int32_t zsum = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < ACCEL_CALIBRATION_N; ++i) {
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	e01e      	b.n	8000d46 <imu_setup+0x116>
		get_xyz(&x, &y, &z);
 8000d08:	1d3a      	adds	r2, r7, #4
 8000d0a:	1db9      	adds	r1, r7, #6
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 f893 	bl	8000e3c <get_xyz>
		xsum += x;
 8000d16:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	4413      	add	r3, r2
 8000d20:	61fb      	str	r3, [r7, #28]
		ysum += y;
 8000d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d26:	461a      	mov	r2, r3
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
		zsum += z;
 8000d2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d32:	461a      	mov	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	4413      	add	r3, r2
 8000d38:	617b      	str	r3, [r7, #20]
		HAL_Delay(1);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f000 fe0e 	bl	800195c <HAL_Delay>
	for (int i = 0; i < ACCEL_CALIBRATION_N; ++i) {
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	3301      	adds	r3, #1
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	2b63      	cmp	r3, #99	; 0x63
 8000d4a:	dddd      	ble.n	8000d08 <imu_setup+0xd8>
	}
	x_offset = xsum / ACCEL_CALIBRATION_N;
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <imu_setup+0x160>)
 8000d50:	fb82 1203 	smull	r1, r2, r2, r3
 8000d54:	1152      	asrs	r2, r2, #5
 8000d56:	17db      	asrs	r3, r3, #31
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <imu_setup+0x164>)
 8000d5e:	801a      	strh	r2, [r3, #0]
	y_offset = ysum / ACCEL_CALIBRATION_N;
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <imu_setup+0x160>)
 8000d64:	fb82 1203 	smull	r1, r2, r2, r3
 8000d68:	1152      	asrs	r2, r2, #5
 8000d6a:	17db      	asrs	r3, r3, #31
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <imu_setup+0x168>)
 8000d72:	801a      	strh	r2, [r3, #0]
	z_offset = zsum / ACCEL_CALIBRATION_N;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <imu_setup+0x160>)
 8000d78:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7c:	1152      	asrs	r2, r2, #5
 8000d7e:	17db      	asrs	r3, r3, #31
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <imu_setup+0x16c>)
 8000d86:	801a      	strh	r2, [r3, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	51eb851f 	.word	0x51eb851f
 8000d94:	200001ae 	.word	0x200001ae
 8000d98:	200001ac 	.word	0x200001ac
 8000d9c:	2000018e 	.word	0x2000018e

08000da0 <read_x>:

int16_t read_x() {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	uint8_t h = read_register(ACCEL_XOUT_H);
 8000da6:	203b      	movs	r0, #59	; 0x3b
 8000da8:	f7ff fee2 	bl	8000b70 <read_register>
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_XOUT_L);
 8000db0:	203c      	movs	r0, #60	; 0x3c
 8000db2:	f7ff fedd 	bl	8000b70 <read_register>
 8000db6:	4603      	mov	r3, r0
 8000db8:	71bb      	strb	r3, [r7, #6]
	int16_t x = (h << 8) | l;
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	80bb      	strh	r3, [r7, #4]
	return x;
 8000dc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <read_y>:

int16_t read_y() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
	uint8_t h = read_register(ACCEL_YOUT_H);
 8000dda:	203d      	movs	r0, #61	; 0x3d
 8000ddc:	f7ff fec8 	bl	8000b70 <read_register>
 8000de0:	4603      	mov	r3, r0
 8000de2:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_YOUT_L);
 8000de4:	203e      	movs	r0, #62	; 0x3e
 8000de6:	f7ff fec3 	bl	8000b70 <read_register>
 8000dea:	4603      	mov	r3, r0
 8000dec:	71bb      	strb	r3, [r7, #6]
	int16_t y = (h << 8) | l;
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	b21b      	sxth	r3, r3
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	80bb      	strh	r3, [r7, #4]
	return y;
 8000dfc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <read_z>:

int16_t read_z() {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
	uint8_t h = read_register(ACCEL_ZOUT_H);
 8000e0e:	203f      	movs	r0, #63	; 0x3f
 8000e10:	f7ff feae 	bl	8000b70 <read_register>
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_ZOUT_L);
 8000e18:	2040      	movs	r0, #64	; 0x40
 8000e1a:	f7ff fea9 	bl	8000b70 <read_register>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71bb      	strb	r3, [r7, #6]
	int16_t z = (h << 8) | l;
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	79bb      	ldrb	r3, [r7, #6]
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	80bb      	strh	r3, [r7, #4]
	return z;
 8000e30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <get_xyz>:
int16_t y_r[FILTER_N + 1] = { 0 };
int16_t y_f[FILTER_N + 1] = { 0 };
int16_t z_r[FILTER_N + 1] = { 0 };
int16_t z_f[FILTER_N + 1] = { 0 };

void get_xyz(int16_t *x, int16_t *y, int16_t *z) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
//	filter_p(y_r, y_f, read_y());
//	filter_p(z_r, z_f, read_z());
//	*x = x_f[0];
//	*y = y_f[0];
//	*z = z_f[0];
	*x = read_x() - x_offset;
 8000e48:	f7ff ffaa 	bl	8000da0 <read_x>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <get_xyz+0x64>)
 8000e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	801a      	strh	r2, [r3, #0]
	*y = read_y() - y_offset;
 8000e62:	f7ff ffb7 	bl	8000dd4 <read_y>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <get_xyz+0x68>)
 8000e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	801a      	strh	r2, [r3, #0]
	*z = read_z() - z_offset;
 8000e7c:	f7ff ffc4 	bl	8000e08 <read_z>
 8000e80:	4603      	mov	r3, r0
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <get_xyz+0x6c>)
 8000e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	801a      	strh	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001ae 	.word	0x200001ae
 8000ea4:	200001ac 	.word	0x200001ac
 8000ea8:	2000018e 	.word	0x2000018e

08000eac <get_mouse_xy>:
	int16_t z;
} Accel;

Accel accel;

void get_mouse_xy(int8_t *x, int8_t *y) {
 8000eac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
	get_xyz(&accel.x, &accel.y, &accel.z);
 8000eb8:	4a4b      	ldr	r2, [pc, #300]	; (8000fe8 <get_mouse_xy+0x13c>)
 8000eba:	494c      	ldr	r1, [pc, #304]	; (8000fec <get_mouse_xy+0x140>)
 8000ebc:	484c      	ldr	r0, [pc, #304]	; (8000ff0 <get_mouse_xy+0x144>)
 8000ebe:	f7ff ffbd 	bl	8000e3c <get_xyz>
	if (accel.x < 0) {
 8000ec2:	4b4b      	ldr	r3, [pc, #300]	; (8000ff0 <get_mouse_xy+0x144>)
 8000ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da1f      	bge.n	8000f0c <get_mouse_xy+0x60>
		*x = ceil(accel.x / 500.0);
 8000ecc:	4b48      	ldr	r3, [pc, #288]	; (8000ff0 <get_mouse_xy+0x144>)
 8000ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff faa6 	bl	8000424 <__aeabi_i2d>
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	4b45      	ldr	r3, [pc, #276]	; (8000ff4 <get_mouse_xy+0x148>)
 8000ede:	f7ff fc35 	bl	800074c <__aeabi_ddiv>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	ec43 2b17 	vmov	d7, r2, r3
 8000eea:	eeb0 0a47 	vmov.f32	s0, s14
 8000eee:	eef0 0a67 	vmov.f32	s1, s15
 8000ef2:	f009 fbf1 	bl	800a6d8 <ceil>
 8000ef6:	ec53 2b10 	vmov	r2, r3, d0
 8000efa:	4610      	mov	r0, r2
 8000efc:	4619      	mov	r1, r3
 8000efe:	f7ff fd95 	bl	8000a2c <__aeabi_d2iz>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b25a      	sxtb	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e01e      	b.n	8000f4a <get_mouse_xy+0x9e>
	} else {
		*x = floor(accel.x / 500.0);
 8000f0c:	4b38      	ldr	r3, [pc, #224]	; (8000ff0 <get_mouse_xy+0x144>)
 8000f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fa86 	bl	8000424 <__aeabi_i2d>
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <get_mouse_xy+0x148>)
 8000f1e:	f7ff fc15 	bl	800074c <__aeabi_ddiv>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	ec43 2b17 	vmov	d7, r2, r3
 8000f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f2e:	eef0 0a67 	vmov.f32	s1, s15
 8000f32:	f009 fc55 	bl	800a7e0 <floor>
 8000f36:	ec53 2b10 	vmov	r2, r3, d0
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f7ff fd75 	bl	8000a2c <__aeabi_d2iz>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b25a      	sxtb	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	701a      	strb	r2, [r3, #0]
	}
	if (accel.y < 0) {
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <get_mouse_xy+0x144>)
 8000f4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	da22      	bge.n	8000f9a <get_mouse_xy+0xee>
		*y = -ceil(accel.y / 500.0);
 8000f54:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <get_mouse_xy+0x144>)
 8000f56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fa62 	bl	8000424 <__aeabi_i2d>
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <get_mouse_xy+0x148>)
 8000f66:	f7ff fbf1 	bl	800074c <__aeabi_ddiv>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	ec43 2b17 	vmov	d7, r2, r3
 8000f72:	eeb0 0a47 	vmov.f32	s0, s14
 8000f76:	eef0 0a67 	vmov.f32	s1, s15
 8000f7a:	f009 fbad 	bl	800a6d8 <ceil>
 8000f7e:	ec53 2b10 	vmov	r2, r3, d0
 8000f82:	4690      	mov	r8, r2
 8000f84:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8000f88:	4640      	mov	r0, r8
 8000f8a:	4649      	mov	r1, r9
 8000f8c:	f7ff fd4e 	bl	8000a2c <__aeabi_d2iz>
 8000f90:	4603      	mov	r3, r0
 8000f92:	b25a      	sxtb	r2, r3
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	701a      	strb	r2, [r3, #0]
	} else {
		*y = -floor(accel.y / 500.0);
	}
}
 8000f98:	e021      	b.n	8000fde <get_mouse_xy+0x132>
		*y = -floor(accel.y / 500.0);
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <get_mouse_xy+0x144>)
 8000f9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fa3f 	bl	8000424 <__aeabi_i2d>
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <get_mouse_xy+0x148>)
 8000fac:	f7ff fbce 	bl	800074c <__aeabi_ddiv>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	ec43 2b17 	vmov	d7, r2, r3
 8000fb8:	eeb0 0a47 	vmov.f32	s0, s14
 8000fbc:	eef0 0a67 	vmov.f32	s1, s15
 8000fc0:	f009 fc0e 	bl	800a7e0 <floor>
 8000fc4:	ec53 2b10 	vmov	r2, r3, d0
 8000fc8:	4614      	mov	r4, r2
 8000fca:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000fce:	4620      	mov	r0, r4
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	f7ff fd2b 	bl	8000a2c <__aeabi_d2iz>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b25a      	sxtb	r2, r3
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	701a      	strb	r2, [r3, #0]
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fe8:	200001b4 	.word	0x200001b4
 8000fec:	200001b2 	.word	0x200001b2
 8000ff0:	200001b0 	.word	0x200001b0
 8000ff4:	407f4000 	.word	0x407f4000

08000ff8 <calculate_encoder_diff>:
#include "wheel.h"

int8_t calculate_encoder_diff(uint32_t prev_pos, uint32_t cur_pos) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	int diff = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
	if (prev_pos > ENCODER_QUADRANT_3 && cur_pos < ENCODER_QUADRANT) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 800100c:	4293      	cmp	r3, r2
 800100e:	d90c      	bls.n	800102a <calculate_encoder_diff+0x32>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8001016:	4293      	cmp	r3, r2
 8001018:	d807      	bhi.n	800102a <calculate_encoder_diff+0x32>
		// encoder counter overflow from high to low
		diff = 65535 - prev_pos + cur_pos;
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001024:	33ff      	adds	r3, #255	; 0xff
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e015      	b.n	8001056 <calculate_encoder_diff+0x5e>
	} else if (prev_pos < ENCODER_QUADRANT && cur_pos > ENCODER_QUADRANT_3) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8001030:	4293      	cmp	r3, r2
 8001032:	d80c      	bhi.n	800104e <calculate_encoder_diff+0x56>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 800103a:	4293      	cmp	r3, r2
 800103c:	d907      	bls.n	800104e <calculate_encoder_diff+0x56>
		// encoder counter overflow from low to high
		diff = -65535 + cur_pos - prev_pos;
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001048:	3bff      	subs	r3, #255	; 0xff
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	e003      	b.n	8001056 <calculate_encoder_diff+0x5e>
	} else {
		// encoder didn't overflow
		diff = cur_pos - prev_pos;
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	60fb      	str	r3, [r7, #12]
	}
	return (int8_t) clamp(INT8_MIN, INT8_MAX, diff);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800105c:	db07      	blt.n	800106e <calculate_encoder_diff+0x76>
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b7f      	cmp	r3, #127	; 0x7f
 8001062:	dc02      	bgt.n	800106a <calculate_encoder_diff+0x72>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	b25b      	sxtb	r3, r3
 8001068:	e003      	b.n	8001072 <calculate_encoder_diff+0x7a>
 800106a:	237f      	movs	r3, #127	; 0x7f
 800106c:	e001      	b.n	8001072 <calculate_encoder_diff+0x7a>
 800106e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <get_wheel_change>:


uint32_t encoder_prev = 0;
uint8_t get_wheel_change(uint32_t encoder_timer_count) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	uint32_t encoder_cur = encoder_timer_count;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	60fb      	str	r3, [r7, #12]
	uint8_t diff = clamp(-1, 1, calculate_encoder_diff(encoder_prev, encoder_cur));
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <get_wheel_change+0x70>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68f9      	ldr	r1, [r7, #12]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ffb0 	bl	8000ff8 <calculate_encoder_diff>
 8001098:	4603      	mov	r3, r0
 800109a:	2b01      	cmp	r3, #1
 800109c:	dc09      	bgt.n	80010b2 <get_wheel_change+0x32>
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <get_wheel_change+0x70>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68f9      	ldr	r1, [r7, #12]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffa7 	bl	8000ff8 <calculate_encoder_diff>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	db13      	blt.n	80010da <get_wheel_change+0x5a>
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <get_wheel_change+0x70>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68f9      	ldr	r1, [r7, #12]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff9d 	bl	8000ff8 <calculate_encoder_diff>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	dc08      	bgt.n	80010d6 <get_wheel_change+0x56>
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <get_wheel_change+0x70>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68f9      	ldr	r1, [r7, #12]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff94 	bl	8000ff8 <calculate_encoder_diff>
 80010d0:	4603      	mov	r3, r0
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	e002      	b.n	80010dc <get_wheel_change+0x5c>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <get_wheel_change+0x5c>
 80010da:	23ff      	movs	r3, #255	; 0xff
 80010dc:	72fb      	strb	r3, [r7, #11]
	encoder_prev = encoder_cur;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <get_wheel_change+0x70>)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6013      	str	r3, [r2, #0]
	return diff;
 80010e4:	7afb      	ldrb	r3, [r7, #11]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000190 	.word	0x20000190

080010f4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001100:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4313      	orrs	r3, r2
 800110a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800110c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001110:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001118:	68fb      	ldr	r3, [r7, #12]
}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	2002      	movs	r0, #2
 800113e:	f7ff ffd9 	bl	80010f4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2001      	movs	r0, #1
 8001144:	f7ff ffd6 	bl	80010f4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001148:	2010      	movs	r0, #16
 800114a:	f7ff ffd3 	bl	80010f4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001154:	4825      	ldr	r0, [pc, #148]	; (80011ec <MX_GPIO_Init+0xc4>)
 8001156:	f000 feb5 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2110      	movs	r1, #16
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f000 feaf 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800116a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	481b      	ldr	r0, [pc, #108]	; (80011ec <MX_GPIO_Init+0xc4>)
 800117e:	f000 fd21 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001182:	2310      	movs	r3, #16
 8001184:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119a:	f000 fd13 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_DOWN_Pin|RIGHT_UP_Pin|LEFT_DOWN_Pin|B4_DOWN_Pin
 800119e:	23fb      	movs	r3, #251	; 0xfb
 80011a0:	607b      	str	r3, [r7, #4]
                          |B4_UP_Pin|B5_DOWN_Pin|B5_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	480f      	ldr	r0, [pc, #60]	; (80011ec <MX_GPIO_Init+0xc4>)
 80011b0:	f000 fd08 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIDDLE_DOWN_Pin;
 80011b4:	2310      	movs	r3, #16
 80011b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MIDDLE_DOWN_GPIO_Port, &GPIO_InitStruct);
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <MX_GPIO_Init+0xc8>)
 80011c6:	f000 fcfd 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MIDDLE_UP_Pin|LEFT_UP_Pin;
 80011ca:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80011ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f000 fcf0 	bl	8001bc4 <HAL_GPIO_Init>

}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	48000400 	.word	0x48000400
 80011f0:	48001000 	.word	0x48001000

080011f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011f8:	f000 fb2a 	bl	8001850 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011fc:	f000 f85c 	bl	80012b8 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001200:	f000 f8c6 	bl	8001390 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001204:	f7ff ff90 	bl	8001128 <MX_GPIO_Init>
	MX_USB_Device_Init();
 8001208:	f008 fdce 	bl	8009da8 <MX_USB_Device_Init>
	MX_SPI1_Init();
 800120c:	f000 f914 	bl	8001438 <MX_SPI1_Init>
	MX_TIM1_Init();
 8001210:	f000 fa5c 	bl	80016cc <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001214:	2104      	movs	r1, #4
 8001216:	481d      	ldr	r0, [pc, #116]	; (800128c <main+0x98>)
 8001218:	f005 f908 	bl	800642c <HAL_TIM_Encoder_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	imu_setup();
 800121c:	f7ff fd08 	bl	8000c30 <imu_setup>

	while (1) {
		// buttons
		update_buttons();
 8001220:	f7ff fc2c 	bl	8000a7c <update_buttons>
		report.buttons = (left_down << 0) | (right_down << 1) | (middle_down << 2) | (b5_down << 3) | (b4_down << 4);
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <main+0x9c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	b25a      	sxtb	r2, r3
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <main+0xa0>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b25b      	sxtb	r3, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	b25a      	sxtb	r2, r3
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <main+0xa4>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	b25b      	sxtb	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b25a      	sxtb	r2, r3
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <main+0xa8>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	b25b      	sxtb	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b25a      	sxtb	r2, r3
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <main+0xac>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	b25b      	sxtb	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b25b      	sxtb	r3, r3
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <main+0xb0>)
 800125e:	701a      	strb	r2, [r3, #0]

		// wheel
		report.wheel = get_wheel_change(TIM1->CNT);
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <main+0xb4>)
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff0b 	bl	8001080 <get_wheel_change>
 800126a:	4603      	mov	r3, r0
 800126c:	b25a      	sxtb	r2, r3
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <main+0xb0>)
 8001270:	70da      	strb	r2, [r3, #3]

		// mouse x, y
		get_mouse_xy(&report.x, &report.y);
 8001272:	490e      	ldr	r1, [pc, #56]	; (80012ac <main+0xb8>)
 8001274:	480e      	ldr	r0, [pc, #56]	; (80012b0 <main+0xbc>)
 8001276:	f7ff fe19 	bl	8000eac <get_mouse_xy>

		USBD_HID_SendReport(&hUsbDeviceFS, &report, 4);
 800127a:	2204      	movs	r2, #4
 800127c:	4909      	ldr	r1, [pc, #36]	; (80012a4 <main+0xb0>)
 800127e:	480d      	ldr	r0, [pc, #52]	; (80012b4 <main+0xc0>)
 8001280:	f007 fc16 	bl	8008ab0 <USBD_HID_SendReport>
		HAL_Delay(1);
 8001284:	2001      	movs	r0, #1
 8001286:	f000 fb69 	bl	800195c <HAL_Delay>
		update_buttons();
 800128a:	e7c9      	b.n	8001220 <main+0x2c>
 800128c:	20000220 	.word	0x20000220
 8001290:	2000018a 	.word	0x2000018a
 8001294:	20000188 	.word	0x20000188
 8001298:	20000189 	.word	0x20000189
 800129c:	2000018c 	.word	0x2000018c
 80012a0:	2000018b 	.word	0x2000018b
 80012a4:	200001b8 	.word	0x200001b8
 80012a8:	40012c00 	.word	0x40012c00
 80012ac:	200001ba 	.word	0x200001ba
 80012b0:	200001b9 	.word	0x200001b9
 80012b4:	20000270 	.word	0x20000270

080012b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b09a      	sub	sp, #104	; 0x68
 80012bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	2248      	movs	r2, #72	; 0x48
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f009 f9fe 	bl	800a6c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012de:	4b2b      	ldr	r3, [pc, #172]	; (800138c <SystemClock_Config+0xd4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012e6:	4a29      	ldr	r2, [pc, #164]	; (800138c <SystemClock_Config+0xd4>)
 80012e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b27      	ldr	r3, [pc, #156]	; (800138c <SystemClock_Config+0xd4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80012fa:	2326      	movs	r3, #38	; 0x26
 80012fc:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001308:	2301      	movs	r3, #1
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130c:	2340      	movs	r3, #64	; 0x40
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001310:	2300      	movs	r3, #0
 8001312:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001314:	2360      	movs	r3, #96	; 0x60
 8001316:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001318:	2302      	movs	r3, #2
 800131a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800131c:	2301      	movs	r3, #1
 800131e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 32;
 8001324:	2320      	movs	r3, #32
 8001326:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800132c:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800132e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001332:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001338:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	4618      	mov	r0, r3
 8001340:	f002 fe80 	bl	8004044 <HAL_RCC_OscConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x96>
		Error_Handler();
 800134a:	f000 f83e 	bl	80013ca <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 800134e:	236f      	movs	r3, #111	; 0x6f
 8001350:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001352:	2303      	movs	r3, #3
 8001354:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2103      	movs	r1, #3
 800136e:	4618      	mov	r0, r3
 8001370:	f003 f9f4 	bl	800475c <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xc6>
		Error_Handler();
 800137a:	f000 f826 	bl	80013ca <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 800137e:	f003 ff87 	bl	8005290 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001382:	bf00      	nop
 8001384:	3768      	adds	r7, #104	; 0x68
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	58000400 	.word	0x58000400

08001390 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b094      	sub	sp, #80	; 0x50
 8001394:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001396:	463b      	mov	r3, r7
 8001398:	2250      	movs	r2, #80	; 0x50
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f009 f993 	bl	800a6c8 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80013a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a6:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80013a8:	2300      	movs	r3, #0
 80013aa:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80013ac:	2310      	movs	r3, #16
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80013b0:	463b      	mov	r3, r7
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fdf6 	bl	8004fa4 <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <PeriphCommonClock_Config+0x32>
		Error_Handler();
 80013be:	f000 f804 	bl	80013ca <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 80013c2:	bf00      	nop
 80013c4:	3750      	adds	r7, #80	; 0x50
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ce:	b672      	cpsid	i
}
 80013d0:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013d2:	e7fe      	b.n	80013d2 <Error_Handler+0x8>

080013d4 <LL_AHB2_GRP1_EnableClock>:
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013f8:	68fb      	ldr	r3, [r7, #12]
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800140e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4313      	orrs	r3, r2
 800141c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800141e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001422:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_SPI1_Init+0x74>)
 800143e:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <MX_SPI1_Init+0x78>)
 8001440:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_SPI1_Init+0x74>)
 8001444:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001448:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_SPI1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_SPI1_Init+0x74>)
 8001452:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001456:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_SPI1_Init+0x74>)
 800145a:	2202      	movs	r2, #2
 800145c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_SPI1_Init+0x74>)
 8001460:	2201      	movs	r2, #1
 8001462:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_SPI1_Init+0x74>)
 8001466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_SPI1_Init+0x74>)
 800146e:	2210      	movs	r2, #16
 8001470:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_SPI1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_SPI1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_SPI1_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_SPI1_Init+0x74>)
 8001486:	2207      	movs	r2, #7
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_SPI1_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_SPI1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_SPI1_Init+0x74>)
 8001498:	f004 f811 	bl	80054be <HAL_SPI_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014a2:	f7ff ff92 	bl	80013ca <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200001bc 	.word	0x200001bc
 80014b0:	40013000 	.word	0x40013000

080014b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_SPI_MspInit+0x5c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d117      	bne.n	8001506 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80014da:	f7ff ff94 	bl	8001406 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff ff78 	bl	80013d4 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80014e4:	23c2      	movs	r3, #194	; 0xc2
 80014e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014f4:	2305      	movs	r3, #5
 80014f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	4619      	mov	r1, r3
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001502:	f000 fb5f 	bl	8001bc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001506:	bf00      	nop
 8001508:	3720      	adds	r7, #32
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40013000 	.word	0x40013000

08001514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2101      	movs	r1, #1
 800151c:	f06f 000b 	mvn.w	r0, #11
 8001520:	f000 fb1b 	bl	8001b5a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	2101      	movs	r1, #1
 8001528:	f06f 000a 	mvn.w	r0, #10
 800152c:	f000 fb15 	bl	8001b5a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2101      	movs	r1, #1
 8001534:	f06f 0009 	mvn.w	r0, #9
 8001538:	f000 fb0f 	bl	8001b5a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2101      	movs	r1, #1
 8001540:	f06f 0004 	mvn.w	r0, #4
 8001544:	f000 fb09 	bl	8001b5a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2101      	movs	r1, #1
 800154c:	f06f 0003 	mvn.w	r0, #3
 8001550:	f000 fb03 	bl	8001b5a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2101      	movs	r1, #1
 8001558:	f06f 0001 	mvn.w	r0, #1
 800155c:	f000 fafd 	bl	8001b5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <NMI_Handler+0x4>

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <MemManage_Handler+0x4>

08001576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <UsageFault_Handler+0x4>

08001582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b0:	f000 f9a8 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <USB_LP_IRQHandler+0x10>)
 80015be:	f000 fda0 	bl	8002102 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000740 	.word	0x20000740

080015cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <SystemInit+0x90>)
 80015d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d6:	4a21      	ldr	r2, [pc, #132]	; (800165c <SystemInit+0x90>)
 80015d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80015f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80015f8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80015fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <SystemInit+0x94>)
 8001606:	4013      	ands	r3, r2
 8001608:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001616:	f023 0305 	bic.w	r3, r3, #5
 800161a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <SystemInit+0x98>)
 8001638:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800163a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800164a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00
 8001660:	faf6fefb 	.word	0xfaf6fefb
 8001664:	22041000 	.word	0x22041000

08001668 <LL_AHB2_GRP1_EnableClock>:
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4313      	orrs	r3, r2
 800167e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001684:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800168c:	68fb      	ldr	r3, [r7, #12]
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_APB2_GRP1_EnableClock>:
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80016a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4013      	ands	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2224      	movs	r2, #36	; 0x24
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f008 fff4 	bl	800a6c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016ea:	4b23      	ldr	r3, [pc, #140]	; (8001778 <MX_TIM1_Init+0xac>)
 80016ec:	4a23      	ldr	r2, [pc, #140]	; (800177c <MX_TIM1_Init+0xb0>)
 80016ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <MX_TIM1_Init+0xac>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <MX_TIM1_Init+0xac>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <MX_TIM1_Init+0xac>)
 80016fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001702:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MX_TIM1_Init+0xac>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <MX_TIM1_Init+0xac>)
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_TIM1_Init+0xac>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001716:	2301      	movs	r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800171e:	2301      	movs	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800172e:	2301      	movs	r3, #1
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4619      	mov	r1, r3
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_TIM1_Init+0xac>)
 8001742:	f004 fdcd 	bl	80062e0 <HAL_TIM_Encoder_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800174c:	f7ff fe3d 	bl	80013ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_TIM1_Init+0xac>)
 8001762:	f004 ff7b 	bl	800665c <HAL_TIMEx_MasterConfigSynchronization>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800176c:	f7ff fe2d 	bl	80013ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	3730      	adds	r7, #48	; 0x30
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000220 	.word	0x20000220
 800177c:	40012c00 	.word	0x40012c00

08001780 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <HAL_TIM_Encoder_MspInit+0x5c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d118      	bne.n	80017d4 <HAL_TIM_Encoder_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017a6:	f7ff ff78 	bl	800169a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff ff5c 	bl	8001668 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f000 f9f8 	bl	8001bc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80017d4:	bf00      	nop
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40012c00 	.word	0x40012c00

080017e0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80017e0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e4:	3304      	adds	r3, #4

080017e6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80017ea:	d3f9      	bcc.n	80017e0 <CopyDataInit>
  bx lr
 80017ec:	4770      	bx	lr

080017ee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80017ee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80017f0:	3004      	adds	r0, #4

080017f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80017f2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80017f4:	d3fb      	bcc.n	80017ee <FillZerobss>
  bx lr
 80017f6:	4770      	bx	lr

080017f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80017fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017fc:	f7ff fee6 	bl	80015cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <LoopForever+0x8>)
 8001802:	490c      	ldr	r1, [pc, #48]	; (8001834 <LoopForever+0xc>)
 8001804:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <LoopForever+0x10>)
 8001806:	2300      	movs	r3, #0
 8001808:	f7ff ffed 	bl	80017e6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <LoopForever+0x14>)
 800180e:	490c      	ldr	r1, [pc, #48]	; (8001840 <LoopForever+0x18>)
 8001810:	2300      	movs	r3, #0
 8001812:	f7ff ffee 	bl	80017f2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001816:	480b      	ldr	r0, [pc, #44]	; (8001844 <LoopForever+0x1c>)
 8001818:	490b      	ldr	r1, [pc, #44]	; (8001848 <LoopForever+0x20>)
 800181a:	2300      	movs	r3, #0
 800181c:	f7ff ffe9 	bl	80017f2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001820:	f008 ff2e 	bl	800a680 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001824:	f7ff fce6 	bl	80011f4 <main>

08001828 <LoopForever>:

LoopForever:
  b LoopForever
 8001828:	e7fe      	b.n	8001828 <LoopForever>
 800182a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800182c:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8001830:	20000004 	.word	0x20000004
 8001834:	2000016c 	.word	0x2000016c
 8001838:	0800a9f4 	.word	0x0800a9f4
  INIT_BSS _sbss, _ebss
 800183c:	2000016c 	.word	0x2000016c
 8001840:	20000a34 	.word	0x20000a34
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001844:	20030000 	.word	0x20030000
 8001848:	20030000 	.word	0x20030000

0800184c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC1_IRQHandler>
	...

08001850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HAL_Init+0x3c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <HAL_Init+0x3c>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001866:	2003      	movs	r0, #3
 8001868:	f000 f96c 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800186c:	2000      	movs	r0, #0
 800186e:	f000 f80f 	bl	8001890 <HAL_InitTick>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	e001      	b.n	8001882 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800187e:	f7ff fe49 	bl	8001514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001882:	79fb      	ldrb	r3, [r7, #7]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	58004000 	.word	0x58004000

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_InitTick+0x6c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d024      	beq.n	80018ee <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018a4:	f003 f906 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_InitTick+0x6c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	4619      	mov	r1, r3
 80018b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f974 	bl	8001baa <HAL_SYSTICK_Config>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10f      	bne.n	80018e8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b0f      	cmp	r3, #15
 80018cc:	d809      	bhi.n	80018e2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ce:	2200      	movs	r2, #0
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	f04f 30ff 	mov.w	r0, #4294967295
 80018d6:	f000 f940 	bl	8001b5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_InitTick+0x70>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e007      	b.n	80018f2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	e004      	b.n	80018f2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	e001      	b.n	80018f2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2000000c 	.word	0x2000000c
 8001900:	20000008 	.word	0x20000008

08001904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x20>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x24>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_IncTick+0x24>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	2000000c 	.word	0x2000000c
 8001928:	2000026c 	.word	0x2000026c

0800192c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return uwTick;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_GetTick+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	2000026c 	.word	0x2000026c

08001944 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_GetTickPrio+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000008 	.word	0x20000008

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff ffe2 	bl	800192c <HAL_GetTick>
 8001968:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001974:	d005      	beq.n	8001982 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_Delay+0x44>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001982:	bf00      	nop
 8001984:	f7ff ffd2 	bl	800192c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8f7      	bhi.n	8001984 <HAL_Delay+0x28>
    {
    }
  }
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2000000c 	.word	0x2000000c

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4907      	ldr	r1, [pc, #28]	; (8001a40 <__NVIC_EnableIRQ+0x38>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff8e 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff29 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b68:	f7ff ff40 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f7ff ff90 	bl	8001a98 <NVIC_EncodePriority>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff5f 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff33 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffa4 	bl	8001b00 <SysTick_Config>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd2:	e146      	b.n	8001e62 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8138 	beq.w	8001e5c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d005      	beq.n	8001c04 <HAL_GPIO_Init+0x40>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d130      	bne.n	8001c66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	f003 0201 	and.w	r2, r3, #1
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d017      	beq.n	8001ca2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d123      	bne.n	8001cf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	08da      	lsrs	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	6939      	ldr	r1, [r7, #16]
 8001cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0203 	and.w	r2, r3, #3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8092 	beq.w	8001e5c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d38:	4a51      	ldr	r2, [pc, #324]	; (8001e80 <HAL_GPIO_Init+0x2bc>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	220f      	movs	r2, #15
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d62:	d013      	beq.n	8001d8c <HAL_GPIO_Init+0x1c8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a47      	ldr	r2, [pc, #284]	; (8001e84 <HAL_GPIO_Init+0x2c0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00d      	beq.n	8001d88 <HAL_GPIO_Init+0x1c4>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a46      	ldr	r2, [pc, #280]	; (8001e88 <HAL_GPIO_Init+0x2c4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d007      	beq.n	8001d84 <HAL_GPIO_Init+0x1c0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a45      	ldr	r2, [pc, #276]	; (8001e8c <HAL_GPIO_Init+0x2c8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_GPIO_Init+0x1bc>
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	e006      	b.n	8001d8e <HAL_GPIO_Init+0x1ca>
 8001d80:	2307      	movs	r3, #7
 8001d82:	e004      	b.n	8001d8e <HAL_GPIO_Init+0x1ca>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e002      	b.n	8001d8e <HAL_GPIO_Init+0x1ca>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_GPIO_Init+0x1ca>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	f002 0203 	and.w	r2, r2, #3
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	4093      	lsls	r3, r2
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d9e:	4938      	ldr	r1, [pc, #224]	; (8001e80 <HAL_GPIO_Init+0x2bc>)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dac:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <HAL_GPIO_Init+0x2cc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dd0:	4a2f      	ldr	r2, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x2cc>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <HAL_GPIO_Init+0x2cc>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dfa:	4a25      	ldr	r2, [pc, #148]	; (8001e90 <HAL_GPIO_Init+0x2cc>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_GPIO_Init+0x2cc>)
 8001e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e26:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <HAL_GPIO_Init+0x2cc>)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_GPIO_Init+0x2cc>)
 8001e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e54:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <HAL_GPIO_Init+0x2cc>)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f47f aeb1 	bne.w	8001bd4 <HAL_GPIO_Init+0x10>
  }
}
 8001e72:	bf00      	nop
 8001e74:	bf00      	nop
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	40010000 	.word	0x40010000
 8001e84:	48000400 	.word	0x48000400
 8001e88:	48000800 	.word	0x48000800
 8001e8c:	48001000 	.word	0x48001000
 8001e90:	58000800 	.word	0x58000800

08001e94 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e001      	b.n	8001eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ed4:	787b      	ldrb	r3, [r7, #1]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ee0:	e002      	b.n	8001ee8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef6:	b08b      	sub	sp, #44	; 0x2c
 8001ef8:	af06      	add	r7, sp, #24
 8001efa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0d7      	b.n	80020b6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f008 f8ac 	bl	800a078 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2203      	movs	r2, #3
 8001f24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 fc0c 	bl	800674a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	e04c      	b.n	8001fd2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	3301      	adds	r3, #1
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	b298      	uxth	r0, r3
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	3336      	adds	r3, #54	; 0x36
 8001f76:	4602      	mov	r2, r0
 8001f78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	3303      	adds	r3, #3
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3338      	adds	r3, #56	; 0x38
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	333c      	adds	r3, #60	; 0x3c
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3340      	adds	r3, #64	; 0x40
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d3ad      	bcc.n	8001f38 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e044      	b.n	800206c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	440b      	add	r3, r1
 8001ff0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	440b      	add	r3, r1
 800201c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	440b      	add	r3, r1
 8002048:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	440b      	add	r3, r1
 800205e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	3301      	adds	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	d3b5      	bcc.n	8001fe2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	687e      	ldr	r6, [r7, #4]
 800207e:	466d      	mov	r5, sp
 8002080:	f106 0410 	add.w	r4, r6, #16
 8002084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	602b      	str	r3, [r5, #0]
 800208c:	1d33      	adds	r3, r6, #4
 800208e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002090:	6838      	ldr	r0, [r7, #0]
 8002092:	f004 fb75 	bl	8006780 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d102      	bne.n	80020b4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f001 fc11 	bl	80038d6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_PCD_Start+0x16>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e012      	b.n	80020fa <HAL_PCD_Start+0x3c>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 fb1b 	bl	800671c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f006 fad0 	bl	8008690 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f006 fad5 	bl	80086be <USB_ReadInterrupts>
 8002114:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 fb0e 	bl	8002742 <PCD_EP_ISR_Handler>

    return;
 8002126:	e110      	b.n	800234a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212e:	2b00      	cmp	r3, #0
 8002130:	d013      	beq.n	800215a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800213a:	b29a      	uxth	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002144:	b292      	uxth	r2, r2
 8002146:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f008 f847 	bl	800a1de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002150:	2100      	movs	r1, #0
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8fc 	bl	8002350 <HAL_PCD_SetAddress>

    return;
 8002158:	e0f7      	b.n	800234a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00c      	beq.n	800217e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800216c:	b29a      	uxth	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002176:	b292      	uxth	r2, r2
 8002178:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800217c:	e0e5      	b.n	800234a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00c      	beq.n	80021a2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002190:	b29a      	uxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800219a:	b292      	uxth	r2, r2
 800219c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80021a0:	e0d3      	b.n	800234a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d034      	beq.n	8002216 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0204 	bic.w	r2, r2, #4
 80021be:	b292      	uxth	r2, r2
 80021c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0208 	bic.w	r2, r2, #8
 80021d6:	b292      	uxth	r2, r2
 80021d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021ee:	2100      	movs	r1, #0
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f008 f9c5 	bl	800a580 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f008 f82a 	bl	800a250 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002204:	b29a      	uxth	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800220e:	b292      	uxth	r2, r2
 8002210:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002214:	e099      	b.n	800234a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800221c:	2b00      	cmp	r3, #0
 800221e:	d027      	beq.n	8002270 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002228:	b29a      	uxth	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0208 	orr.w	r2, r2, #8
 8002232:	b292      	uxth	r2, r2
 8002234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002240:	b29a      	uxth	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224a:	b292      	uxth	r2, r2
 800224c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002258:	b29a      	uxth	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0204 	orr.w	r2, r2, #4
 8002262:	b292      	uxth	r2, r2
 8002264:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f007 ffd7 	bl	800a21c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800226e:	e06c      	b.n	800234a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002276:	2b00      	cmp	r3, #0
 8002278:	d040      	beq.n	80022fc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002282:	b29a      	uxth	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800228c:	b292      	uxth	r2, r2
 800228e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d12b      	bne.n	80022f4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0204 	orr.w	r2, r2, #4
 80022ae:	b292      	uxth	r2, r2
 80022b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022bc:	b29a      	uxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0208 	orr.w	r2, r2, #8
 80022c6:	b292      	uxth	r2, r2
 80022c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80022dc:	b29b      	uxth	r3, r3
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80022ea:	2101      	movs	r1, #1
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f008 f947 	bl	800a580 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80022f2:	e02a      	b.n	800234a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f007 ff91 	bl	800a21c <HAL_PCD_SuspendCallback>
    return;
 80022fa:	e026      	b.n	800234a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00f      	beq.n	8002326 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800230e:	b29a      	uxth	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002318:	b292      	uxth	r2, r2
 800231a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f007 ff4f 	bl	800a1c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002324:	e011      	b.n	800234a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00c      	beq.n	800234a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002338:	b29a      	uxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002342:	b292      	uxth	r2, r2
 8002344:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002348:	bf00      	nop
  }
}
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_PCD_SetAddress+0x1a>
 8002366:	2302      	movs	r3, #2
 8002368:	e013      	b.n	8002392 <HAL_PCD_SetAddress+0x42>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f006 f970 	bl	8008668 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	4608      	mov	r0, r1
 80023a4:	4611      	mov	r1, r2
 80023a6:	461a      	mov	r2, r3
 80023a8:	4603      	mov	r3, r0
 80023aa:	70fb      	strb	r3, [r7, #3]
 80023ac:	460b      	mov	r3, r1
 80023ae:	803b      	strh	r3, [r7, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	da0e      	bge.n	80023de <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	705a      	strb	r2, [r3, #1]
 80023dc:	e00e      	b.n	80023fc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	f003 0207 	and.w	r2, r3, #7
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	b2da      	uxtb	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002408:	883a      	ldrh	r2, [r7, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	78ba      	ldrb	r2, [r7, #2]
 8002412:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	785b      	ldrb	r3, [r3, #1]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d004      	beq.n	8002426 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002426:	78bb      	ldrb	r3, [r7, #2]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d102      	bne.n	8002432 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_PCD_EP_Open+0xa6>
 800243c:	2302      	movs	r3, #2
 800243e:	e00e      	b.n	800245e <HAL_PCD_EP_Open+0xc4>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68f9      	ldr	r1, [r7, #12]
 800244e:	4618      	mov	r0, r3
 8002450:	f004 f9b8 	bl	80067c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800245c:	7afb      	ldrb	r3, [r7, #11]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002476:	2b00      	cmp	r3, #0
 8002478:	da0e      	bge.n	8002498 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2201      	movs	r2, #1
 8002494:	705a      	strb	r2, [r3, #1]
 8002496:	e00e      	b.n	80024b6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	f003 0207 	and.w	r2, r3, #7
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_PCD_EP_Close+0x6a>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e00e      	b.n	80024ee <HAL_PCD_EP_Close+0x88>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68f9      	ldr	r1, [r7, #12]
 80024de:	4618      	mov	r0, r3
 80024e0:	f004 fd04 	bl	8006eec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	460b      	mov	r3, r1
 8002504:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002506:	7afb      	ldrb	r3, [r7, #11]
 8002508:	f003 0207 	and.w	r2, r3, #7
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2200      	movs	r2, #0
 800252e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2200      	movs	r2, #0
 8002534:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002536:	7afb      	ldrb	r3, [r7, #11]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	b2da      	uxtb	r2, r3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002542:	7afb      	ldrb	r3, [r7, #11]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	2b00      	cmp	r3, #0
 800254a:	d106      	bne.n	800255a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6979      	ldr	r1, [r7, #20]
 8002552:	4618      	mov	r0, r3
 8002554:	f004 feb7 	bl	80072c6 <USB_EPStartXfer>
 8002558:	e005      	b.n	8002566 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6979      	ldr	r1, [r7, #20]
 8002560:	4618      	mov	r0, r3
 8002562:	f004 feb0 	bl	80072c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	460b      	mov	r3, r1
 800257e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002580:	7afb      	ldrb	r3, [r7, #11]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2201      	movs	r2, #1
 80025ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025bc:	7afb      	ldrb	r3, [r7, #11]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025c8:	7afb      	ldrb	r3, [r7, #11]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6979      	ldr	r1, [r7, #20]
 80025d8:	4618      	mov	r0, r3
 80025da:	f004 fe74 	bl	80072c6 <USB_EPStartXfer>
 80025de:	e005      	b.n	80025ec <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6979      	ldr	r1, [r7, #20]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f004 fe6d 	bl	80072c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f003 0207 	and.w	r2, r3, #7
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	d901      	bls.n	8002614 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e03e      	b.n	8002692 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002618:	2b00      	cmp	r3, #0
 800261a:	da0e      	bge.n	800263a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	705a      	strb	r2, [r3, #1]
 8002638:	e00c      	b.n	8002654 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800263a:	78fa      	ldrb	r2, [r7, #3]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	b2da      	uxtb	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_PCD_EP_SetStall+0x7e>
 8002670:	2302      	movs	r3, #2
 8002672:	e00e      	b.n	8002692 <HAL_PCD_EP_SetStall+0x9c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68f9      	ldr	r1, [r7, #12]
 8002682:	4618      	mov	r0, r3
 8002684:	f005 fef1 	bl	800846a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	f003 020f 	and.w	r2, r3, #15
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d901      	bls.n	80026b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e040      	b.n	800273a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	da0e      	bge.n	80026de <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4413      	add	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	705a      	strb	r2, [r3, #1]
 80026dc:	e00e      	b.n	80026fc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	f003 0207 	and.w	r2, r3, #7
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	b2da      	uxtb	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_PCD_EP_ClrStall+0x82>
 8002718:	2302      	movs	r3, #2
 800271a:	e00e      	b.n	800273a <HAL_PCD_EP_ClrStall+0xa0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68f9      	ldr	r1, [r7, #12]
 800272a:	4618      	mov	r0, r3
 800272c:	f005 feee 	bl	800850c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b096      	sub	sp, #88	; 0x58
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800274a:	e39c      	b.n	8002e86 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002754:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002758:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002766:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800276a:	2b00      	cmp	r3, #0
 800276c:	f040 815e 	bne.w	8002a2c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002770:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	d150      	bne.n	800281e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278c:	81fb      	strh	r3, [r7, #14]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	89fb      	ldrh	r3, [r7, #14]
 8002794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800279c:	b29b      	uxth	r3, r3
 800279e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3328      	adds	r3, #40	; 0x28
 80027a4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80027ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	441a      	add	r2, r3
 80027d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027da:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027dc:	2100      	movs	r1, #0
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f007 fcd5 	bl	800a18e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 834a 	beq.w	8002e86 <PCD_EP_ISR_Handler+0x744>
 80027f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 8345 	bne.w	8002e86 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002808:	b2da      	uxtb	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	b292      	uxth	r2, r2
 8002810:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800281c:	e333      	b.n	8002e86 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002824:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002830:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002838:	2b00      	cmp	r3, #0
 800283a:	d032      	beq.n	80028a2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002844:	b29b      	uxth	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	4413      	add	r3, r2
 8002856:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002862:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800286e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002870:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002874:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002876:	b29b      	uxth	r3, r3
 8002878:	f005 ff73 	bl	8008762 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	b29a      	uxth	r2, r3
 8002884:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002888:	4013      	ands	r3, r2
 800288a:	823b      	strh	r3, [r7, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	8a3a      	ldrh	r2, [r7, #16]
 8002892:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002896:	b292      	uxth	r2, r2
 8002898:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f007 fc4a 	bl	800a134 <HAL_PCD_SetupStageCallback>
 80028a0:	e2f1      	b.n	8002e86 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028a2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f280 82ed 	bge.w	8002e86 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028b8:	4013      	ands	r3, r2
 80028ba:	83fb      	strh	r3, [r7, #30]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	8bfa      	ldrh	r2, [r7, #30]
 80028c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028c6:	b292      	uxth	r2, r2
 80028c8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d019      	beq.n	800292e <PCD_EP_ISR_Handler+0x1ec>
 80028fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d015      	beq.n	800292e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002908:	6959      	ldr	r1, [r3, #20]
 800290a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800290e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002910:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002912:	b29b      	uxth	r3, r3
 8002914:	f005 ff25 	bl	8008762 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	441a      	add	r2, r3
 8002922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002924:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002926:	2100      	movs	r1, #0
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f007 fc15 	bl	800a158 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 82a3 	bne.w	8002e86 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4413      	add	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b3e      	cmp	r3, #62	; 0x3e
 8002966:	d918      	bls.n	800299a <PCD_EP_ISR_Handler+0x258>
 8002968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	647b      	str	r3, [r7, #68]	; 0x44
 8002970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <PCD_EP_ISR_Handler+0x240>
 800297c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297e:	3b01      	subs	r3, #1
 8002980:	647b      	str	r3, [r7, #68]	; 0x44
 8002982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002984:	b29b      	uxth	r3, r3
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	b29b      	uxth	r3, r3
 800298a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800298e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002992:	b29a      	uxth	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	801a      	strh	r2, [r3, #0]
 8002998:	e029      	b.n	80029ee <PCD_EP_ISR_Handler+0x2ac>
 800299a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d112      	bne.n	80029c8 <PCD_EP_ISR_Handler+0x286>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	801a      	strh	r2, [r3, #0]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	801a      	strh	r2, [r3, #0]
 80029c6:	e012      	b.n	80029ee <PCD_EP_ISR_Handler+0x2ac>
 80029c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	647b      	str	r3, [r7, #68]	; 0x44
 80029d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <PCD_EP_ISR_Handler+0x2a0>
 80029dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029de:	3301      	adds	r3, #1
 80029e0:	647b      	str	r3, [r7, #68]	; 0x44
 80029e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	029b      	lsls	r3, r3, #10
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fe:	827b      	strh	r3, [r7, #18]
 8002a00:	8a7b      	ldrh	r3, [r7, #18]
 8002a02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a06:	827b      	strh	r3, [r7, #18]
 8002a08:	8a7b      	ldrh	r3, [r7, #18]
 8002a0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a0e:	827b      	strh	r3, [r7, #18]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	8a7b      	ldrh	r3, [r7, #18]
 8002a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	8013      	strh	r3, [r2, #0]
 8002a2a:	e22c      	b.n	8002e86 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a40:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f280 80f6 	bge.w	8002c36 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a60:	4013      	ands	r3, r2
 8002a62:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002a78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a7c:	b292      	uxth	r2, r2
 8002a7e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a80:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a98:	7b1b      	ldrb	r3, [r3, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d123      	bne.n	8002ae6 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002ac6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 808e 	beq.w	8002bec <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad6:	6959      	ldr	r1, [r3, #20]
 8002ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ada:	88da      	ldrh	r2, [r3, #6]
 8002adc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ae0:	f005 fe3f 	bl	8008762 <USB_ReadPMA>
 8002ae4:	e082      	b.n	8002bec <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae8:	78db      	ldrb	r3, [r3, #3]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d10a      	bne.n	8002b04 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002aee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002af2:	461a      	mov	r2, r3
 8002af4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f9d3 	bl	8002ea2 <HAL_PCD_EP_DB_Receive>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002b02:	e073      	b.n	8002bec <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	441a      	add	r2, r3
 8002b30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d022      	beq.n	8002ba8 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002b8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d02c      	beq.n	8002bec <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b98:	6959      	ldr	r1, [r3, #20]
 8002b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9c:	891a      	ldrh	r2, [r3, #8]
 8002b9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ba2:	f005 fdde 	bl	8008762 <USB_ReadPMA>
 8002ba6:	e021      	b.n	8002bec <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bcc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002bd0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bde:	6959      	ldr	r1, [r3, #20]
 8002be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be2:	895a      	ldrh	r2, [r3, #10]
 8002be4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002be8:	f005 fdbb 	bl	8008762 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bf4:	441a      	add	r2, r3
 8002bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c02:	441a      	add	r2, r3
 8002c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c06:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <PCD_EP_ISR_Handler+0x4da>
 8002c10:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d206      	bcs.n	8002c2a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f007 fa98 	bl	800a158 <HAL_PCD_DataOutStageCallback>
 8002c28:	e005      	b.n	8002c36 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002c30:	4618      	mov	r0, r3
 8002c32:	f004 fb48 	bl	80072c6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c36:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8121 	beq.w	8002e86 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c44:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	441a      	add	r2, r3
 8002c84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c96:	78db      	ldrb	r3, [r3, #3]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	f000 80a2 	beq.w	8002de2 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca6:	7b1b      	ldrb	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 8093 	beq.w	8002dd4 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d046      	beq.n	8002d48 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cbc:	785b      	ldrb	r3, [r3, #1]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d126      	bne.n	8002d10 <PCD_EP_ISR_Handler+0x5ce>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	4413      	add	r3, r2
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	00da      	lsls	r2, r3, #3
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ce8:	623b      	str	r3, [r7, #32]
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	801a      	strh	r2, [r3, #0]
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	801a      	strh	r2, [r3, #0]
 8002d0e:	e061      	b.n	8002dd4 <PCD_EP_ISR_Handler+0x692>
 8002d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d12:	785b      	ldrb	r3, [r3, #1]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d15d      	bne.n	8002dd4 <PCD_EP_ISR_Handler+0x692>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	4413      	add	r3, r2
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	00da      	lsls	r2, r3, #3
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	4413      	add	r3, r2
 8002d3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	2200      	movs	r2, #0
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	e045      	b.n	8002dd4 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d50:	785b      	ldrb	r3, [r3, #1]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d126      	bne.n	8002da4 <PCD_EP_ISR_Handler+0x662>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	4413      	add	r3, r2
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	00da      	lsls	r2, r3, #3
 8002d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d76:	4413      	add	r3, r2
 8002d78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	801a      	strh	r2, [r3, #0]
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	801a      	strh	r2, [r3, #0]
 8002da2:	e017      	b.n	8002dd4 <PCD_EP_ISR_Handler+0x692>
 8002da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d113      	bne.n	8002dd4 <PCD_EP_ISR_Handler+0x692>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dba:	4413      	add	r3, r2
 8002dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	00da      	lsls	r2, r3, #3
 8002dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f007 f9d7 	bl	800a18e <HAL_PCD_DataInStageCallback>
 8002de0:	e051      	b.n	8002e86 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002de2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d144      	bne.n	8002e78 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	4413      	add	r3, r2
 8002e08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d907      	bls.n	8002e32 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e2a:	1ad2      	subs	r2, r2, r3
 8002e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e2e:	619a      	str	r2, [r3, #24]
 8002e30:	e002      	b.n	8002e38 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d106      	bne.n	8002e4e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	4619      	mov	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f007 f9a1 	bl	800a18e <HAL_PCD_DataInStageCallback>
 8002e4c:	e01b      	b.n	8002e86 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e56:	441a      	add	r2, r3
 8002e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5e:	69da      	ldr	r2, [r3, #28]
 8002e60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e64:	441a      	add	r2, r3
 8002e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e68:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e70:	4618      	mov	r0, r3
 8002e72:	f004 fa28 	bl	80072c6 <USB_EPStartXfer>
 8002e76:	e006      	b.n	8002e86 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e78:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f917 	bl	80030b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	b21b      	sxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f6ff ac5a 	blt.w	800274c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3758      	adds	r7, #88	; 0x58
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b088      	sub	sp, #32
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	4613      	mov	r3, r2
 8002eae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d07c      	beq.n	8002fb4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ede:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	8b7b      	ldrh	r3, [r7, #26]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d306      	bcc.n	8002ef8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	8b7b      	ldrh	r3, [r7, #26]
 8002ef0:	1ad2      	subs	r2, r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	619a      	str	r2, [r3, #24]
 8002ef6:	e002      	b.n	8002efe <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2200      	movs	r2, #0
 8002efc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d123      	bne.n	8002f4e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f20:	833b      	strh	r3, [r7, #24]
 8002f22:	8b3b      	ldrh	r3, [r7, #24]
 8002f24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f28:	833b      	strh	r3, [r7, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	441a      	add	r2, r3
 8002f38:	8b3b      	ldrh	r3, [r7, #24]
 8002f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01f      	beq.n	8002f98 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	82fb      	strh	r3, [r7, #22]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	441a      	add	r2, r3
 8002f82:	8afb      	ldrh	r3, [r7, #22]
 8002f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f98:	8b7b      	ldrh	r3, [r7, #26]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8085 	beq.w	80030aa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	6959      	ldr	r1, [r3, #20]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	891a      	ldrh	r2, [r3, #8]
 8002fac:	8b7b      	ldrh	r3, [r7, #26]
 8002fae:	f005 fbd8 	bl	8008762 <USB_ReadPMA>
 8002fb2:	e07a      	b.n	80030aa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	8b7b      	ldrh	r3, [r7, #26]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d306      	bcc.n	8002ff2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	8b7b      	ldrh	r3, [r7, #26]
 8002fea:	1ad2      	subs	r2, r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	619a      	str	r2, [r3, #24]
 8002ff0:	e002      	b.n	8002ff8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d123      	bne.n	8003048 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301a:	83fb      	strh	r3, [r7, #30]
 800301c:	8bfb      	ldrh	r3, [r7, #30]
 800301e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003022:	83fb      	strh	r3, [r7, #30]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	441a      	add	r2, r3
 8003032:	8bfb      	ldrh	r3, [r7, #30]
 8003034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800303c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003044:	b29b      	uxth	r3, r3
 8003046:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11f      	bne.n	8003092 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306c:	83bb      	strh	r3, [r7, #28]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	441a      	add	r2, r3
 800307c:	8bbb      	ldrh	r3, [r7, #28]
 800307e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800308a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800308e:	b29b      	uxth	r3, r3
 8003090:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003092:	8b7b      	ldrh	r3, [r7, #26]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	6959      	ldr	r1, [r3, #20]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	895a      	ldrh	r2, [r3, #10]
 80030a4:	8b7b      	ldrh	r3, [r7, #26]
 80030a6:	f005 fb5c 	bl	8008762 <USB_ReadPMA>
    }
  }

  return count;
 80030aa:	8b7b      	ldrh	r3, [r7, #26]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3720      	adds	r7, #32
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b0a2      	sub	sp, #136	; 0x88
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 81c5 	beq.w	8003458 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030fe:	429a      	cmp	r2, r3
 8003100:	d907      	bls.n	8003112 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800310a:	1ad2      	subs	r2, r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	619a      	str	r2, [r3, #24]
 8003110:	e002      	b.n	8003118 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f040 80b9 	bne.w	8003294 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d126      	bne.n	8003178 <HAL_PCD_EP_DB_Transmit+0xc4>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003138:	b29b      	uxth	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	4413      	add	r3, r2
 8003140:	62bb      	str	r3, [r7, #40]	; 0x28
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	00da      	lsls	r2, r3, #3
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	4413      	add	r3, r2
 800314c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800315c:	b29a      	uxth	r2, r3
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	801a      	strh	r2, [r3, #0]
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800316c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003170:	b29a      	uxth	r2, r3
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	801a      	strh	r2, [r3, #0]
 8003176:	e01a      	b.n	80031ae <HAL_PCD_EP_DB_Transmit+0xfa>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	785b      	ldrb	r3, [r3, #1]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d116      	bne.n	80031ae <HAL_PCD_EP_DB_Transmit+0xfa>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	633b      	str	r3, [r7, #48]	; 0x30
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800318e:	b29b      	uxth	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	4413      	add	r3, r2
 8003196:	633b      	str	r3, [r7, #48]	; 0x30
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	00da      	lsls	r2, r3, #3
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	4413      	add	r3, r2
 80031a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031aa:	2200      	movs	r2, #0
 80031ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	623b      	str	r3, [r7, #32]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	785b      	ldrb	r3, [r3, #1]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d126      	bne.n	800320a <HAL_PCD_EP_DB_Transmit+0x156>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	4413      	add	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	00da      	lsls	r2, r3, #3
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	4413      	add	r3, r2
 80031de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003202:	b29a      	uxth	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	801a      	strh	r2, [r3, #0]
 8003208:	e017      	b.n	800323a <HAL_PCD_EP_DB_Transmit+0x186>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	785b      	ldrb	r3, [r3, #1]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d113      	bne.n	800323a <HAL_PCD_EP_DB_Transmit+0x186>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321a:	b29b      	uxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	4413      	add	r3, r2
 8003222:	623b      	str	r3, [r7, #32]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	00da      	lsls	r2, r3, #3
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	4413      	add	r3, r2
 800322e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2200      	movs	r2, #0
 8003238:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	4619      	mov	r1, r3
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f006 ffa4 	bl	800a18e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 82d2 	beq.w	80037f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326c:	827b      	strh	r3, [r7, #18]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	441a      	add	r2, r3
 800327c:	8a7b      	ldrh	r3, [r7, #18]
 800327e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003286:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800328a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328e:	b29b      	uxth	r3, r3
 8003290:	8013      	strh	r3, [r2, #0]
 8003292:	e2b0      	b.n	80037f6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d021      	beq.n	80032e2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	441a      	add	r2, r3
 80032ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80032ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032de:	b29b      	uxth	r3, r3
 80032e0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	f040 8284 	bne.w	80037f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032f6:	441a      	add	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003304:	441a      	add	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	6a1a      	ldr	r2, [r3, #32]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	429a      	cmp	r2, r3
 8003314:	d309      	bcc.n	800332a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	6a1a      	ldr	r2, [r3, #32]
 8003320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003322:	1ad2      	subs	r2, r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	621a      	str	r2, [r3, #32]
 8003328:	e015      	b.n	8003356 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d107      	bne.n	8003342 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003332:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003336:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003340:	e009      	b.n	8003356 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2200      	movs	r2, #0
 8003354:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	785b      	ldrb	r3, [r3, #1]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d155      	bne.n	800340a <HAL_PCD_EP_DB_Transmit+0x356>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	63bb      	str	r3, [r7, #56]	; 0x38
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800336c:	b29b      	uxth	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003372:	4413      	add	r3, r2
 8003374:	63bb      	str	r3, [r7, #56]	; 0x38
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	00da      	lsls	r2, r3, #3
 800337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337e:	4413      	add	r3, r2
 8003380:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
 8003386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003388:	2b3e      	cmp	r3, #62	; 0x3e
 800338a:	d916      	bls.n	80033ba <HAL_PCD_EP_DB_Transmit+0x306>
 800338c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	64bb      	str	r3, [r7, #72]	; 0x48
 8003392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800339c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800339e:	3b01      	subs	r3, #1
 80033a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80033a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	029b      	lsls	r3, r3, #10
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b6:	801a      	strh	r2, [r3, #0]
 80033b8:	e043      	b.n	8003442 <HAL_PCD_EP_DB_Transmit+0x38e>
 80033ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d112      	bne.n	80033e6 <HAL_PCD_EP_DB_Transmit+0x332>
 80033c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ce:	801a      	strh	r2, [r3, #0]
 80033d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033de:	b29a      	uxth	r2, r3
 80033e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e2:	801a      	strh	r2, [r3, #0]
 80033e4:	e02d      	b.n	8003442 <HAL_PCD_EP_DB_Transmit+0x38e>
 80033e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_PCD_EP_DB_Transmit+0x348>
 80033f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f8:	3301      	adds	r3, #1
 80033fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80033fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033fe:	b29b      	uxth	r3, r3
 8003400:	029b      	lsls	r3, r3, #10
 8003402:	b29a      	uxth	r2, r3
 8003404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003406:	801a      	strh	r2, [r3, #0]
 8003408:	e01b      	b.n	8003442 <HAL_PCD_EP_DB_Transmit+0x38e>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	785b      	ldrb	r3, [r3, #1]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d117      	bne.n	8003442 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	643b      	str	r3, [r7, #64]	; 0x40
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003420:	b29b      	uxth	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003426:	4413      	add	r3, r2
 8003428:	643b      	str	r3, [r7, #64]	; 0x40
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	00da      	lsls	r2, r3, #3
 8003430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003432:	4413      	add	r3, r2
 8003434:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800343a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800343c:	b29a      	uxth	r2, r3
 800343e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003440:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	6959      	ldr	r1, [r3, #20]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	891a      	ldrh	r2, [r3, #8]
 800344e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003450:	b29b      	uxth	r3, r3
 8003452:	f005 f944 	bl	80086de <USB_WritePMA>
 8003456:	e1ce      	b.n	80037f6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003460:	b29b      	uxth	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	4413      	add	r3, r2
 8003472:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	699a      	ldr	r2, [r3, #24]
 8003484:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003488:	429a      	cmp	r2, r3
 800348a:	d307      	bcc.n	800349c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003494:	1ad2      	subs	r2, r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	619a      	str	r2, [r3, #24]
 800349a:	e002      	b.n	80034a2 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2200      	movs	r2, #0
 80034a0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 80c4 	bne.w	8003634 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	785b      	ldrb	r3, [r3, #1]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d126      	bne.n	8003502 <HAL_PCD_EP_DB_Transmit+0x44e>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034c8:	4413      	add	r3, r2
 80034ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	00da      	lsls	r2, r3, #3
 80034d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034d4:	4413      	add	r3, r2
 80034d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034da:	667b      	str	r3, [r7, #100]	; 0x64
 80034dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ea:	801a      	strh	r2, [r3, #0]
 80034ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034fe:	801a      	strh	r2, [r3, #0]
 8003500:	e01a      	b.n	8003538 <HAL_PCD_EP_DB_Transmit+0x484>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	785b      	ldrb	r3, [r3, #1]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d116      	bne.n	8003538 <HAL_PCD_EP_DB_Transmit+0x484>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	673b      	str	r3, [r7, #112]	; 0x70
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003518:	b29b      	uxth	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800351e:	4413      	add	r3, r2
 8003520:	673b      	str	r3, [r7, #112]	; 0x70
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	00da      	lsls	r2, r3, #3
 8003528:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800352a:	4413      	add	r3, r2
 800352c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003530:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003534:	2200      	movs	r2, #0
 8003536:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	785b      	ldrb	r3, [r3, #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d12f      	bne.n	80035a6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003556:	b29b      	uxth	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800355e:	4413      	add	r3, r2
 8003560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	00da      	lsls	r2, r3, #3
 800356a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800356e:	4413      	add	r3, r2
 8003570:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003584:	b29a      	uxth	r2, r3
 8003586:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800358a:	801a      	strh	r2, [r3, #0]
 800358c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800359c:	b29a      	uxth	r2, r3
 800359e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035a2:	801a      	strh	r2, [r3, #0]
 80035a4:	e017      	b.n	80035d6 <HAL_PCD_EP_DB_Transmit+0x522>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	785b      	ldrb	r3, [r3, #1]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d113      	bne.n	80035d6 <HAL_PCD_EP_DB_Transmit+0x522>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035bc:	4413      	add	r3, r2
 80035be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	00da      	lsls	r2, r3, #3
 80035c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035c8:	4413      	add	r3, r2
 80035ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80035d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d2:	2200      	movs	r2, #0
 80035d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	4619      	mov	r1, r3
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f006 fdd6 	bl	800a18e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f040 8104 	bne.w	80037f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003608:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	441a      	add	r2, r3
 800361a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800361e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800362a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362e:	b29b      	uxth	r3, r3
 8003630:	8013      	strh	r3, [r2, #0]
 8003632:	e0e0      	b.n	80037f6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d121      	bne.n	8003682 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003658:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800366e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800367a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367e:	b29b      	uxth	r3, r3
 8003680:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003688:	2b01      	cmp	r3, #1
 800368a:	f040 80b4 	bne.w	80037f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003696:	441a      	add	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036a4:	441a      	add	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	6a1a      	ldr	r2, [r3, #32]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d309      	bcc.n	80036ca <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	6a1a      	ldr	r2, [r3, #32]
 80036c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c2:	1ad2      	subs	r2, r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	621a      	str	r2, [r3, #32]
 80036c8:	e015      	b.n	80036f6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d107      	bne.n	80036e2 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80036d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036e0:	e009      	b.n	80036f6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2200      	movs	r2, #0
 80036ec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	663b      	str	r3, [r7, #96]	; 0x60
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	785b      	ldrb	r3, [r3, #1]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d155      	bne.n	80037b0 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	65bb      	str	r3, [r7, #88]	; 0x58
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003712:	b29b      	uxth	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003718:	4413      	add	r3, r2
 800371a:	65bb      	str	r3, [r7, #88]	; 0x58
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	00da      	lsls	r2, r3, #3
 8003722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003724:	4413      	add	r3, r2
 8003726:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800372a:	657b      	str	r3, [r7, #84]	; 0x54
 800372c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372e:	2b3e      	cmp	r3, #62	; 0x3e
 8003730:	d916      	bls.n	8003760 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	677b      	str	r3, [r7, #116]	; 0x74
 8003738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <HAL_PCD_EP_DB_Transmit+0x694>
 8003742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003744:	3b01      	subs	r3, #1
 8003746:	677b      	str	r3, [r7, #116]	; 0x74
 8003748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800374a:	b29b      	uxth	r3, r3
 800374c:	029b      	lsls	r3, r3, #10
 800374e:	b29b      	uxth	r3, r3
 8003750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003758:	b29a      	uxth	r2, r3
 800375a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800375c:	801a      	strh	r2, [r3, #0]
 800375e:	e040      	b.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003762:	2b00      	cmp	r3, #0
 8003764:	d112      	bne.n	800378c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003770:	b29a      	uxth	r2, r3
 8003772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003774:	801a      	strh	r2, [r3, #0]
 8003776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003784:	b29a      	uxth	r2, r3
 8003786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	e02a      	b.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800378c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	677b      	str	r3, [r7, #116]	; 0x74
 8003792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800379c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379e:	3301      	adds	r3, #1
 80037a0:	677b      	str	r3, [r7, #116]	; 0x74
 80037a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	029b      	lsls	r3, r3, #10
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ac:	801a      	strh	r2, [r3, #0]
 80037ae:	e018      	b.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	785b      	ldrb	r3, [r3, #1]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d114      	bne.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037c6:	4413      	add	r3, r2
 80037c8:	663b      	str	r3, [r7, #96]	; 0x60
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	00da      	lsls	r2, r3, #3
 80037d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d2:	4413      	add	r3, r2
 80037d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037dc:	b29a      	uxth	r2, r3
 80037de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	6959      	ldr	r1, [r3, #20]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	895a      	ldrh	r2, [r3, #10]
 80037ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	f004 ff74 	bl	80086de <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	b29b      	uxth	r3, r3
 8003808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800380c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003810:	823b      	strh	r3, [r7, #16]
 8003812:	8a3b      	ldrh	r3, [r7, #16]
 8003814:	f083 0310 	eor.w	r3, r3, #16
 8003818:	823b      	strh	r3, [r7, #16]
 800381a:	8a3b      	ldrh	r3, [r7, #16]
 800381c:	f083 0320 	eor.w	r3, r3, #32
 8003820:	823b      	strh	r3, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	441a      	add	r2, r3
 8003830:	8a3b      	ldrh	r3, [r7, #16]
 8003832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800383a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800383e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003842:	b29b      	uxth	r3, r3
 8003844:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3788      	adds	r7, #136	; 0x88
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	460b      	mov	r3, r1
 800385c:	817b      	strh	r3, [r7, #10]
 800385e:	4613      	mov	r3, r2
 8003860:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386e:	897b      	ldrh	r3, [r7, #10]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e009      	b.n	800389a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003886:	897a      	ldrh	r2, [r7, #10]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800389a:	893b      	ldrh	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d107      	bne.n	80038b0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2200      	movs	r2, #0
 80038a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	80da      	strh	r2, [r3, #6]
 80038ae:	e00b      	b.n	80038c8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2201      	movs	r2, #1
 80038b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b085      	sub	sp, #20
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800390e:	b29b      	uxth	r3, r3
 8003910:	f043 0302 	orr.w	r3, r3, #2
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a04      	ldr	r2, [pc, #16]	; (8003948 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	58000400 	.word	0x58000400

0800394c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003950:	4b04      	ldr	r3, [pc, #16]	; (8003964 <HAL_PWREx_GetVoltageRange+0x18>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	58000400 	.word	0x58000400

08003968 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_PWREx_EnableVddUSB+0x1c>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003976:	6053      	str	r3, [r2, #4]
}
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	58000400 	.word	0x58000400

08003988 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800398c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399a:	d101      	bne.n	80039a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80039b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039be:	6013      	str	r3, [r2, #0]
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80039ca:	b480      	push	{r7}
 80039cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80039ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80039ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039fa:	d101      	bne.n	8003a00 <LL_RCC_HSE_IsReady+0x18>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <LL_RCC_HSE_IsReady+0x1a>
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a3c:	6013      	str	r3, [r2, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5a:	d101      	bne.n	8003a60 <LL_RCC_HSI_IsReady+0x18>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <LL_RCC_HSI_IsReady+0x1a>
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	061b      	lsls	r3, r3, #24
 8003a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a86:	4313      	orrs	r3, r2
 8003a88:	604b      	str	r3, [r1, #4]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003aae:	bf00      	nop
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d101      	bne.n	8003af2 <LL_RCC_HSI48_IsReady+0x18>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <LL_RCC_HSI48_IsReady+0x1a>
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003afe:	b480      	push	{r7}
 8003b00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d101      	bne.n	8003b9e <LL_RCC_LSE_IsReady+0x18>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <LL_RCC_LSE_IsReady+0x1a>
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003baa:	b480      	push	{r7}
 8003bac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d101      	bne.n	8003c06 <LL_RCC_LSI1_IsReady+0x18>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <LL_RCC_LSI1_IsReady+0x1a>
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c22:	f043 0304 	orr.w	r3, r3, #4
 8003c26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c44:	f023 0304 	bic.w	r3, r3, #4
 8003c48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003c56:	b480      	push	{r7}
 8003c58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d101      	bne.n	8003c6e <LL_RCC_LSI2_IsReady+0x18>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <LL_RCC_LSI2_IsReady+0x1a>
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	6013      	str	r3, [r2, #0]
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	6013      	str	r3, [r2, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d101      	bne.n	8003cfa <LL_RCC_MSI_IsReady+0x16>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <LL_RCC_MSI_IsReady+0x18>
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d3e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2bb0      	cmp	r3, #176	; 0xb0
 8003d44:	d901      	bls.n	8003d4a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003d46:	23b0      	movs	r3, #176	; 0xb0
 8003d48:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003d4a:	687b      	ldr	r3, [r7, #4]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d72:	4313      	orrs	r3, r2
 8003d74:	604b      	str	r3, [r1, #4]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 0203 	bic.w	r2, r3, #3
 8003d94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 030c 	and.w	r3, r3, #12
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e26:	f023 020f 	bic.w	r2, r3, #15
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	608b      	str	r3, [r1, #8]
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	608b      	str	r3, [r1, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ef4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef8:	6013      	str	r3, [r2, #0]
}
 8003efa:	bf00      	nop
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f16:	d101      	bne.n	8003f1c <LL_RCC_PLL_IsReady+0x18>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <LL_RCC_PLL_IsReady+0x1a>
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	0a1b      	lsrs	r3, r3, #8
 8003f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003f42:	b480      	push	{r7}
 8003f44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003f72:	b480      	push	{r7}
 8003f74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9c:	d101      	bne.n	8003fa2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fc2:	d101      	bne.n	8003fc8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fdc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe8:	d101      	bne.n	8003fee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800400c:	d101      	bne.n	8004012 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800402c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004030:	d101      	bne.n	8004036 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b08d      	sub	sp, #52	; 0x34
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e37e      	b.n	8004754 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8092 	beq.w	8004188 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004064:	f7ff fea1 	bl	8003daa <LL_RCC_GetSysClkSource>
 8004068:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800406a:	f7ff ff82 	bl	8003f72 <LL_RCC_PLL_GetMainSource>
 800406e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_RCC_OscConfig+0x3e>
 8004076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004078:	2b0c      	cmp	r3, #12
 800407a:	d14c      	bne.n	8004116 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	2b01      	cmp	r3, #1
 8004080:	d149      	bne.n	8004116 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004082:	f7ff fe2f 	bl	8003ce4 <LL_RCC_MSI_IsReady>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_RCC_OscConfig+0x54>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e35d      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800409c:	f7ff fe47 	bl	8003d2e <LL_RCC_MSI_GetRange>
 80040a0:	4603      	mov	r3, r0
 80040a2:	429c      	cmp	r4, r3
 80040a4:	d914      	bls.n	80040d0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fd16 	bl	8004adc <RCC_SetFlashLatencyFromMSIRange>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e34c      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fe21 	bl	8003d06 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fe45 	bl	8003d58 <LL_RCC_MSI_SetCalibTrimming>
 80040ce:	e013      	b.n	80040f8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fe16 	bl	8003d06 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fe3a 	bl	8003d58 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fcf7 	bl	8004adc <RCC_SetFlashLatencyFromMSIRange>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e32d      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80040f8:	f000 fcdc 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4ab3      	ldr	r2, [pc, #716]	; (80043cc <HAL_RCC_OscConfig+0x388>)
 8004100:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004102:	4bb3      	ldr	r3, [pc, #716]	; (80043d0 <HAL_RCC_OscConfig+0x38c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fd fbc2 	bl	8001890 <HAL_InitTick>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d039      	beq.n	8004186 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e31e      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01e      	beq.n	800415c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800411e:	f7ff fdc3 	bl	8003ca8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004122:	f7fd fc03 	bl	800192c <HAL_GetTick>
 8004126:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800412a:	f7fd fbff 	bl	800192c <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e30b      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800413c:	f7ff fdd2 	bl	8003ce4 <LL_RCC_MSI_IsReady>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f1      	beq.n	800412a <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fddb 	bl	8003d06 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff fdff 	bl	8003d58 <LL_RCC_MSI_SetCalibTrimming>
 800415a:	e015      	b.n	8004188 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800415c:	f7ff fdb3 	bl	8003cc6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004160:	f7fd fbe4 	bl	800192c <HAL_GetTick>
 8004164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004168:	f7fd fbe0 	bl	800192c <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e2ec      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800417a:	f7ff fdb3 	bl	8003ce4 <LL_RCC_MSI_IsReady>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f1      	bne.n	8004168 <HAL_RCC_OscConfig+0x124>
 8004184:	e000      	b.n	8004188 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004186:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d04e      	beq.n	8004232 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004194:	f7ff fe09 	bl	8003daa <LL_RCC_GetSysClkSource>
 8004198:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800419a:	f7ff feea 	bl	8003f72 <LL_RCC_PLL_GetMainSource>
 800419e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d005      	beq.n	80041b2 <HAL_RCC_OscConfig+0x16e>
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	d10d      	bne.n	80041c8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d10a      	bne.n	80041c8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b2:	f7ff fc19 	bl	80039e8 <LL_RCC_HSE_IsReady>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d039      	beq.n	8004230 <HAL_RCC_OscConfig+0x1ec>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d135      	bne.n	8004230 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e2c5      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d0:	d102      	bne.n	80041d8 <HAL_RCC_OscConfig+0x194>
 80041d2:	f7ff fbeb 	bl	80039ac <LL_RCC_HSE_Enable>
 80041d6:	e001      	b.n	80041dc <HAL_RCC_OscConfig+0x198>
 80041d8:	f7ff fbf7 	bl	80039ca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d012      	beq.n	800420a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fd fba2 	bl	800192c <HAL_GetTick>
 80041e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ec:	f7fd fb9e 	bl	800192c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	; 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e2aa      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80041fe:	f7ff fbf3 	bl	80039e8 <LL_RCC_HSE_IsReady>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f1      	beq.n	80041ec <HAL_RCC_OscConfig+0x1a8>
 8004208:	e013      	b.n	8004232 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fd fb8f 	bl	800192c <HAL_GetTick>
 800420e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004212:	f7fd fb8b 	bl	800192c <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b64      	cmp	r3, #100	; 0x64
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e297      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004224:	f7ff fbe0 	bl	80039e8 <LL_RCC_HSE_IsReady>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f1      	bne.n	8004212 <HAL_RCC_OscConfig+0x1ce>
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004230:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d051      	beq.n	80042e2 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800423e:	f7ff fdb4 	bl	8003daa <LL_RCC_GetSysClkSource>
 8004242:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004244:	f7ff fe95 	bl	8003f72 <LL_RCC_PLL_GetMainSource>
 8004248:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d005      	beq.n	800425c <HAL_RCC_OscConfig+0x218>
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2b0c      	cmp	r3, #12
 8004254:	d113      	bne.n	800427e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d110      	bne.n	800427e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800425c:	f7ff fbf4 	bl	8003a48 <LL_RCC_HSI_IsReady>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_RCC_OscConfig+0x22e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e270      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fbf8 	bl	8003a6c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800427c:	e031      	b.n	80042e2 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d019      	beq.n	80042ba <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004286:	f7ff fbc1 	bl	8003a0c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fd fb4f 	bl	800192c <HAL_GetTick>
 800428e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004292:	f7fd fb4b 	bl	800192c <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e257      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80042a4:	f7ff fbd0 	bl	8003a48 <LL_RCC_HSI_IsReady>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f1      	beq.n	8004292 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fbda 	bl	8003a6c <LL_RCC_HSI_SetCalibTrimming>
 80042b8:	e013      	b.n	80042e2 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ba:	f7ff fbb6 	bl	8003a2a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042be:	f7fd fb35 	bl	800192c <HAL_GetTick>
 80042c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c6:	f7fd fb31 	bl	800192c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e23d      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80042d8:	f7ff fbb6 	bl	8003a48 <LL_RCC_HSI_IsReady>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f1      	bne.n	80042c6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 80a3 	beq.w	8004442 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d076      	beq.n	80043f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	d046      	beq.n	800439e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004310:	f7ff fc6d 	bl	8003bee <LL_RCC_LSI1_IsReady>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d113      	bne.n	8004342 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800431a:	f7ff fc46 	bl	8003baa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800431e:	f7fd fb05 	bl	800192c <HAL_GetTick>
 8004322:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004326:	f7fd fb01 	bl	800192c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e20d      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004338:	f7ff fc59 	bl	8003bee <LL_RCC_LSI1_IsReady>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f1      	beq.n	8004326 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004342:	f7ff fc66 	bl	8003c12 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004346:	f7fd faf1 	bl	800192c <HAL_GetTick>
 800434a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800434e:	f7fd faed 	bl	800192c <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b03      	cmp	r3, #3
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e1f9      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004360:	f7ff fc79 	bl	8003c56 <LL_RCC_LSI2_IsReady>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f1      	beq.n	800434e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fc83 	bl	8003c7a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004374:	f7ff fc2a 	bl	8003bcc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd fad8 	bl	800192c <HAL_GetTick>
 800437c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004380:	f7fd fad4 	bl	800192c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e1e0      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004392:	f7ff fc2c 	bl	8003bee <LL_RCC_LSI1_IsReady>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f1      	bne.n	8004380 <HAL_RCC_OscConfig+0x33c>
 800439c:	e051      	b.n	8004442 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800439e:	f7ff fc04 	bl	8003baa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a2:	f7fd fac3 	bl	800192c <HAL_GetTick>
 80043a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80043aa:	f7fd fabf 	bl	800192c <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e1cb      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80043bc:	f7ff fc17 	bl	8003bee <LL_RCC_LSI1_IsReady>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f1      	beq.n	80043aa <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80043c6:	f7ff fc35 	bl	8003c34 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80043ca:	e00c      	b.n	80043e6 <HAL_RCC_OscConfig+0x3a2>
 80043cc:	20000004 	.word	0x20000004
 80043d0:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80043d4:	f7fd faaa 	bl	800192c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e1b6      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80043e6:	f7ff fc36 	bl	8003c56 <LL_RCC_LSI2_IsReady>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1f1      	bne.n	80043d4 <HAL_RCC_OscConfig+0x390>
 80043f0:	e027      	b.n	8004442 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80043f2:	f7ff fc1f 	bl	8003c34 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f6:	f7fd fa99 	bl	800192c <HAL_GetTick>
 80043fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80043fe:	f7fd fa95 	bl	800192c <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b03      	cmp	r3, #3
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e1a1      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004410:	f7ff fc21 	bl	8003c56 <LL_RCC_LSI2_IsReady>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f1      	bne.n	80043fe <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800441a:	f7ff fbd7 	bl	8003bcc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441e:	f7fd fa85 	bl	800192c <HAL_GetTick>
 8004422:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004426:	f7fd fa81 	bl	800192c <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e18d      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004438:	f7ff fbd9 	bl	8003bee <LL_RCC_LSI1_IsReady>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f1      	bne.n	8004426 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d05b      	beq.n	8004506 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444e:	4bb5      	ldr	r3, [pc, #724]	; (8004724 <HAL_RCC_OscConfig+0x6e0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d114      	bne.n	8004484 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800445a:	f7ff fa67 	bl	800392c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800445e:	f7fd fa65 	bl	800192c <HAL_GetTick>
 8004462:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004466:	f7fd fa61 	bl	800192c <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e16d      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004478:	4baa      	ldr	r3, [pc, #680]	; (8004724 <HAL_RCC_OscConfig+0x6e0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d102      	bne.n	8004492 <HAL_RCC_OscConfig+0x44e>
 800448c:	f7ff fb37 	bl	8003afe <LL_RCC_LSE_Enable>
 8004490:	e00c      	b.n	80044ac <HAL_RCC_OscConfig+0x468>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b05      	cmp	r3, #5
 8004498:	d104      	bne.n	80044a4 <HAL_RCC_OscConfig+0x460>
 800449a:	f7ff fb52 	bl	8003b42 <LL_RCC_LSE_EnableBypass>
 800449e:	f7ff fb2e 	bl	8003afe <LL_RCC_LSE_Enable>
 80044a2:	e003      	b.n	80044ac <HAL_RCC_OscConfig+0x468>
 80044a4:	f7ff fb3c 	bl	8003b20 <LL_RCC_LSE_Disable>
 80044a8:	f7ff fb5c 	bl	8003b64 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d014      	beq.n	80044de <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fd fa3a 	bl	800192c <HAL_GetTick>
 80044b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044bc:	f7fd fa36 	bl	800192c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e140      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80044d2:	f7ff fb58 	bl	8003b86 <LL_RCC_LSE_IsReady>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ef      	beq.n	80044bc <HAL_RCC_OscConfig+0x478>
 80044dc:	e013      	b.n	8004506 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044de:	f7fd fa25 	bl	800192c <HAL_GetTick>
 80044e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80044e4:	e00a      	b.n	80044fc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e6:	f7fd fa21 	bl	800192c <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e12b      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80044fc:	f7ff fb43 	bl	8003b86 <LL_RCC_LSE_IsReady>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1ef      	bne.n	80044e6 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d02c      	beq.n	800456c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	2b00      	cmp	r3, #0
 8004518:	d014      	beq.n	8004544 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800451a:	f7ff fabc 	bl	8003a96 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451e:	f7fd fa05 	bl	800192c <HAL_GetTick>
 8004522:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004526:	f7fd fa01 	bl	800192c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e10d      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004538:	f7ff facf 	bl	8003ada <LL_RCC_HSI48_IsReady>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f1      	beq.n	8004526 <HAL_RCC_OscConfig+0x4e2>
 8004542:	e013      	b.n	800456c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004544:	f7ff fab8 	bl	8003ab8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fd f9f0 	bl	800192c <HAL_GetTick>
 800454c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004550:	f7fd f9ec 	bl	800192c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e0f8      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004562:	f7ff faba 	bl	8003ada <LL_RCC_HSI48_IsReady>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f1      	bne.n	8004550 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80ee 	beq.w	8004752 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004576:	f7ff fc18 	bl	8003daa <LL_RCC_GetSysClkSource>
 800457a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800457c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	2b02      	cmp	r3, #2
 800458a:	f040 80af 	bne.w	80046ec <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f003 0203 	and.w	r2, r3, #3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	429a      	cmp	r2, r3
 800459a:	d123      	bne.n	80045e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d11c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	0a1b      	lsrs	r3, r3, #8
 80045ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d114      	bne.n	80045e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d10d      	bne.n	80045e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d106      	bne.n	80045e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d05d      	beq.n	80046a0 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b0c      	cmp	r3, #12
 80045e8:	d058      	beq.n	800469c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0ab      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045fc:	f7ff fc73 	bl	8003ee6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004600:	f7fd f994 	bl	800192c <HAL_GetTick>
 8004604:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004608:	f7fd f990 	bl	800192c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e09c      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1ef      	bne.n	8004608 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	4b3e      	ldr	r3, [pc, #248]	; (8004728 <HAL_RCC_OscConfig+0x6e4>)
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800463a:	4311      	orrs	r1, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004640:	0212      	lsls	r2, r2, #8
 8004642:	4311      	orrs	r1, r2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004648:	4311      	orrs	r1, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800464e:	4311      	orrs	r1, r2
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004654:	430a      	orrs	r2, r1
 8004656:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800465a:	4313      	orrs	r3, r2
 800465c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800465e:	f7ff fc33 	bl	8003ec8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800466c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004670:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004672:	f7fd f95b 	bl	800192c <HAL_GetTick>
 8004676:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467a:	f7fd f957 	bl	800192c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e063      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0ef      	beq.n	800467a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800469a:	e05a      	b.n	8004752 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e059      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d151      	bne.n	8004752 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046ae:	f7ff fc0b 	bl	8003ec8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046c2:	f7fd f933 	bl	800192c <HAL_GetTick>
 80046c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ca:	f7fd f92f 	bl	800192c <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e03b      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0ef      	beq.n	80046ca <HAL_RCC_OscConfig+0x686>
 80046ea:	e032      	b.n	8004752 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2b0c      	cmp	r3, #12
 80046f0:	d02d      	beq.n	800474e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	f7ff fbf8 	bl	8003ee6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80046f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004700:	f023 0303 	bic.w	r3, r3, #3
 8004704:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004710:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004718:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471a:	f7fd f907 	bl	800192c <HAL_GetTick>
 800471e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004720:	e00d      	b.n	800473e <HAL_RCC_OscConfig+0x6fa>
 8004722:	bf00      	nop
 8004724:	58000400 	.word	0x58000400
 8004728:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472c:	f7fd f8fe 	bl	800192c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e00a      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1ef      	bne.n	800472c <HAL_RCC_OscConfig+0x6e8>
 800474c:	e001      	b.n	8004752 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3734      	adds	r7, #52	; 0x34
 8004758:	46bd      	mov	sp, r7
 800475a:	bd90      	pop	{r4, r7, pc}

0800475c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e12d      	b.n	80049cc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004770:	4b98      	ldr	r3, [pc, #608]	; (80049d4 <HAL_RCC_ClockConfig+0x278>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d91b      	bls.n	80047b6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477e:	4b95      	ldr	r3, [pc, #596]	; (80049d4 <HAL_RCC_ClockConfig+0x278>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 0207 	bic.w	r2, r3, #7
 8004786:	4993      	ldr	r1, [pc, #588]	; (80049d4 <HAL_RCC_ClockConfig+0x278>)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800478e:	f7fd f8cd 	bl	800192c <HAL_GetTick>
 8004792:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004796:	f7fd f8c9 	bl	800192c <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e111      	b.n	80049cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a8:	4b8a      	ldr	r3, [pc, #552]	; (80049d4 <HAL_RCC_ClockConfig+0x278>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d1ef      	bne.n	8004796 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fafb 	bl	8003dc2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047cc:	f7fd f8ae 	bl	800192c <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047d4:	f7fd f8aa 	bl	800192c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e0f2      	b.n	80049cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80047e6:	f7ff fbd0 	bl	8003f8a <LL_RCC_IsActiveFlag_HPRE>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f1      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d016      	beq.n	800482a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff faf2 	bl	8003dea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004806:	f7fd f891 	bl	800192c <HAL_GetTick>
 800480a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800480c:	e008      	b.n	8004820 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800480e:	f7fd f88d 	bl	800192c <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e0d5      	b.n	80049cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004820:	f7ff fbc5 	bl	8003fae <LL_RCC_IsActiveFlag_C2HPRE>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f1      	beq.n	800480e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff faeb 	bl	8003e16 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004840:	f7fd f874 	bl	800192c <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004848:	f7fd f870 	bl	800192c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e0b8      	b.n	80049cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800485a:	f7ff fbbb 	bl	8003fd4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f1      	beq.n	8004848 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d016      	beq.n	800489e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff fae5 	bl	8003e44 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800487a:	f7fd f857 	bl	800192c <HAL_GetTick>
 800487e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004880:	e008      	b.n	8004894 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004882:	f7fd f853 	bl	800192c <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e09b      	b.n	80049cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004894:	f7ff fbb1 	bl	8003ffa <LL_RCC_IsActiveFlag_PPRE1>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f1      	beq.n	8004882 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d017      	beq.n	80048da <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fadb 	bl	8003e6c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048b6:	f7fd f839 	bl	800192c <HAL_GetTick>
 80048ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048be:	f7fd f835 	bl	800192c <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e07d      	b.n	80049cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80048d0:	f7ff fba5 	bl	800401e <LL_RCC_IsActiveFlag_PPRE2>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f1      	beq.n	80048be <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d043      	beq.n	800496e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d106      	bne.n	80048fc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80048ee:	f7ff f87b 	bl	80039e8 <LL_RCC_HSE_IsReady>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d11e      	bne.n	8004936 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e067      	b.n	80049cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b03      	cmp	r3, #3
 8004902:	d106      	bne.n	8004912 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004904:	f7ff fafe 	bl	8003f04 <LL_RCC_PLL_IsReady>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d113      	bne.n	8004936 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e05c      	b.n	80049cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800491a:	f7ff f9e3 	bl	8003ce4 <LL_RCC_MSI_IsReady>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d108      	bne.n	8004936 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e051      	b.n	80049cc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004928:	f7ff f88e 	bl	8003a48 <LL_RCC_HSI_IsReady>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e04a      	b.n	80049cc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fa21 	bl	8003d82 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004940:	f7fc fff4 	bl	800192c <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	e00a      	b.n	800495e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004948:	f7fc fff0 	bl	800192c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	; 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e036      	b.n	80049cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	f7ff fa24 	bl	8003daa <LL_RCC_GetSysClkSource>
 8004962:	4602      	mov	r2, r0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	429a      	cmp	r2, r3
 800496c:	d1ec      	bne.n	8004948 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800496e:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_RCC_ClockConfig+0x278>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d21b      	bcs.n	80049b4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497c:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <HAL_RCC_ClockConfig+0x278>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f023 0207 	bic.w	r2, r3, #7
 8004984:	4913      	ldr	r1, [pc, #76]	; (80049d4 <HAL_RCC_ClockConfig+0x278>)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	4313      	orrs	r3, r2
 800498a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498c:	f7fc ffce 	bl	800192c <HAL_GetTick>
 8004990:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004994:	f7fc ffca 	bl	800192c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e012      	b.n	80049cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_ClockConfig+0x278>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d1ef      	bne.n	8004994 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049b4:	f000 f87e 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 80049b8:	4603      	mov	r3, r0
 80049ba:	4a07      	ldr	r2, [pc, #28]	; (80049d8 <HAL_RCC_ClockConfig+0x27c>)
 80049bc:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80049be:	f7fc ffc1 	bl	8001944 <HAL_GetTickPrio>
 80049c2:	4603      	mov	r3, r0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fc ff63 	bl	8001890 <HAL_InitTick>
 80049ca:	4603      	mov	r3, r0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	58004000 	.word	0x58004000
 80049d8:	20000004 	.word	0x20000004

080049dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e2:	f7ff f9e2 	bl	8003daa <LL_RCC_GetSysClkSource>
 80049e6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80049ee:	f7ff f99e 	bl	8003d2e <LL_RCC_MSI_GetRange>
 80049f2:	4603      	mov	r3, r0
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	4a2b      	ldr	r2, [pc, #172]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80049fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	e04b      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d102      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a0a:	4b28      	ldr	r3, [pc, #160]	; (8004aac <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e045      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d10a      	bne.n	8004a2c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004a16:	f7fe ffb7 	bl	8003988 <LL_RCC_HSE_IsEnabledDiv2>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d102      	bne.n	8004a26 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004a20:	4b23      	ldr	r3, [pc, #140]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e03a      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004a26:	4b21      	ldr	r3, [pc, #132]	; (8004aac <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	e037      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004a2c:	f7ff faa1 	bl	8003f72 <LL_RCC_PLL_GetMainSource>
 8004a30:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d003      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x64>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCC_GetSysClockFreq+0x6a>
 8004a3e:	e00d      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004a40:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a42:	60bb      	str	r3, [r7, #8]
        break;
 8004a44:	e015      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004a46:	f7fe ff9f 	bl	8003988 <LL_RCC_HSE_IsEnabledDiv2>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d102      	bne.n	8004a56 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004a50:	4b17      	ldr	r3, [pc, #92]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a52:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004a54:	e00d      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004a56:	4b15      	ldr	r3, [pc, #84]	; (8004aac <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a58:	60bb      	str	r3, [r7, #8]
        break;
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004a5c:	f7ff f967 	bl	8003d2e <LL_RCC_MSI_GetRange>
 8004a60:	4603      	mov	r3, r0
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	4a0f      	ldr	r2, [pc, #60]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6e:	60bb      	str	r3, [r7, #8]
        break;
 8004a70:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004a72:	f7ff fa59 	bl	8003f28 <LL_RCC_PLL_GetN>
 8004a76:	4602      	mov	r2, r0
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	fb03 f402 	mul.w	r4, r3, r2
 8004a7e:	f7ff fa6c 	bl	8003f5a <LL_RCC_PLL_GetDivider>
 8004a82:	4603      	mov	r3, r0
 8004a84:	091b      	lsrs	r3, r3, #4
 8004a86:	3301      	adds	r3, #1
 8004a88:	fbb4 f4f3 	udiv	r4, r4, r3
 8004a8c:	f7ff fa59 	bl	8003f42 <LL_RCC_PLL_GetR>
 8004a90:	4603      	mov	r3, r0
 8004a92:	0f5b      	lsrs	r3, r3, #29
 8004a94:	3301      	adds	r3, #1
 8004a96:	fbb4 f3f3 	udiv	r3, r4, r3
 8004a9a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd90      	pop	{r4, r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	0800a9ac 	.word	0x0800a9ac
 8004aac:	00f42400 	.word	0x00f42400
 8004ab0:	007a1200 	.word	0x007a1200

08004ab4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab4:	b598      	push	{r3, r4, r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004ab8:	f7ff ff90 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 8004abc:	4604      	mov	r4, r0
 8004abe:	f7ff f9e9 	bl	8003e94 <LL_RCC_GetAHBPrescaler>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	4a03      	ldr	r2, [pc, #12]	; (8004ad8 <HAL_RCC_GetHCLKFreq+0x24>)
 8004acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd98      	pop	{r3, r4, r7, pc}
 8004ad8:	0800a96c 	.word	0x0800a96c

08004adc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2bb0      	cmp	r3, #176	; 0xb0
 8004ae8:	d903      	bls.n	8004af2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004aea:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e007      	b.n	8004b02 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	4a11      	ldr	r2, [pc, #68]	; (8004b40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b00:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004b02:	f7ff f9d3 	bl	8003eac <LL_RCC_GetAHB4Prescaler>
 8004b06:	4603      	mov	r3, r0
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	4a0d      	ldr	r2, [pc, #52]	; (8004b44 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	0c9c      	lsrs	r4, r3, #18
 8004b26:	f7fe ff11 	bl	800394c <HAL_PWREx_GetVoltageRange>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f000 f80c 	bl	8004b4c <RCC_SetFlashLatency>
 8004b34:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd90      	pop	{r4, r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	0800a9ac 	.word	0x0800a9ac
 8004b44:	0800a96c 	.word	0x0800a96c
 8004b48:	431bde83 	.word	0x431bde83

08004b4c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004b4c:	b590      	push	{r4, r7, lr}
 8004b4e:	b093      	sub	sp, #76	; 0x4c
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004b56:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <RCC_SetFlashLatency+0xf0>)
 8004b58:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004b5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004b62:	4a37      	ldr	r2, [pc, #220]	; (8004c40 <RCC_SetFlashLatency+0xf4>)
 8004b64:	f107 031c 	add.w	r3, r7, #28
 8004b68:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004b6e:	4b35      	ldr	r3, [pc, #212]	; (8004c44 <RCC_SetFlashLatency+0xf8>)
 8004b70:	f107 040c 	add.w	r4, r7, #12
 8004b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b84:	d11c      	bne.n	8004bc0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8a:	e015      	b.n	8004bb8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b94:	4413      	add	r3, r2
 8004b96:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d808      	bhi.n	8004bb2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ba8:	4413      	add	r3, r2
 8004baa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004bae:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004bb0:	e022      	b.n	8004bf8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	643b      	str	r3, [r7, #64]	; 0x40
 8004bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d9e6      	bls.n	8004b8c <RCC_SetFlashLatency+0x40>
 8004bbe:	e01b      	b.n	8004bf8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bc4:	e015      	b.n	8004bf2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004bce:	4413      	add	r3, r2
 8004bd0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d808      	bhi.n	8004bec <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004be2:	4413      	add	r3, r2
 8004be4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004be8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004bea:	e005      	b.n	8004bf8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bee:	3301      	adds	r3, #1
 8004bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d9e6      	bls.n	8004bc6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004bf8:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <RCC_SetFlashLatency+0xfc>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f023 0207 	bic.w	r2, r3, #7
 8004c00:	4911      	ldr	r1, [pc, #68]	; (8004c48 <RCC_SetFlashLatency+0xfc>)
 8004c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c04:	4313      	orrs	r3, r2
 8004c06:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004c08:	f7fc fe90 	bl	800192c <HAL_GetTick>
 8004c0c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004c0e:	e008      	b.n	8004c22 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c10:	f7fc fe8c 	bl	800192c <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e007      	b.n	8004c32 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <RCC_SetFlashLatency+0xfc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1ef      	bne.n	8004c10 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	374c      	adds	r7, #76	; 0x4c
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd90      	pop	{r4, r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	0800a8f8 	.word	0x0800a8f8
 8004c40:	0800a908 	.word	0x0800a908
 8004c44:	0800a914 	.word	0x0800a914
 8004c48:	58004000 	.word	0x58004000

08004c4c <LL_RCC_LSE_IsEnabled>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <LL_RCC_LSE_IsEnabled+0x18>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e000      	b.n	8004c66 <LL_RCC_LSE_IsEnabled+0x1a>
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <LL_RCC_LSE_IsReady>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d101      	bne.n	8004c88 <LL_RCC_LSE_IsReady+0x18>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <LL_RCC_LSE_IsReady+0x1a>
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <LL_RCC_MSI_EnablePLLMode>:
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca2:	f043 0304 	orr.w	r3, r3, #4
 8004ca6:	6013      	str	r3, [r2, #0]
}
 8004ca8:	bf00      	nop
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <LL_RCC_SetRFWKPClockSource>:
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <LL_RCC_SetSMPSClockSource>:
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	f023 0203 	bic.w	r2, r3, #3
 8004cf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <LL_RCC_SetSMPSPrescaler>:
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <LL_RCC_SetUSARTClockSource>:
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f023 0203 	bic.w	r2, r3, #3
 8004d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <LL_RCC_SetLPUARTClockSource>:
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <LL_RCC_SetI2CClockSource>:
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	401a      	ands	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_RCC_SetLPTIMClockSource>:
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	0c1b      	lsrs	r3, r3, #16
 8004dd4:	041b      	lsls	r3, r3, #16
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	401a      	ands	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <LL_RCC_SetSAIClockSource>:
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <LL_RCC_SetRNGClockSource>:
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e30:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <LL_RCC_SetCLK48ClockSource>:
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <LL_RCC_SetUSBClockSource>:
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff ffe3 	bl	8004e4c <LL_RCC_SetCLK48ClockSource>
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <LL_RCC_SetADCClockSource>:
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_RCC_SetRTCClockSource>:
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_RCC_GetRTCClockSource>:
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <LL_RCC_ForceBackupDomainReset>:
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f18:	bf00      	nop
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004f22:	b480      	push	{r7}
 8004f24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f3a:	bf00      	nop
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <LL_RCC_PLLSAI1_Enable>:
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f56:	6013      	str	r3, [r2, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <LL_RCC_PLLSAI1_Disable>:
{
 8004f62:	b480      	push	{r7}
 8004f64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f74:	6013      	str	r3, [r2, #0]
}
 8004f76:	bf00      	nop
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <LL_RCC_PLLSAI1_IsReady>:
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f92:	d101      	bne.n	8004f98 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004fac:	2300      	movs	r3, #0
 8004fae:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d034      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fc8:	d021      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004fca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fce:	d81b      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd4:	d01d      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004fd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fda:	d815      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00b      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe4:	d110      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ff6:	e00d      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f94d 	bl	800529c <RCCEx_PLLSAI1_ConfigNP>
 8005002:	4603      	mov	r3, r0
 8005004:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005006:	e005      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	77fb      	strb	r3, [r7, #31]
        break;
 800500c:	e002      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005014:	7ffb      	ldrb	r3, [r7, #31]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d105      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff fee8 	bl	8004df4 <LL_RCC_SetSAIClockSource>
 8005024:	e001      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005026:	7ffb      	ldrb	r3, [r7, #31]
 8005028:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005032:	2b00      	cmp	r3, #0
 8005034:	d046      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005036:	f7ff ff56 	bl	8004ee6 <LL_RCC_GetRTCClockSource>
 800503a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	429a      	cmp	r2, r3
 8005044:	d03c      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005046:	f7fe fc71 	bl	800392c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d105      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff ff30 	bl	8004eba <LL_RCC_SetRTCClockSource>
 800505a:	e02e      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800505c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005064:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005066:	f7ff ff4b 	bl	8004f00 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800506a:	f7ff ff5a 	bl	8004f22 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800507c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005086:	f7ff fde1 	bl	8004c4c <LL_RCC_LSE_IsEnabled>
 800508a:	4603      	mov	r3, r0
 800508c:	2b01      	cmp	r3, #1
 800508e:	d114      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005090:	f7fc fc4c 	bl	800192c <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005096:	e00b      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005098:	f7fc fc48 	bl	800192c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d902      	bls.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	77fb      	strb	r3, [r7, #31]
              break;
 80050ae:	e004      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80050b0:	f7ff fdde 	bl	8004c70 <LL_RCC_LSE_IsReady>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d1ee      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80050ba:	7ffb      	ldrb	r3, [r7, #31]
 80050bc:	77bb      	strb	r3, [r7, #30]
 80050be:	e001      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c0:	7ffb      	ldrb	r3, [r7, #31]
 80050c2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d004      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fe2a 	bl	8004d2e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d004      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fe35 	bl	8004d5a <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fe5d 	bl	8004dc0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fe52 	bl	8004dc0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d004      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fe2a 	bl	8004d86 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fe1f 	bl	8004d86 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005150:	2b00      	cmp	r3, #0
 8005152:	d022      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fe8d 	bl	8004e78 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005162:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005166:	d107      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005176:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005180:	d10b      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3304      	adds	r3, #4
 8005186:	4618      	mov	r0, r3
 8005188:	f000 f8e3 	bl	8005352 <RCCEx_PLLSAI1_ConfigNQ>
 800518c:	4603      	mov	r3, r0
 800518e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005190:	7ffb      	ldrb	r3, [r7, #31]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005196:	7ffb      	ldrb	r3, [r7, #31]
 8005198:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d02b      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ae:	d008      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b8:	d003      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fe2a 	bl	8004e20 <LL_RCC_SetRNGClockSource>
 80051cc:	e00a      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	2000      	movs	r0, #0
 80051da:	f7ff fe21 	bl	8004e20 <LL_RCC_SetRNGClockSource>
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff fe34 	bl	8004e4c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80051ec:	d107      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80051ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005206:	2b00      	cmp	r3, #0
 8005208:	d022      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fe3d 	bl	8004e8e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800521c:	d107      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800521e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005236:	d10b      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3304      	adds	r3, #4
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f8e3 	bl	8005408 <RCCEx_PLLSAI1_ConfigNR>
 8005242:	4603      	mov	r3, r0
 8005244:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005246:	7ffb      	ldrb	r3, [r7, #31]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800524c:	7ffb      	ldrb	r3, [r7, #31]
 800524e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d004      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fd26 	bl	8004cb2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff fd45 	bl	8004d06 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fd2c 	bl	8004cde <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005286:	7fbb      	ldrb	r3, [r7, #30]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3720      	adds	r7, #32
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005294:	f7ff fcfe 	bl	8004c94 <LL_RCC_MSI_EnablePLLMode>
}
 8005298:	bf00      	nop
 800529a:	bd80      	pop	{r7, pc}

0800529c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80052a8:	f7ff fe5b 	bl	8004f62 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052ac:	f7fc fb3e 	bl	800192c <HAL_GetTick>
 80052b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80052b2:	e009      	b.n	80052c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052b4:	f7fc fb3a 	bl	800192c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d902      	bls.n	80052c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	73fb      	strb	r3, [r7, #15]
      break;
 80052c6:	e004      	b.n	80052d2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80052c8:	f7ff fe5a 	bl	8004f80 <LL_RCC_PLLSAI1_IsReady>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d137      	bne.n	8005348 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80052d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ec:	4313      	orrs	r3, r2
 80052ee:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80052f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005302:	4313      	orrs	r3, r2
 8005304:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005306:	f7ff fe1d 	bl	8004f44 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530a:	f7fc fb0f 	bl	800192c <HAL_GetTick>
 800530e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005310:	e009      	b.n	8005326 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005312:	f7fc fb0b 	bl	800192c <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d902      	bls.n	8005326 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	73fb      	strb	r3, [r7, #15]
        break;
 8005324:	e004      	b.n	8005330 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005326:	f7ff fe2b 	bl	8004f80 <LL_RCC_PLLSAI1_IsReady>
 800532a:	4603      	mov	r3, r0
 800532c:	2b01      	cmp	r3, #1
 800532e:	d1f0      	bne.n	8005312 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d108      	bne.n	8005348 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005344:	4313      	orrs	r3, r2
 8005346:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005348:	7bfb      	ldrb	r3, [r7, #15]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800535e:	f7ff fe00 	bl	8004f62 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005362:	f7fc fae3 	bl	800192c <HAL_GetTick>
 8005366:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005368:	e009      	b.n	800537e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800536a:	f7fc fadf 	bl	800192c <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d902      	bls.n	800537e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	73fb      	strb	r3, [r7, #15]
      break;
 800537c:	e004      	b.n	8005388 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800537e:	f7ff fdff 	bl	8004f80 <LL_RCC_PLLSAI1_IsReady>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1f0      	bne.n	800536a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d137      	bne.n	80053fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800538e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	021b      	lsls	r3, r3, #8
 800539e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a2:	4313      	orrs	r3, r2
 80053a4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80053a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053b8:	4313      	orrs	r3, r2
 80053ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80053bc:	f7ff fdc2 	bl	8004f44 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c0:	f7fc fab4 	bl	800192c <HAL_GetTick>
 80053c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053c6:	e009      	b.n	80053dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053c8:	f7fc fab0 	bl	800192c <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d902      	bls.n	80053dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	73fb      	strb	r3, [r7, #15]
        break;
 80053da:	e004      	b.n	80053e6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053dc:	f7ff fdd0 	bl	8004f80 <LL_RCC_PLLSAI1_IsReady>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d1f0      	bne.n	80053c8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d108      	bne.n	80053fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80053ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053fa:	4313      	orrs	r3, r2
 80053fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005414:	f7ff fda5 	bl	8004f62 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005418:	f7fc fa88 	bl	800192c <HAL_GetTick>
 800541c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800541e:	e009      	b.n	8005434 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005420:	f7fc fa84 	bl	800192c <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d902      	bls.n	8005434 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	73fb      	strb	r3, [r7, #15]
      break;
 8005432:	e004      	b.n	800543e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005434:	f7ff fda4 	bl	8004f80 <LL_RCC_PLLSAI1_IsReady>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f0      	bne.n	8005420 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d137      	bne.n	80054b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005458:	4313      	orrs	r3, r2
 800545a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800545c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800546e:	4313      	orrs	r3, r2
 8005470:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005472:	f7ff fd67 	bl	8004f44 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005476:	f7fc fa59 	bl	800192c <HAL_GetTick>
 800547a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800547c:	e009      	b.n	8005492 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800547e:	f7fc fa55 	bl	800192c <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d902      	bls.n	8005492 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	73fb      	strb	r3, [r7, #15]
        break;
 8005490:	e004      	b.n	800549c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005492:	f7ff fd75 	bl	8004f80 <LL_RCC_PLLSAI1_IsReady>
 8005496:	4603      	mov	r3, r0
 8005498:	2b01      	cmp	r3, #1
 800549a:	d1f0      	bne.n	800547e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d108      	bne.n	80054b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80054a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b0:	4313      	orrs	r3, r2
 80054b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e095      	b.n	80055fc <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d108      	bne.n	80054ea <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e0:	d009      	beq.n	80054f6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	61da      	str	r2, [r3, #28]
 80054e8:	e005      	b.n	80054f6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d106      	bne.n	8005516 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7fb ffcf 	bl	80014b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800552c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005536:	d902      	bls.n	800553e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	e002      	b.n	8005544 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800553e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005542:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800554c:	d007      	beq.n	800555e <HAL_SPI_Init+0xa0>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005556:	d002      	beq.n	800555e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800558c:	431a      	orrs	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a0:	ea42 0103 	orr.w	r1, r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	0c1b      	lsrs	r3, r3, #16
 80055ba:	f003 0204 	and.w	r2, r3, #4
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055da:	ea42 0103 	orr.w	r1, r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_SPI_Transmit+0x22>
 8005622:	2302      	movs	r3, #2
 8005624:	e158      	b.n	80058d8 <HAL_SPI_Transmit+0x2d4>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800562e:	f7fc f97d 	bl	800192c <HAL_GetTick>
 8005632:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d002      	beq.n	800564a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005644:	2302      	movs	r3, #2
 8005646:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005648:	e13d      	b.n	80058c6 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <HAL_SPI_Transmit+0x52>
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d102      	bne.n	800565c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	77fb      	strb	r3, [r7, #31]
    goto error;
 800565a:	e134      	b.n	80058c6 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2203      	movs	r2, #3
 8005660:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a6:	d10f      	bne.n	80056c8 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d007      	beq.n	80056e6 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056ee:	d94b      	bls.n	8005788 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_SPI_Transmit+0xfa>
 80056f8:	8afb      	ldrh	r3, [r7, #22]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d13e      	bne.n	800577c <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	881a      	ldrh	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	1c9a      	adds	r2, r3, #2
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005722:	e02b      	b.n	800577c <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d112      	bne.n	8005758 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	881a      	ldrh	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	1c9a      	adds	r2, r3, #2
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005756:	e011      	b.n	800577c <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005758:	f7fc f8e8 	bl	800192c <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d803      	bhi.n	8005770 <HAL_SPI_Transmit+0x16c>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d102      	bne.n	8005776 <HAL_SPI_Transmit+0x172>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	77fb      	strb	r3, [r7, #31]
          goto error;
 800577a:	e0a4      	b.n	80058c6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1ce      	bne.n	8005724 <HAL_SPI_Transmit+0x120>
 8005786:	e07c      	b.n	8005882 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_SPI_Transmit+0x192>
 8005790:	8afb      	ldrh	r3, [r7, #22]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d170      	bne.n	8005878 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b01      	cmp	r3, #1
 800579e:	d912      	bls.n	80057c6 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	881a      	ldrh	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	1c9a      	adds	r2, r3, #2
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b02      	subs	r3, #2
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057c4:	e058      	b.n	8005878 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	330c      	adds	r3, #12
 80057d0:	7812      	ldrb	r2, [r2, #0]
 80057d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80057ec:	e044      	b.n	8005878 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d12b      	bne.n	8005854 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b01      	cmp	r3, #1
 8005804:	d912      	bls.n	800582c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	881a      	ldrh	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	1c9a      	adds	r2, r3, #2
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b02      	subs	r3, #2
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	87da      	strh	r2, [r3, #62]	; 0x3e
 800582a:	e025      	b.n	8005878 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	7812      	ldrb	r2, [r2, #0]
 8005838:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005852:	e011      	b.n	8005878 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005854:	f7fc f86a 	bl	800192c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d803      	bhi.n	800586c <HAL_SPI_Transmit+0x268>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d102      	bne.n	8005872 <HAL_SPI_Transmit+0x26e>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d102      	bne.n	8005878 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005876:	e026      	b.n	80058c6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1b5      	bne.n	80057ee <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fce4 	bl	8006254 <SPI_EndRxTxTransaction>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058a0:	2300      	movs	r3, #0
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	77fb      	strb	r3, [r7, #31]
 80058c2:	e000      	b.n	80058c6 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80058c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3720      	adds	r7, #32
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	4613      	mov	r3, r2
 80058ee:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058fc:	d112      	bne.n	8005924 <HAL_SPI_Receive+0x44>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10e      	bne.n	8005924 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2204      	movs	r2, #4
 800590a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800590e:	88fa      	ldrh	r2, [r7, #6]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	4613      	mov	r3, r2
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 f910 	bl	8005b40 <HAL_SPI_TransmitReceive>
 8005920:	4603      	mov	r3, r0
 8005922:	e109      	b.n	8005b38 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_SPI_Receive+0x52>
 800592e:	2302      	movs	r3, #2
 8005930:	e102      	b.n	8005b38 <HAL_SPI_Receive+0x258>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800593a:	f7fb fff7 	bl	800192c <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	d002      	beq.n	8005952 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800594c:	2302      	movs	r3, #2
 800594e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005950:	e0e9      	b.n	8005b26 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <HAL_SPI_Receive+0x7e>
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005962:	e0e0      	b.n	8005b26 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2204      	movs	r2, #4
 8005968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	88fa      	ldrh	r2, [r7, #6]
 800597c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	88fa      	ldrh	r2, [r7, #6]
 8005984:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059ae:	d908      	bls.n	80059c2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059be:	605a      	str	r2, [r3, #4]
 80059c0:	e007      	b.n	80059d2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059d0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059da:	d10f      	bne.n	80059fc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d007      	beq.n	8005a1a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a22:	d867      	bhi.n	8005af4 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a24:	e030      	b.n	8005a88 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d117      	bne.n	8005a64 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f103 020c 	add.w	r2, r3, #12
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	7812      	ldrb	r2, [r2, #0]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005a62:	e011      	b.n	8005a88 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a64:	f7fb ff62 	bl	800192c <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d803      	bhi.n	8005a7c <HAL_SPI_Receive+0x19c>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	d102      	bne.n	8005a82 <HAL_SPI_Receive+0x1a2>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a86:	e04e      	b.n	8005b26 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1c8      	bne.n	8005a26 <HAL_SPI_Receive+0x146>
 8005a94:	e034      	b.n	8005b00 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d115      	bne.n	8005ad0 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	b292      	uxth	r2, r2
 8005ab0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	1c9a      	adds	r2, r3, #2
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ace:	e011      	b.n	8005af4 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ad0:	f7fb ff2c 	bl	800192c <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d803      	bhi.n	8005ae8 <HAL_SPI_Receive+0x208>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	d102      	bne.n	8005aee <HAL_SPI_Receive+0x20e>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d102      	bne.n	8005af4 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005af2:	e018      	b.n	8005b26 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1ca      	bne.n	8005a96 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fb4d 	bl	80061a4 <SPI_EndRxTransaction>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	75fb      	strb	r3, [r7, #23]
 8005b22:	e000      	b.n	8005b26 <HAL_SPI_Receive+0x246>
  }

error :
 8005b24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	; 0x28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_SPI_TransmitReceive+0x26>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e1fb      	b.n	8005f5e <HAL_SPI_TransmitReceive+0x41e>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b6e:	f7fb fedd 	bl	800192c <HAL_GetTick>
 8005b72:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b7a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005b82:	887b      	ldrh	r3, [r7, #2]
 8005b84:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005b86:	887b      	ldrh	r3, [r7, #2]
 8005b88:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b8a:	7efb      	ldrb	r3, [r7, #27]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d00e      	beq.n	8005bae <HAL_SPI_TransmitReceive+0x6e>
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b96:	d106      	bne.n	8005ba6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <HAL_SPI_TransmitReceive+0x66>
 8005ba0:	7efb      	ldrb	r3, [r7, #27]
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d003      	beq.n	8005bae <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005bac:	e1cd      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_SPI_TransmitReceive+0x80>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_SPI_TransmitReceive+0x80>
 8005bba:	887b      	ldrh	r3, [r7, #2]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005bc6:	e1c0      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d003      	beq.n	8005bdc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2205      	movs	r2, #5
 8005bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	887a      	ldrh	r2, [r7, #2]
 8005bec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	887a      	ldrh	r2, [r7, #2]
 8005bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	887a      	ldrh	r2, [r7, #2]
 8005c02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	887a      	ldrh	r2, [r7, #2]
 8005c08:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c1e:	d802      	bhi.n	8005c26 <HAL_SPI_TransmitReceive+0xe6>
 8005c20:	8a3b      	ldrh	r3, [r7, #16]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d908      	bls.n	8005c38 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c34:	605a      	str	r2, [r3, #4]
 8005c36:	e007      	b.n	8005c48 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c46:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c52:	2b40      	cmp	r3, #64	; 0x40
 8005c54:	d007      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c6e:	d97c      	bls.n	8005d6a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <HAL_SPI_TransmitReceive+0x13e>
 8005c78:	8a7b      	ldrh	r3, [r7, #18]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d169      	bne.n	8005d52 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	881a      	ldrh	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	1c9a      	adds	r2, r3, #2
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca2:	e056      	b.n	8005d52 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d11b      	bne.n	8005cea <HAL_SPI_TransmitReceive+0x1aa>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d016      	beq.n	8005cea <HAL_SPI_TransmitReceive+0x1aa>
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d113      	bne.n	8005cea <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	881a      	ldrh	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	1c9a      	adds	r2, r3, #2
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d11c      	bne.n	8005d32 <HAL_SPI_TransmitReceive+0x1f2>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d016      	beq.n	8005d32 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	b292      	uxth	r2, r2
 8005d10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	1c9a      	adds	r2, r3, #2
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d32:	f7fb fdfb 	bl	800192c <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d807      	bhi.n	8005d52 <HAL_SPI_TransmitReceive+0x212>
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d003      	beq.n	8005d52 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d50:	e0fb      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1a3      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x164>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d19d      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x164>
 8005d68:	e0df      	b.n	8005f2a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_SPI_TransmitReceive+0x23a>
 8005d72:	8a7b      	ldrh	r3, [r7, #18]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	f040 80cb 	bne.w	8005f10 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d912      	bls.n	8005daa <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	881a      	ldrh	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	1c9a      	adds	r2, r3, #2
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	3b02      	subs	r3, #2
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005da8:	e0b2      	b.n	8005f10 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	330c      	adds	r3, #12
 8005db4:	7812      	ldrb	r2, [r2, #0]
 8005db6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dd0:	e09e      	b.n	8005f10 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d134      	bne.n	8005e4a <HAL_SPI_TransmitReceive+0x30a>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d02f      	beq.n	8005e4a <HAL_SPI_TransmitReceive+0x30a>
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d12c      	bne.n	8005e4a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d912      	bls.n	8005e20 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	881a      	ldrh	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	1c9a      	adds	r2, r3, #2
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b02      	subs	r3, #2
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e1e:	e012      	b.n	8005e46 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	330c      	adds	r3, #12
 8005e2a:	7812      	ldrb	r2, [r2, #0]
 8005e2c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d148      	bne.n	8005eea <HAL_SPI_TransmitReceive+0x3aa>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d042      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d923      	bls.n	8005eb8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	b292      	uxth	r2, r2
 8005e7c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	1c9a      	adds	r2, r3, #2
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b02      	subs	r3, #2
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d81f      	bhi.n	8005ee6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005eb4:	605a      	str	r2, [r3, #4]
 8005eb6:	e016      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f103 020c 	add.w	r2, r3, #12
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005eea:	f7fb fd1f 	bl	800192c <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d803      	bhi.n	8005f02 <HAL_SPI_TransmitReceive+0x3c2>
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d102      	bne.n	8005f08 <HAL_SPI_TransmitReceive+0x3c8>
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d103      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f0e:	e01c      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f47f af5b 	bne.w	8005dd2 <HAL_SPI_TransmitReceive+0x292>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f47f af54 	bne.w	8005dd2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f990 	bl	8006254 <SPI_EndRxTxTransaction>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d006      	beq.n	8005f48 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2220      	movs	r2, #32
 8005f44:	661a      	str	r2, [r3, #96]	; 0x60
 8005f46:	e000      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005f48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3728      	adds	r7, #40	; 0x28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f78:	f7fb fcd8 	bl	800192c <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	1a9b      	subs	r3, r3, r2
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	4413      	add	r3, r2
 8005f86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f88:	f7fb fcd0 	bl	800192c <HAL_GetTick>
 8005f8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f8e:	4b39      	ldr	r3, [pc, #228]	; (8006074 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	015b      	lsls	r3, r3, #5
 8005f94:	0d1b      	lsrs	r3, r3, #20
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	fb02 f303 	mul.w	r3, r2, r3
 8005f9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f9e:	e054      	b.n	800604a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa6:	d050      	beq.n	800604a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fa8:	f7fb fcc0 	bl	800192c <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d902      	bls.n	8005fbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d13d      	bne.n	800603a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fd6:	d111      	bne.n	8005ffc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe0:	d004      	beq.n	8005fec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fea:	d107      	bne.n	8005ffc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ffa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006004:	d10f      	bne.n	8006026 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006024:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e017      	b.n	800606a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	3b01      	subs	r3, #1
 8006048:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4013      	ands	r3, r2
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	429a      	cmp	r2, r3
 8006058:	bf0c      	ite	eq
 800605a:	2301      	moveq	r3, #1
 800605c:	2300      	movne	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	461a      	mov	r2, r3
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	429a      	cmp	r2, r3
 8006066:	d19b      	bne.n	8005fa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3720      	adds	r7, #32
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000004 	.word	0x20000004

08006078 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	; 0x28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800608a:	f7fb fc4f 	bl	800192c <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	4413      	add	r3, r2
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800609a:	f7fb fc47 	bl	800192c <HAL_GetTick>
 800609e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	330c      	adds	r3, #12
 80060a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80060a8:	4b3d      	ldr	r3, [pc, #244]	; (80061a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	00da      	lsls	r2, r3, #3
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	0d1b      	lsrs	r3, r3, #20
 80060b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80060c0:	e060      	b.n	8006184 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80060c8:	d107      	bne.n	80060da <SPI_WaitFifoStateUntilTimeout+0x62>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d104      	bne.n	80060da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e0:	d050      	beq.n	8006184 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060e2:	f7fb fc23 	bl	800192c <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d902      	bls.n	80060f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d13d      	bne.n	8006174 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006106:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006110:	d111      	bne.n	8006136 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611a:	d004      	beq.n	8006126 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006124:	d107      	bne.n	8006136 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006134:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800613e:	d10f      	bne.n	8006160 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800615e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e010      	b.n	8006196 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	3b01      	subs	r3, #1
 8006182:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	4013      	ands	r3, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	d196      	bne.n	80060c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3728      	adds	r7, #40	; 0x28
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000004 	.word	0x20000004

080061a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061b8:	d111      	bne.n	80061de <SPI_EndRxTransaction+0x3a>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061c2:	d004      	beq.n	80061ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061cc:	d107      	bne.n	80061de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2200      	movs	r2, #0
 80061e6:	2180      	movs	r1, #128	; 0x80
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7ff febd 	bl	8005f68 <SPI_WaitFlagStateUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f8:	f043 0220 	orr.w	r2, r3, #32
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e023      	b.n	800624c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800620c:	d11d      	bne.n	800624a <SPI_EndRxTransaction+0xa6>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006216:	d004      	beq.n	8006222 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006220:	d113      	bne.n	800624a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2200      	movs	r2, #0
 800622a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f7ff ff22 	bl	8006078 <SPI_WaitFifoStateUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d007      	beq.n	800624a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623e:	f043 0220 	orr.w	r2, r3, #32
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e000      	b.n	800624c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2200      	movs	r2, #0
 8006268:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f7ff ff03 	bl	8006078 <SPI_WaitFifoStateUntilTimeout>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d007      	beq.n	8006288 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800627c:	f043 0220 	orr.w	r2, r3, #32
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e027      	b.n	80062d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2200      	movs	r2, #0
 8006290:	2180      	movs	r1, #128	; 0x80
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f7ff fe68 	bl	8005f68 <SPI_WaitFlagStateUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a2:	f043 0220 	orr.w	r2, r3, #32
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e014      	b.n	80062d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f7ff fedc 	bl	8006078 <SPI_WaitFifoStateUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ca:	f043 0220 	orr.w	r2, r3, #32
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e000      	b.n	80062d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e097      	b.n	8006424 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d106      	bne.n	800630e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7fb fa39 	bl	8001780 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2202      	movs	r2, #2
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006324:	f023 0307 	bic.w	r3, r3, #7
 8006328:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3304      	adds	r3, #4
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f000 f907 	bl	8006548 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006362:	f023 0303 	bic.w	r3, r3, #3
 8006366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	021b      	lsls	r3, r3, #8
 8006372:	4313      	orrs	r3, r2
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006380:	f023 030c 	bic.w	r3, r3, #12
 8006384:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800638c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	4313      	orrs	r3, r2
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	011a      	lsls	r2, r3, #4
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	031b      	lsls	r3, r3, #12
 80063b0:	4313      	orrs	r3, r2
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80063be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80063c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	4313      	orrs	r3, r2
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800643c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006444:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800644c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006454:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d110      	bne.n	800647e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d102      	bne.n	8006468 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006462:	7b7b      	ldrb	r3, [r7, #13]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d001      	beq.n	800646c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e069      	b.n	8006540 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800647c:	e031      	b.n	80064e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b04      	cmp	r3, #4
 8006482:	d110      	bne.n	80064a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d102      	bne.n	8006490 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800648a:	7b3b      	ldrb	r3, [r7, #12]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d001      	beq.n	8006494 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e055      	b.n	8006540 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064a4:	e01d      	b.n	80064e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d108      	bne.n	80064be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d105      	bne.n	80064be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064b2:	7b7b      	ldrb	r3, [r7, #13]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d102      	bne.n	80064be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064b8:	7b3b      	ldrb	r3, [r7, #12]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d001      	beq.n	80064c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e03e      	b.n	8006540 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2202      	movs	r2, #2
 80064c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2202      	movs	r2, #2
 80064ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2202      	movs	r2, #2
 80064d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <HAL_TIM_Encoder_Start+0xc4>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d008      	beq.n	8006500 <HAL_TIM_Encoder_Start+0xd4>
 80064ee:	e00f      	b.n	8006510 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2201      	movs	r2, #1
 80064f6:	2100      	movs	r1, #0
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 f889 	bl	8006610 <TIM_CCxChannelCmd>
      break;
 80064fe:	e016      	b.n	800652e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2201      	movs	r2, #1
 8006506:	2104      	movs	r1, #4
 8006508:	4618      	mov	r0, r3
 800650a:	f000 f881 	bl	8006610 <TIM_CCxChannelCmd>
      break;
 800650e:	e00e      	b.n	800652e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2201      	movs	r2, #1
 8006516:	2100      	movs	r1, #0
 8006518:	4618      	mov	r0, r3
 800651a:	f000 f879 	bl	8006610 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2201      	movs	r2, #1
 8006524:	2104      	movs	r1, #4
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f872 	bl	8006610 <TIM_CCxChannelCmd>
      break;
 800652c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a2a      	ldr	r2, [pc, #168]	; (8006604 <TIM_Base_SetConfig+0xbc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d003      	beq.n	8006568 <TIM_Base_SetConfig+0x20>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006566:	d108      	bne.n	800657a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a21      	ldr	r2, [pc, #132]	; (8006604 <TIM_Base_SetConfig+0xbc>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00b      	beq.n	800659a <TIM_Base_SetConfig+0x52>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006588:	d007      	beq.n	800659a <TIM_Base_SetConfig+0x52>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <TIM_Base_SetConfig+0xc0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d003      	beq.n	800659a <TIM_Base_SetConfig+0x52>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a1d      	ldr	r2, [pc, #116]	; (800660c <TIM_Base_SetConfig+0xc4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d108      	bne.n	80065ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a0c      	ldr	r2, [pc, #48]	; (8006604 <TIM_Base_SetConfig+0xbc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d007      	beq.n	80065e8 <TIM_Base_SetConfig+0xa0>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a0b      	ldr	r2, [pc, #44]	; (8006608 <TIM_Base_SetConfig+0xc0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_Base_SetConfig+0xa0>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a0a      	ldr	r2, [pc, #40]	; (800660c <TIM_Base_SetConfig+0xc4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d103      	bne.n	80065f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	615a      	str	r2, [r3, #20]
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40012c00 	.word	0x40012c00
 8006608:	40014400 	.word	0x40014400
 800660c:	40014800 	.word	0x40014800

08006610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f003 031f 	and.w	r3, r3, #31
 8006622:	2201      	movs	r2, #1
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a1a      	ldr	r2, [r3, #32]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	43db      	mvns	r3, r3
 8006632:	401a      	ands	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a1a      	ldr	r2, [r3, #32]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f003 031f 	and.w	r3, r3, #31
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	fa01 f303 	lsl.w	r3, r1, r3
 8006648:	431a      	orrs	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006670:	2302      	movs	r3, #2
 8006672:	e04a      	b.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a1f      	ldr	r2, [pc, #124]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d108      	bne.n	80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a12      	ldr	r2, [pc, #72]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d004      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066dc:	d10c      	bne.n	80066f8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40012c00 	.word	0x40012c00

0800671c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800672c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006730:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	b29a      	uxth	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800674a:	b480      	push	{r7}
 800674c:	b085      	sub	sp, #20
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006752:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006756:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800675e:	b29a      	uxth	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	b29b      	uxth	r3, r3
 8006764:	43db      	mvns	r3, r3
 8006766:	b29b      	uxth	r3, r3
 8006768:	4013      	ands	r3, r2
 800676a:	b29a      	uxth	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006780:	b084      	sub	sp, #16
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	f107 0014 	add.w	r0, r7, #20
 800678e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	b004      	add	sp, #16
 80067c0:	4770      	bx	lr
	...

080067c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b09d      	sub	sp, #116	; 0x74
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80067e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	78db      	ldrb	r3, [r3, #3]
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d81f      	bhi.n	8006836 <USB_ActivateEndpoint+0x72>
 80067f6:	a201      	add	r2, pc, #4	; (adr r2, 80067fc <USB_ActivateEndpoint+0x38>)
 80067f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fc:	0800680d 	.word	0x0800680d
 8006800:	08006829 	.word	0x08006829
 8006804:	0800683f 	.word	0x0800683f
 8006808:	0800681b 	.word	0x0800681b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800680c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006814:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006818:	e012      	b.n	8006840 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800681a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800681e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006822:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006826:	e00b      	b.n	8006840 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006828:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800682c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006830:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006834:	e004      	b.n	8006840 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800683c:	e000      	b.n	8006840 <USB_ActivateEndpoint+0x7c>
      break;
 800683e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	441a      	add	r2, r3
 800684a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800684e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685e:	b29b      	uxth	r3, r3
 8006860:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	b21b      	sxth	r3, r3
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687a:	b21a      	sxth	r2, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	b21b      	sxth	r3, r3
 8006882:	4313      	orrs	r3, r2
 8006884:	b21b      	sxth	r3, r3
 8006886:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	441a      	add	r2, r3
 8006894:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	7b1b      	ldrb	r3, [r3, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f040 8149 	bne.w	8006b48 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 8084 	beq.w	80069c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	4413      	add	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	00da      	lsls	r2, r3, #3
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	88db      	ldrh	r3, [r3, #6]
 80068e8:	085b      	lsrs	r3, r3, #1
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	827b      	strh	r3, [r7, #18]
 8006902:	8a7b      	ldrh	r3, [r7, #18]
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d01b      	beq.n	8006944 <USB_ActivateEndpoint+0x180>
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	b29b      	uxth	r3, r3
 800691a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006922:	823b      	strh	r3, [r7, #16]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	441a      	add	r2, r3
 800692e:	8a3b      	ldrh	r3, [r7, #16]
 8006930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006940:	b29b      	uxth	r3, r3
 8006942:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	78db      	ldrb	r3, [r3, #3]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d020      	beq.n	800698e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006962:	81bb      	strh	r3, [r7, #12]
 8006964:	89bb      	ldrh	r3, [r7, #12]
 8006966:	f083 0320 	eor.w	r3, r3, #32
 800696a:	81bb      	strh	r3, [r7, #12]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	441a      	add	r2, r3
 8006976:	89bb      	ldrh	r3, [r7, #12]
 8006978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006988:	b29b      	uxth	r3, r3
 800698a:	8013      	strh	r3, [r2, #0]
 800698c:	e2a6      	b.n	8006edc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a4:	81fb      	strh	r3, [r7, #14]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	441a      	add	r2, r3
 80069b0:	89fb      	ldrh	r3, [r7, #14]
 80069b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	8013      	strh	r3, [r2, #0]
 80069c6:	e289      	b.n	8006edc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	633b      	str	r3, [r7, #48]	; 0x30
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	4413      	add	r3, r2
 80069da:	633b      	str	r3, [r7, #48]	; 0x30
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	00da      	lsls	r2, r3, #3
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	4413      	add	r3, r2
 80069e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	88db      	ldrh	r3, [r3, #6]
 80069f0:	085b      	lsrs	r3, r3, #1
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	4413      	add	r3, r2
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	00da      	lsls	r2, r3, #3
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	4413      	add	r3, r2
 8006a1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b3e      	cmp	r3, #62	; 0x3e
 8006a26:	d918      	bls.n	8006a5a <USB_ActivateEndpoint+0x296>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	f003 031f 	and.w	r3, r3, #31
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <USB_ActivateEndpoint+0x27e>
 8006a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	029b      	lsls	r3, r3, #10
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	801a      	strh	r2, [r3, #0]
 8006a58:	e029      	b.n	8006aae <USB_ActivateEndpoint+0x2ea>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d112      	bne.n	8006a88 <USB_ActivateEndpoint+0x2c4>
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	801a      	strh	r2, [r3, #0]
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	801a      	strh	r2, [r3, #0]
 8006a86:	e012      	b.n	8006aae <USB_ActivateEndpoint+0x2ea>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	085b      	lsrs	r3, r3, #1
 8006a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <USB_ActivateEndpoint+0x2de>
 8006a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	029b      	lsls	r3, r3, #10
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	847b      	strh	r3, [r7, #34]	; 0x22
 8006abc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d01b      	beq.n	8006afe <USB_ActivateEndpoint+0x33a>
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006adc:	843b      	strh	r3, [r7, #32]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	441a      	add	r2, r3
 8006ae8:	8c3b      	ldrh	r3, [r7, #32]
 8006aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b14:	83fb      	strh	r3, [r7, #30]
 8006b16:	8bfb      	ldrh	r3, [r7, #30]
 8006b18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b1c:	83fb      	strh	r3, [r7, #30]
 8006b1e:	8bfb      	ldrh	r3, [r7, #30]
 8006b20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b24:	83fb      	strh	r3, [r7, #30]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	441a      	add	r2, r3
 8006b30:	8bfb      	ldrh	r3, [r7, #30]
 8006b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	8013      	strh	r3, [r2, #0]
 8006b46:	e1c9      	b.n	8006edc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	78db      	ldrb	r3, [r3, #3]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d11e      	bne.n	8006b8e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b66:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	441a      	add	r2, r3
 8006b74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	8013      	strh	r3, [r2, #0]
 8006b8c:	e01d      	b.n	8006bca <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	441a      	add	r2, r3
 8006bb2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bda:	4413      	add	r3, r2
 8006bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	00da      	lsls	r2, r3, #3
 8006be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bec:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	891b      	ldrh	r3, [r3, #8]
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bfc:	801a      	strh	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	657b      	str	r3, [r7, #84]	; 0x54
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c0e:	4413      	add	r3, r2
 8006c10:	657b      	str	r3, [r7, #84]	; 0x54
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	00da      	lsls	r2, r3, #3
 8006c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c20:	653b      	str	r3, [r7, #80]	; 0x50
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	895b      	ldrh	r3, [r3, #10]
 8006c26:	085b      	lsrs	r3, r3, #1
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c30:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	785b      	ldrb	r3, [r3, #1]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f040 8093 	bne.w	8006d62 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006c4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01b      	beq.n	8006c90 <USB_ActivateEndpoint+0x4cc>
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	441a      	add	r2, r3
 8006c7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006c9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01b      	beq.n	8006ce0 <USB_ActivateEndpoint+0x51c>
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbe:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	441a      	add	r2, r3
 8006cca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf6:	873b      	strh	r3, [r7, #56]	; 0x38
 8006cf8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006cfa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cfe:	873b      	strh	r3, [r7, #56]	; 0x38
 8006d00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d06:	873b      	strh	r3, [r7, #56]	; 0x38
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	441a      	add	r2, r3
 8006d12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d3e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	441a      	add	r2, r3
 8006d4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8013      	strh	r3, [r2, #0]
 8006d60:	e0bc      	b.n	8006edc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006d72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d01d      	beq.n	8006dba <USB_ActivateEndpoint+0x5f6>
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	441a      	add	r2, r3
 8006da2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006dca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01d      	beq.n	8006e12 <USB_ActivateEndpoint+0x64e>
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	78db      	ldrb	r3, [r3, #3]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d024      	beq.n	8006e64 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006e34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e38:	f083 0320 	eor.w	r3, r3, #32
 8006e3c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	441a      	add	r2, r3
 8006e4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	8013      	strh	r3, [r2, #0]
 8006e62:	e01d      	b.n	8006ea0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	441a      	add	r2, r3
 8006e88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	441a      	add	r2, r3
 8006ec4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006edc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3774      	adds	r7, #116	; 0x74
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b08d      	sub	sp, #52	; 0x34
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	7b1b      	ldrb	r3, [r3, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 808e 	bne.w	800701c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d044      	beq.n	8006f92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	81bb      	strh	r3, [r7, #12]
 8006f16:	89bb      	ldrh	r3, [r7, #12]
 8006f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01b      	beq.n	8006f58 <USB_DeactivateEndpoint+0x6c>
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f36:	817b      	strh	r3, [r7, #10]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	441a      	add	r2, r3
 8006f42:	897b      	ldrh	r3, [r7, #10]
 8006f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f6e:	813b      	strh	r3, [r7, #8]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	893b      	ldrh	r3, [r7, #8]
 8006f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8013      	strh	r3, [r2, #0]
 8006f90:	e192      	b.n	80072b8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	827b      	strh	r3, [r7, #18]
 8006fa0:	8a7b      	ldrh	r3, [r7, #18]
 8006fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01b      	beq.n	8006fe2 <USB_DeactivateEndpoint+0xf6>
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc0:	823b      	strh	r3, [r7, #16]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	441a      	add	r2, r3
 8006fcc:	8a3b      	ldrh	r3, [r7, #16]
 8006fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff8:	81fb      	strh	r3, [r7, #14]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	441a      	add	r2, r3
 8007004:	89fb      	ldrh	r3, [r7, #14]
 8007006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800700e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007016:	b29b      	uxth	r3, r3
 8007018:	8013      	strh	r3, [r2, #0]
 800701a:	e14d      	b.n	80072b8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	785b      	ldrb	r3, [r3, #1]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f040 80a5 	bne.w	8007170 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	843b      	strh	r3, [r7, #32]
 8007034:	8c3b      	ldrh	r3, [r7, #32]
 8007036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d01b      	beq.n	8007076 <USB_DeactivateEndpoint+0x18a>
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007054:	83fb      	strh	r3, [r7, #30]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	441a      	add	r2, r3
 8007060:	8bfb      	ldrh	r3, [r7, #30]
 8007062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800706e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007072:	b29b      	uxth	r3, r3
 8007074:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	83bb      	strh	r3, [r7, #28]
 8007084:	8bbb      	ldrh	r3, [r7, #28]
 8007086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01b      	beq.n	80070c6 <USB_DeactivateEndpoint+0x1da>
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	b29b      	uxth	r3, r3
 800709c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a4:	837b      	strh	r3, [r7, #26]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	441a      	add	r2, r3
 80070b0:	8b7b      	ldrh	r3, [r7, #26]
 80070b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070dc:	833b      	strh	r3, [r7, #24]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	441a      	add	r2, r3
 80070e8:	8b3b      	ldrh	r3, [r7, #24]
 80070ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007114:	82fb      	strh	r3, [r7, #22]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	441a      	add	r2, r3
 8007120:	8afb      	ldrh	r3, [r7, #22]
 8007122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800712a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800712e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007132:	b29b      	uxth	r3, r3
 8007134:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	b29b      	uxth	r3, r3
 8007144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800714c:	82bb      	strh	r3, [r7, #20]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	441a      	add	r2, r3
 8007158:	8abb      	ldrh	r3, [r7, #20]
 800715a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716a:	b29b      	uxth	r3, r3
 800716c:	8013      	strh	r3, [r2, #0]
 800716e:	e0a3      	b.n	80072b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800717e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d01b      	beq.n	80071c0 <USB_DeactivateEndpoint+0x2d4>
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29b      	uxth	r3, r3
 8007196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	441a      	add	r2, r3
 80071aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80071ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071bc:	b29b      	uxth	r3, r3
 80071be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80071ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80071d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01b      	beq.n	8007210 <USB_DeactivateEndpoint+0x324>
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	441a      	add	r2, r3
 80071fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80071fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800720c:	b29b      	uxth	r3, r3
 800720e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007226:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	441a      	add	r2, r3
 8007232:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800723c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007244:	b29b      	uxth	r3, r3
 8007246:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800725e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	441a      	add	r2, r3
 800726a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800726c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727c:	b29b      	uxth	r3, r3
 800727e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	b29b      	uxth	r3, r3
 800728e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007296:	847b      	strh	r3, [r7, #34]	; 0x22
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	441a      	add	r2, r3
 80072a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3734      	adds	r7, #52	; 0x34
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b0c2      	sub	sp, #264	; 0x108
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	1d3b      	adds	r3, r7, #4
 80072ce:	6018      	str	r0, [r3, #0]
 80072d0:	463b      	mov	r3, r7
 80072d2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072d4:	463b      	mov	r3, r7
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	f040 8509 	bne.w	8007cf2 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80072e0:	463b      	mov	r3, r7
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699a      	ldr	r2, [r3, #24]
 80072e6:	463b      	mov	r3, r7
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d905      	bls.n	80072fc <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80072f0:	463b      	mov	r3, r7
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072fa:	e004      	b.n	8007306 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80072fc:	463b      	mov	r3, r7
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007306:	463b      	mov	r3, r7
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	7b1b      	ldrb	r3, [r3, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d128      	bne.n	8007362 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007310:	463b      	mov	r3, r7
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6959      	ldr	r1, [r3, #20]
 8007316:	463b      	mov	r3, r7
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	88da      	ldrh	r2, [r3, #6]
 800731c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007320:	b29b      	uxth	r3, r3
 8007322:	1d38      	adds	r0, r7, #4
 8007324:	6800      	ldr	r0, [r0, #0]
 8007326:	f001 f9da 	bl	80086de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800732a:	1d3b      	adds	r3, r7, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	1d3b      	adds	r3, r7, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007338:	b29b      	uxth	r3, r3
 800733a:	461a      	mov	r2, r3
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	4413      	add	r3, r2
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	463b      	mov	r3, r7
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	00da      	lsls	r2, r3, #3
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	4413      	add	r3, r2
 800734e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	f000 bc9f 	b.w	8007ca0 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007362:	463b      	mov	r3, r7
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	78db      	ldrb	r3, [r3, #3]
 8007368:	2b02      	cmp	r3, #2
 800736a:	f040 8347 	bne.w	80079fc <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800736e:	463b      	mov	r3, r7
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6a1a      	ldr	r2, [r3, #32]
 8007374:	463b      	mov	r3, r7
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	429a      	cmp	r2, r3
 800737c:	f240 82eb 	bls.w	8007956 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007380:	1d3b      	adds	r3, r7, #4
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	463b      	mov	r3, r7
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	b29b      	uxth	r3, r3
 8007392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800739e:	1d3b      	adds	r3, r7, #4
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	463b      	mov	r3, r7
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	441a      	add	r2, r3
 80073ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80073bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80073c4:	463b      	mov	r3, r7
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6a1a      	ldr	r2, [r3, #32]
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ce:	1ad2      	subs	r2, r2, r3
 80073d0:	463b      	mov	r3, r7
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80073d6:	1d3b      	adds	r3, r7, #4
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	463b      	mov	r3, r7
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 8159 	beq.w	80076a4 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073f2:	1d3b      	adds	r3, r7, #4
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	633b      	str	r3, [r7, #48]	; 0x30
 80073f8:	463b      	mov	r3, r7
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	785b      	ldrb	r3, [r3, #1]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d164      	bne.n	80074cc <USB_EPStartXfer+0x206>
 8007402:	1d3b      	adds	r3, r7, #4
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28
 8007408:	1d3b      	adds	r3, r7, #4
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007410:	b29b      	uxth	r3, r3
 8007412:	461a      	mov	r2, r3
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	4413      	add	r3, r2
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28
 800741a:	463b      	mov	r3, r7
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	00da      	lsls	r2, r3, #3
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	4413      	add	r3, r2
 8007426:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007430:	2b3e      	cmp	r3, #62	; 0x3e
 8007432:	d91c      	bls.n	800746e <USB_EPStartXfer+0x1a8>
 8007434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007442:	f003 031f 	and.w	r3, r3, #31
 8007446:	2b00      	cmp	r3, #0
 8007448:	d104      	bne.n	8007454 <USB_EPStartXfer+0x18e>
 800744a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800744e:	3b01      	subs	r3, #1
 8007450:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007454:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007458:	b29b      	uxth	r3, r3
 800745a:	029b      	lsls	r3, r3, #10
 800745c:	b29b      	uxth	r3, r3
 800745e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007466:	b29a      	uxth	r2, r3
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	801a      	strh	r2, [r3, #0]
 800746c:	e04a      	b.n	8007504 <USB_EPStartXfer+0x23e>
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007472:	2b00      	cmp	r3, #0
 8007474:	d112      	bne.n	800749c <USB_EPStartXfer+0x1d6>
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007480:	b29a      	uxth	r2, r3
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	801a      	strh	r2, [r3, #0]
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29b      	uxth	r3, r3
 800748c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007494:	b29a      	uxth	r2, r3
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	801a      	strh	r2, [r3, #0]
 800749a:	e033      	b.n	8007504 <USB_EPStartXfer+0x23e>
 800749c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a0:	085b      	lsrs	r3, r3, #1
 80074a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80074a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d004      	beq.n	80074bc <USB_EPStartXfer+0x1f6>
 80074b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80074b6:	3301      	adds	r3, #1
 80074b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80074bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	029b      	lsls	r3, r3, #10
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	801a      	strh	r2, [r3, #0]
 80074ca:	e01b      	b.n	8007504 <USB_EPStartXfer+0x23e>
 80074cc:	463b      	mov	r3, r7
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	785b      	ldrb	r3, [r3, #1]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d116      	bne.n	8007504 <USB_EPStartXfer+0x23e>
 80074d6:	1d3b      	adds	r3, r7, #4
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074de:	b29b      	uxth	r3, r3
 80074e0:	461a      	mov	r2, r3
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	4413      	add	r3, r2
 80074e6:	633b      	str	r3, [r7, #48]	; 0x30
 80074e8:	463b      	mov	r3, r7
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	00da      	lsls	r2, r3, #3
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	4413      	add	r3, r2
 80074f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074fe:	b29a      	uxth	r2, r3
 8007500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007502:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007504:	463b      	mov	r3, r7
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	895b      	ldrh	r3, [r3, #10]
 800750a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800750e:	463b      	mov	r3, r7
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6959      	ldr	r1, [r3, #20]
 8007514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007518:	b29b      	uxth	r3, r3
 800751a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800751e:	1d38      	adds	r0, r7, #4
 8007520:	6800      	ldr	r0, [r0, #0]
 8007522:	f001 f8dc 	bl	80086de <USB_WritePMA>
            ep->xfer_buff += len;
 8007526:	463b      	mov	r3, r7
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695a      	ldr	r2, [r3, #20]
 800752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007530:	441a      	add	r2, r3
 8007532:	463b      	mov	r3, r7
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007538:	463b      	mov	r3, r7
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6a1a      	ldr	r2, [r3, #32]
 800753e:	463b      	mov	r3, r7
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	429a      	cmp	r2, r3
 8007546:	d909      	bls.n	800755c <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8007548:	463b      	mov	r3, r7
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6a1a      	ldr	r2, [r3, #32]
 800754e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007552:	1ad2      	subs	r2, r2, r3
 8007554:	463b      	mov	r3, r7
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	621a      	str	r2, [r3, #32]
 800755a:	e008      	b.n	800756e <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800755c:	463b      	mov	r3, r7
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007566:	463b      	mov	r3, r7
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2200      	movs	r2, #0
 800756c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800756e:	463b      	mov	r3, r7
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	785b      	ldrb	r3, [r3, #1]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d164      	bne.n	8007642 <USB_EPStartXfer+0x37c>
 8007578:	1d3b      	adds	r3, r7, #4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	61bb      	str	r3, [r7, #24]
 800757e:	1d3b      	adds	r3, r7, #4
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007586:	b29b      	uxth	r3, r3
 8007588:	461a      	mov	r2, r3
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	4413      	add	r3, r2
 800758e:	61bb      	str	r3, [r7, #24]
 8007590:	463b      	mov	r3, r7
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	00da      	lsls	r2, r3, #3
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	4413      	add	r3, r2
 800759c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a6:	2b3e      	cmp	r3, #62	; 0x3e
 80075a8:	d91c      	bls.n	80075e4 <USB_EPStartXfer+0x31e>
 80075aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ae:	095b      	lsrs	r3, r3, #5
 80075b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b8:	f003 031f 	and.w	r3, r3, #31
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d104      	bne.n	80075ca <USB_EPStartXfer+0x304>
 80075c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075c4:	3b01      	subs	r3, #1
 80075c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	029b      	lsls	r3, r3, #10
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075dc:	b29a      	uxth	r2, r3
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	e04d      	b.n	8007680 <USB_EPStartXfer+0x3ba>
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d112      	bne.n	8007612 <USB_EPStartXfer+0x34c>
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800760a:	b29a      	uxth	r2, r3
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	801a      	strh	r2, [r3, #0]
 8007610:	e036      	b.n	8007680 <USB_EPStartXfer+0x3ba>
 8007612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800761c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <USB_EPStartXfer+0x36c>
 8007628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800762c:	3301      	adds	r3, #1
 800762e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007636:	b29b      	uxth	r3, r3
 8007638:	029b      	lsls	r3, r3, #10
 800763a:	b29a      	uxth	r2, r3
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	801a      	strh	r2, [r3, #0]
 8007640:	e01e      	b.n	8007680 <USB_EPStartXfer+0x3ba>
 8007642:	463b      	mov	r3, r7
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d119      	bne.n	8007680 <USB_EPStartXfer+0x3ba>
 800764c:	1d3b      	adds	r3, r7, #4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	623b      	str	r3, [r7, #32]
 8007652:	1d3b      	adds	r3, r7, #4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765a:	b29b      	uxth	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	4413      	add	r3, r2
 8007662:	623b      	str	r3, [r7, #32]
 8007664:	463b      	mov	r3, r7
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	00da      	lsls	r2, r3, #3
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	4413      	add	r3, r2
 8007670:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007674:	61fb      	str	r3, [r7, #28]
 8007676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767a:	b29a      	uxth	r2, r3
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007680:	463b      	mov	r3, r7
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	891b      	ldrh	r3, [r3, #8]
 8007686:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800768a:	463b      	mov	r3, r7
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6959      	ldr	r1, [r3, #20]
 8007690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007694:	b29b      	uxth	r3, r3
 8007696:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800769a:	1d38      	adds	r0, r7, #4
 800769c:	6800      	ldr	r0, [r0, #0]
 800769e:	f001 f81e 	bl	80086de <USB_WritePMA>
 80076a2:	e2fd      	b.n	8007ca0 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076a4:	463b      	mov	r3, r7
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	785b      	ldrb	r3, [r3, #1]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d164      	bne.n	8007778 <USB_EPStartXfer+0x4b2>
 80076ae:	1d3b      	adds	r3, r7, #4
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80076b4:	1d3b      	adds	r3, r7, #4
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076bc:	b29b      	uxth	r3, r3
 80076be:	461a      	mov	r2, r3
 80076c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c2:	4413      	add	r3, r2
 80076c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80076c6:	463b      	mov	r3, r7
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	00da      	lsls	r2, r3, #3
 80076ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d0:	4413      	add	r3, r2
 80076d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076d6:	647b      	str	r3, [r7, #68]	; 0x44
 80076d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076dc:	2b3e      	cmp	r3, #62	; 0x3e
 80076de:	d91c      	bls.n	800771a <USB_EPStartXfer+0x454>
 80076e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ee:	f003 031f 	and.w	r3, r3, #31
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d104      	bne.n	8007700 <USB_EPStartXfer+0x43a>
 80076f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076fa:	3b01      	subs	r3, #1
 80076fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007700:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007704:	b29b      	uxth	r3, r3
 8007706:	029b      	lsls	r3, r3, #10
 8007708:	b29b      	uxth	r3, r3
 800770a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800770e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007712:	b29a      	uxth	r2, r3
 8007714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007716:	801a      	strh	r2, [r3, #0]
 8007718:	e04d      	b.n	80077b6 <USB_EPStartXfer+0x4f0>
 800771a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800771e:	2b00      	cmp	r3, #0
 8007720:	d112      	bne.n	8007748 <USB_EPStartXfer+0x482>
 8007722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	b29b      	uxth	r3, r3
 8007728:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800772c:	b29a      	uxth	r2, r3
 800772e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007730:	801a      	strh	r2, [r3, #0]
 8007732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	b29b      	uxth	r3, r3
 8007738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800773c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007740:	b29a      	uxth	r2, r3
 8007742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007744:	801a      	strh	r2, [r3, #0]
 8007746:	e036      	b.n	80077b6 <USB_EPStartXfer+0x4f0>
 8007748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800774c:	085b      	lsrs	r3, r3, #1
 800774e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d004      	beq.n	8007768 <USB_EPStartXfer+0x4a2>
 800775e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007762:	3301      	adds	r3, #1
 8007764:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007768:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800776c:	b29b      	uxth	r3, r3
 800776e:	029b      	lsls	r3, r3, #10
 8007770:	b29a      	uxth	r2, r3
 8007772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007774:	801a      	strh	r2, [r3, #0]
 8007776:	e01e      	b.n	80077b6 <USB_EPStartXfer+0x4f0>
 8007778:	463b      	mov	r3, r7
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	785b      	ldrb	r3, [r3, #1]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d119      	bne.n	80077b6 <USB_EPStartXfer+0x4f0>
 8007782:	1d3b      	adds	r3, r7, #4
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	653b      	str	r3, [r7, #80]	; 0x50
 8007788:	1d3b      	adds	r3, r7, #4
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007790:	b29b      	uxth	r3, r3
 8007792:	461a      	mov	r2, r3
 8007794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007796:	4413      	add	r3, r2
 8007798:	653b      	str	r3, [r7, #80]	; 0x50
 800779a:	463b      	mov	r3, r7
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	00da      	lsls	r2, r3, #3
 80077a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a4:	4413      	add	r3, r2
 80077a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80077b6:	463b      	mov	r3, r7
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	891b      	ldrh	r3, [r3, #8]
 80077bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077c0:	463b      	mov	r3, r7
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6959      	ldr	r1, [r3, #20]
 80077c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077d0:	1d38      	adds	r0, r7, #4
 80077d2:	6800      	ldr	r0, [r0, #0]
 80077d4:	f000 ff83 	bl	80086de <USB_WritePMA>
            ep->xfer_buff += len;
 80077d8:	463b      	mov	r3, r7
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	695a      	ldr	r2, [r3, #20]
 80077de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e2:	441a      	add	r2, r3
 80077e4:	463b      	mov	r3, r7
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077ea:	463b      	mov	r3, r7
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6a1a      	ldr	r2, [r3, #32]
 80077f0:	463b      	mov	r3, r7
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d909      	bls.n	800780e <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 80077fa:	463b      	mov	r3, r7
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6a1a      	ldr	r2, [r3, #32]
 8007800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007804:	1ad2      	subs	r2, r2, r3
 8007806:	463b      	mov	r3, r7
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	621a      	str	r2, [r3, #32]
 800780c:	e008      	b.n	8007820 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800780e:	463b      	mov	r3, r7
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007818:	463b      	mov	r3, r7
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2200      	movs	r2, #0
 800781e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007820:	1d3b      	adds	r3, r7, #4
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	643b      	str	r3, [r7, #64]	; 0x40
 8007826:	463b      	mov	r3, r7
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	785b      	ldrb	r3, [r3, #1]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d164      	bne.n	80078fa <USB_EPStartXfer+0x634>
 8007830:	1d3b      	adds	r3, r7, #4
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	63bb      	str	r3, [r7, #56]	; 0x38
 8007836:	1d3b      	adds	r3, r7, #4
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800783e:	b29b      	uxth	r3, r3
 8007840:	461a      	mov	r2, r3
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	4413      	add	r3, r2
 8007846:	63bb      	str	r3, [r7, #56]	; 0x38
 8007848:	463b      	mov	r3, r7
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	00da      	lsls	r2, r3, #3
 8007850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007852:	4413      	add	r3, r2
 8007854:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007858:	637b      	str	r3, [r7, #52]	; 0x34
 800785a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785e:	2b3e      	cmp	r3, #62	; 0x3e
 8007860:	d91c      	bls.n	800789c <USB_EPStartXfer+0x5d6>
 8007862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800786c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <USB_EPStartXfer+0x5bc>
 8007878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800787c:	3b01      	subs	r3, #1
 800787e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007886:	b29b      	uxth	r3, r3
 8007888:	029b      	lsls	r3, r3, #10
 800788a:	b29b      	uxth	r3, r3
 800788c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007894:	b29a      	uxth	r2, r3
 8007896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007898:	801a      	strh	r2, [r3, #0]
 800789a:	e04a      	b.n	8007932 <USB_EPStartXfer+0x66c>
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d112      	bne.n	80078ca <USB_EPStartXfer+0x604>
 80078a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b2:	801a      	strh	r2, [r3, #0]
 80078b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c6:	801a      	strh	r2, [r3, #0]
 80078c8:	e033      	b.n	8007932 <USB_EPStartXfer+0x66c>
 80078ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ce:	085b      	lsrs	r3, r3, #1
 80078d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d004      	beq.n	80078ea <USB_EPStartXfer+0x624>
 80078e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e4:	3301      	adds	r3, #1
 80078e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	029b      	lsls	r3, r3, #10
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f6:	801a      	strh	r2, [r3, #0]
 80078f8:	e01b      	b.n	8007932 <USB_EPStartXfer+0x66c>
 80078fa:	463b      	mov	r3, r7
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	785b      	ldrb	r3, [r3, #1]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d116      	bne.n	8007932 <USB_EPStartXfer+0x66c>
 8007904:	1d3b      	adds	r3, r7, #4
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800790c:	b29b      	uxth	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007912:	4413      	add	r3, r2
 8007914:	643b      	str	r3, [r7, #64]	; 0x40
 8007916:	463b      	mov	r3, r7
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	00da      	lsls	r2, r3, #3
 800791e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007920:	4413      	add	r3, r2
 8007922:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792c:	b29a      	uxth	r2, r3
 800792e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007930:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007932:	463b      	mov	r3, r7
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	895b      	ldrh	r3, [r3, #10]
 8007938:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800793c:	463b      	mov	r3, r7
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6959      	ldr	r1, [r3, #20]
 8007942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007946:	b29b      	uxth	r3, r3
 8007948:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800794c:	1d38      	adds	r0, r7, #4
 800794e:	6800      	ldr	r0, [r0, #0]
 8007950:	f000 fec5 	bl	80086de <USB_WritePMA>
 8007954:	e1a4      	b.n	8007ca0 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007956:	463b      	mov	r3, r7
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007960:	1d3b      	adds	r3, r7, #4
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	463b      	mov	r3, r7
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	b29b      	uxth	r3, r3
 8007972:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800797e:	1d3b      	adds	r3, r7, #4
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	463b      	mov	r3, r7
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	441a      	add	r2, r3
 800798c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800799c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80079a4:	1d3b      	adds	r3, r7, #4
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079aa:	1d3b      	adds	r3, r7, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079b8:	4413      	add	r3, r2
 80079ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079bc:	463b      	mov	r3, r7
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	00da      	lsls	r2, r3, #3
 80079c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079c6:	4413      	add	r3, r2
 80079c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80079d8:	463b      	mov	r3, r7
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	891b      	ldrh	r3, [r3, #8]
 80079de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079e2:	463b      	mov	r3, r7
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6959      	ldr	r1, [r3, #20]
 80079e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80079f2:	1d38      	adds	r0, r7, #4
 80079f4:	6800      	ldr	r0, [r0, #0]
 80079f6:	f000 fe72 	bl	80086de <USB_WritePMA>
 80079fa:	e151      	b.n	8007ca0 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80079fc:	463b      	mov	r3, r7
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6a1a      	ldr	r2, [r3, #32]
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a06:	1ad2      	subs	r2, r2, r3
 8007a08:	463b      	mov	r3, r7
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a0e:	1d3b      	adds	r3, r7, #4
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	463b      	mov	r3, r7
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 809b 	beq.w	8007b60 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a2a:	1d3b      	adds	r3, r7, #4
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	673b      	str	r3, [r7, #112]	; 0x70
 8007a30:	463b      	mov	r3, r7
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d164      	bne.n	8007b04 <USB_EPStartXfer+0x83e>
 8007a3a:	1d3b      	adds	r3, r7, #4
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a40:	1d3b      	adds	r3, r7, #4
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a4e:	4413      	add	r3, r2
 8007a50:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a52:	463b      	mov	r3, r7
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	00da      	lsls	r2, r3, #3
 8007a5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a62:	667b      	str	r3, [r7, #100]	; 0x64
 8007a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a68:	2b3e      	cmp	r3, #62	; 0x3e
 8007a6a:	d91c      	bls.n	8007aa6 <USB_EPStartXfer+0x7e0>
 8007a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a70:	095b      	lsrs	r3, r3, #5
 8007a72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a7a:	f003 031f 	and.w	r3, r3, #31
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d104      	bne.n	8007a8c <USB_EPStartXfer+0x7c6>
 8007a82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a86:	3b01      	subs	r3, #1
 8007a88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	029b      	lsls	r3, r3, #10
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aa2:	801a      	strh	r2, [r3, #0]
 8007aa4:	e04a      	b.n	8007b3c <USB_EPStartXfer+0x876>
 8007aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d112      	bne.n	8007ad4 <USB_EPStartXfer+0x80e>
 8007aae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007abc:	801a      	strh	r2, [r3, #0]
 8007abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ad0:	801a      	strh	r2, [r3, #0]
 8007ad2:	e033      	b.n	8007b3c <USB_EPStartXfer+0x876>
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad8:	085b      	lsrs	r3, r3, #1
 8007ada:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d004      	beq.n	8007af4 <USB_EPStartXfer+0x82e>
 8007aea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007aee:	3301      	adds	r3, #1
 8007af0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007af4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	029b      	lsls	r3, r3, #10
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b00:	801a      	strh	r2, [r3, #0]
 8007b02:	e01b      	b.n	8007b3c <USB_EPStartXfer+0x876>
 8007b04:	463b      	mov	r3, r7
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d116      	bne.n	8007b3c <USB_EPStartXfer+0x876>
 8007b0e:	1d3b      	adds	r3, r7, #4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b1c:	4413      	add	r3, r2
 8007b1e:	673b      	str	r3, [r7, #112]	; 0x70
 8007b20:	463b      	mov	r3, r7
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	00da      	lsls	r2, r3, #3
 8007b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	895b      	ldrh	r3, [r3, #10]
 8007b42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b46:	463b      	mov	r3, r7
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6959      	ldr	r1, [r3, #20]
 8007b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b56:	1d38      	adds	r0, r7, #4
 8007b58:	6800      	ldr	r0, [r0, #0]
 8007b5a:	f000 fdc0 	bl	80086de <USB_WritePMA>
 8007b5e:	e09f      	b.n	8007ca0 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b60:	463b      	mov	r3, r7
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	785b      	ldrb	r3, [r3, #1]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d164      	bne.n	8007c34 <USB_EPStartXfer+0x96e>
 8007b6a:	1d3b      	adds	r3, r7, #4
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b70:	1d3b      	adds	r3, r7, #4
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b7e:	4413      	add	r3, r2
 8007b80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b82:	463b      	mov	r3, r7
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	00da      	lsls	r2, r3, #3
 8007b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b92:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b98:	2b3e      	cmp	r3, #62	; 0x3e
 8007b9a:	d91c      	bls.n	8007bd6 <USB_EPStartXfer+0x910>
 8007b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba0:	095b      	lsrs	r3, r3, #5
 8007ba2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007baa:	f003 031f 	and.w	r3, r3, #31
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d104      	bne.n	8007bbc <USB_EPStartXfer+0x8f6>
 8007bb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007bbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	029b      	lsls	r3, r3, #10
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bd2:	801a      	strh	r2, [r3, #0]
 8007bd4:	e053      	b.n	8007c7e <USB_EPStartXfer+0x9b8>
 8007bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d112      	bne.n	8007c04 <USB_EPStartXfer+0x93e>
 8007bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bec:	801a      	strh	r2, [r3, #0]
 8007bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	e03c      	b.n	8007c7e <USB_EPStartXfer+0x9b8>
 8007c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c08:	085b      	lsrs	r3, r3, #1
 8007c0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d004      	beq.n	8007c24 <USB_EPStartXfer+0x95e>
 8007c1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c1e:	3301      	adds	r3, #1
 8007c20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	029b      	lsls	r3, r3, #10
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c30:	801a      	strh	r2, [r3, #0]
 8007c32:	e024      	b.n	8007c7e <USB_EPStartXfer+0x9b8>
 8007c34:	463b      	mov	r3, r7
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	785b      	ldrb	r3, [r3, #1]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d11f      	bne.n	8007c7e <USB_EPStartXfer+0x9b8>
 8007c3e:	1d3b      	adds	r3, r7, #4
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c46:	1d3b      	adds	r3, r7, #4
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c56:	4413      	add	r3, r2
 8007c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	00da      	lsls	r2, r3, #3
 8007c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c68:	4413      	add	r3, r2
 8007c6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c7e:	463b      	mov	r3, r7
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	891b      	ldrh	r3, [r3, #8]
 8007c84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c88:	463b      	mov	r3, r7
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6959      	ldr	r1, [r3, #20]
 8007c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c98:	1d38      	adds	r0, r7, #4
 8007c9a:	6800      	ldr	r0, [r0, #0]
 8007c9c:	f000 fd1f 	bl	80086de <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007ca0:	1d3b      	adds	r3, r7, #4
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	463b      	mov	r3, r7
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cba:	817b      	strh	r3, [r7, #10]
 8007cbc:	897b      	ldrh	r3, [r7, #10]
 8007cbe:	f083 0310 	eor.w	r3, r3, #16
 8007cc2:	817b      	strh	r3, [r7, #10]
 8007cc4:	897b      	ldrh	r3, [r7, #10]
 8007cc6:	f083 0320 	eor.w	r3, r3, #32
 8007cca:	817b      	strh	r3, [r7, #10]
 8007ccc:	1d3b      	adds	r3, r7, #4
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	463b      	mov	r3, r7
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	441a      	add	r2, r3
 8007cda:	897b      	ldrh	r3, [r7, #10]
 8007cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	8013      	strh	r3, [r2, #0]
 8007cf0:	e3b5      	b.n	800845e <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007cf2:	463b      	mov	r3, r7
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	7b1b      	ldrb	r3, [r3, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f040 8090 	bne.w	8007e1e <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007cfe:	463b      	mov	r3, r7
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	699a      	ldr	r2, [r3, #24]
 8007d04:	463b      	mov	r3, r7
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d90e      	bls.n	8007d2c <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 8007d0e:	463b      	mov	r3, r7
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007d18:	463b      	mov	r3, r7
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d22:	1ad2      	subs	r2, r2, r3
 8007d24:	463b      	mov	r3, r7
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	619a      	str	r2, [r3, #24]
 8007d2a:	e008      	b.n	8007d3e <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8007d2c:	463b      	mov	r3, r7
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007d36:	463b      	mov	r3, r7
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007d3e:	1d3b      	adds	r3, r7, #4
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d46:	1d3b      	adds	r3, r7, #4
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	461a      	mov	r2, r3
 8007d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d56:	4413      	add	r3, r2
 8007d58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d5c:	463b      	mov	r3, r7
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	00da      	lsls	r2, r3, #3
 8007d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d68:	4413      	add	r3, r2
 8007d6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d76:	2b3e      	cmp	r3, #62	; 0x3e
 8007d78:	d91d      	bls.n	8007db6 <USB_EPStartXfer+0xaf0>
 8007d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d104      	bne.n	8007d9a <USB_EPStartXfer+0xad4>
 8007d90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d94:	3b01      	subs	r3, #1
 8007d96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	029b      	lsls	r3, r3, #10
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007db2:	801a      	strh	r2, [r3, #0]
 8007db4:	e325      	b.n	8008402 <USB_EPStartXfer+0x113c>
 8007db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d116      	bne.n	8007dec <USB_EPStartXfer+0xb26>
 8007dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dd0:	801a      	strh	r2, [r3, #0]
 8007dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	e30a      	b.n	8008402 <USB_EPStartXfer+0x113c>
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df0:	085b      	lsrs	r3, r3, #1
 8007df2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d004      	beq.n	8007e0c <USB_EPStartXfer+0xb46>
 8007e02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e06:	3301      	adds	r3, #1
 8007e08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	029b      	lsls	r3, r3, #10
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e1a:	801a      	strh	r2, [r3, #0]
 8007e1c:	e2f1      	b.n	8008402 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007e1e:	463b      	mov	r3, r7
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	78db      	ldrb	r3, [r3, #3]
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	f040 818f 	bne.w	8008148 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007e2a:	463b      	mov	r3, r7
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	785b      	ldrb	r3, [r3, #1]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d175      	bne.n	8007f20 <USB_EPStartXfer+0xc5a>
 8007e34:	1d3b      	adds	r3, r7, #4
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e3c:	1d3b      	adds	r3, r7, #4
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	461a      	mov	r2, r3
 8007e48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e52:	463b      	mov	r3, r7
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	00da      	lsls	r2, r3, #3
 8007e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e5e:	4413      	add	r3, r2
 8007e60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e68:	463b      	mov	r3, r7
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	2b3e      	cmp	r3, #62	; 0x3e
 8007e70:	d91f      	bls.n	8007eb2 <USB_EPStartXfer+0xbec>
 8007e72:	463b      	mov	r3, r7
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	095b      	lsrs	r3, r3, #5
 8007e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e7e:	463b      	mov	r3, r7
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	f003 031f 	and.w	r3, r3, #31
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d104      	bne.n	8007e96 <USB_EPStartXfer+0xbd0>
 8007e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e90:	3b01      	subs	r3, #1
 8007e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	029b      	lsls	r3, r3, #10
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007eae:	801a      	strh	r2, [r3, #0]
 8007eb0:	e05c      	b.n	8007f6c <USB_EPStartXfer+0xca6>
 8007eb2:	463b      	mov	r3, r7
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d116      	bne.n	8007eea <USB_EPStartXfer+0xc24>
 8007ebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ece:	801a      	strh	r2, [r3, #0]
 8007ed0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ee6:	801a      	strh	r2, [r3, #0]
 8007ee8:	e040      	b.n	8007f6c <USB_EPStartXfer+0xca6>
 8007eea:	463b      	mov	r3, r7
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	085b      	lsrs	r3, r3, #1
 8007ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ef6:	463b      	mov	r3, r7
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d004      	beq.n	8007f0e <USB_EPStartXfer+0xc48>
 8007f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f08:	3301      	adds	r3, #1
 8007f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	029b      	lsls	r3, r3, #10
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f1c:	801a      	strh	r2, [r3, #0]
 8007f1e:	e025      	b.n	8007f6c <USB_EPStartXfer+0xca6>
 8007f20:	463b      	mov	r3, r7
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	785b      	ldrb	r3, [r3, #1]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d120      	bne.n	8007f6c <USB_EPStartXfer+0xca6>
 8007f2a:	1d3b      	adds	r3, r7, #4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f32:	1d3b      	adds	r3, r7, #4
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f42:	4413      	add	r3, r2
 8007f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f48:	463b      	mov	r3, r7
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	00da      	lsls	r2, r3, #3
 8007f50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f54:	4413      	add	r3, r2
 8007f56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f5e:	463b      	mov	r3, r7
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f6a:	801a      	strh	r2, [r3, #0]
 8007f6c:	1d3b      	adds	r3, r7, #4
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f74:	463b      	mov	r3, r7
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	785b      	ldrb	r3, [r3, #1]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d175      	bne.n	800806a <USB_EPStartXfer+0xda4>
 8007f7e:	1d3b      	adds	r3, r7, #4
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f86:	1d3b      	adds	r3, r7, #4
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f96:	4413      	add	r3, r2
 8007f98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f9c:	463b      	mov	r3, r7
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	00da      	lsls	r2, r3, #3
 8007fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fa8:	4413      	add	r3, r2
 8007faa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fb2:	463b      	mov	r3, r7
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b3e      	cmp	r3, #62	; 0x3e
 8007fba:	d91f      	bls.n	8007ffc <USB_EPStartXfer+0xd36>
 8007fbc:	463b      	mov	r3, r7
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	095b      	lsrs	r3, r3, #5
 8007fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fc8:	463b      	mov	r3, r7
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 031f 	and.w	r3, r3, #31
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d104      	bne.n	8007fe0 <USB_EPStartXfer+0xd1a>
 8007fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	029b      	lsls	r3, r3, #10
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	e058      	b.n	80080ae <USB_EPStartXfer+0xde8>
 8007ffc:	463b      	mov	r3, r7
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d116      	bne.n	8008034 <USB_EPStartXfer+0xd6e>
 8008006:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	b29b      	uxth	r3, r3
 800800e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008012:	b29a      	uxth	r2, r3
 8008014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008018:	801a      	strh	r2, [r3, #0]
 800801a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b29b      	uxth	r3, r3
 8008022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802a:	b29a      	uxth	r2, r3
 800802c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	e03c      	b.n	80080ae <USB_EPStartXfer+0xde8>
 8008034:	463b      	mov	r3, r7
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	085b      	lsrs	r3, r3, #1
 800803c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008040:	463b      	mov	r3, r7
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <USB_EPStartXfer+0xd92>
 800804e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008052:	3301      	adds	r3, #1
 8008054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800805c:	b29b      	uxth	r3, r3
 800805e:	029b      	lsls	r3, r3, #10
 8008060:	b29a      	uxth	r2, r3
 8008062:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	e021      	b.n	80080ae <USB_EPStartXfer+0xde8>
 800806a:	463b      	mov	r3, r7
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	785b      	ldrb	r3, [r3, #1]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d11c      	bne.n	80080ae <USB_EPStartXfer+0xde8>
 8008074:	1d3b      	adds	r3, r7, #4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800807c:	b29b      	uxth	r3, r3
 800807e:	461a      	mov	r2, r3
 8008080:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008084:	4413      	add	r3, r2
 8008086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800808a:	463b      	mov	r3, r7
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	00da      	lsls	r2, r3, #3
 8008092:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008096:	4413      	add	r3, r2
 8008098:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800809c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080a0:	463b      	mov	r3, r7
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080ac:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80080ae:	463b      	mov	r3, r7
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 81a4 	beq.w	8008402 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80080ba:	1d3b      	adds	r3, r7, #4
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	463b      	mov	r3, r7
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d005      	beq.n	80080e6 <USB_EPStartXfer+0xe20>
 80080da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10d      	bne.n	8008102 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 8187 	bne.w	8008402 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f040 8180 	bne.w	8008402 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008102:	1d3b      	adds	r3, r7, #4
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	463b      	mov	r3, r7
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008120:	1d3b      	adds	r3, r7, #4
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	463b      	mov	r3, r7
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	441a      	add	r2, r3
 800812e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800813a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800813e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008142:	b29b      	uxth	r3, r3
 8008144:	8013      	strh	r3, [r2, #0]
 8008146:	e15c      	b.n	8008402 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008148:	463b      	mov	r3, r7
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	78db      	ldrb	r3, [r3, #3]
 800814e:	2b01      	cmp	r3, #1
 8008150:	f040 8155 	bne.w	80083fe <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008154:	463b      	mov	r3, r7
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	463b      	mov	r3, r7
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	429a      	cmp	r2, r3
 8008162:	d90e      	bls.n	8008182 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8008164:	463b      	mov	r3, r7
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800816e:	463b      	mov	r3, r7
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	699a      	ldr	r2, [r3, #24]
 8008174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008178:	1ad2      	subs	r2, r2, r3
 800817a:	463b      	mov	r3, r7
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	619a      	str	r2, [r3, #24]
 8008180:	e008      	b.n	8008194 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8008182:	463b      	mov	r3, r7
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800818c:	463b      	mov	r3, r7
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2200      	movs	r2, #0
 8008192:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008194:	463b      	mov	r3, r7
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	785b      	ldrb	r3, [r3, #1]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d16f      	bne.n	800827e <USB_EPStartXfer+0xfb8>
 800819e:	1d3b      	adds	r3, r7, #4
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081a6:	1d3b      	adds	r3, r7, #4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	461a      	mov	r2, r3
 80081b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081b6:	4413      	add	r3, r2
 80081b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081bc:	463b      	mov	r3, r7
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	00da      	lsls	r2, r3, #3
 80081c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081c8:	4413      	add	r3, r2
 80081ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d6:	2b3e      	cmp	r3, #62	; 0x3e
 80081d8:	d91d      	bls.n	8008216 <USB_EPStartXfer+0xf50>
 80081da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081de:	095b      	lsrs	r3, r3, #5
 80081e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e8:	f003 031f 	and.w	r3, r3, #31
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d104      	bne.n	80081fa <USB_EPStartXfer+0xf34>
 80081f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081f4:	3b01      	subs	r3, #1
 80081f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081fe:	b29b      	uxth	r3, r3
 8008200:	029b      	lsls	r3, r3, #10
 8008202:	b29b      	uxth	r3, r3
 8008204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820c:	b29a      	uxth	r2, r3
 800820e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008212:	801a      	strh	r2, [r3, #0]
 8008214:	e058      	b.n	80082c8 <USB_EPStartXfer+0x1002>
 8008216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821a:	2b00      	cmp	r3, #0
 800821c:	d116      	bne.n	800824c <USB_EPStartXfer+0xf86>
 800821e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	b29b      	uxth	r3, r3
 8008226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800822a:	b29a      	uxth	r2, r3
 800822c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008230:	801a      	strh	r2, [r3, #0]
 8008232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	b29b      	uxth	r3, r3
 800823a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800823e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008242:	b29a      	uxth	r2, r3
 8008244:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008248:	801a      	strh	r2, [r3, #0]
 800824a:	e03d      	b.n	80082c8 <USB_EPStartXfer+0x1002>
 800824c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008250:	085b      	lsrs	r3, r3, #1
 8008252:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d004      	beq.n	800826c <USB_EPStartXfer+0xfa6>
 8008262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008266:	3301      	adds	r3, #1
 8008268:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800826c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008270:	b29b      	uxth	r3, r3
 8008272:	029b      	lsls	r3, r3, #10
 8008274:	b29a      	uxth	r2, r3
 8008276:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800827a:	801a      	strh	r2, [r3, #0]
 800827c:	e024      	b.n	80082c8 <USB_EPStartXfer+0x1002>
 800827e:	463b      	mov	r3, r7
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	785b      	ldrb	r3, [r3, #1]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d11f      	bne.n	80082c8 <USB_EPStartXfer+0x1002>
 8008288:	1d3b      	adds	r3, r7, #4
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008290:	1d3b      	adds	r3, r7, #4
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008298:	b29b      	uxth	r3, r3
 800829a:	461a      	mov	r2, r3
 800829c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082a0:	4413      	add	r3, r2
 80082a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082a6:	463b      	mov	r3, r7
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	00da      	lsls	r2, r3, #3
 80082ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082b2:	4413      	add	r3, r2
 80082b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80082c6:	801a      	strh	r2, [r3, #0]
 80082c8:	1d3b      	adds	r3, r7, #4
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082d0:	463b      	mov	r3, r7
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	785b      	ldrb	r3, [r3, #1]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d16f      	bne.n	80083ba <USB_EPStartXfer+0x10f4>
 80082da:	1d3b      	adds	r3, r7, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082e2:	1d3b      	adds	r3, r7, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	461a      	mov	r2, r3
 80082ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082f2:	4413      	add	r3, r2
 80082f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082f8:	463b      	mov	r3, r7
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	00da      	lsls	r2, r3, #3
 8008300:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008304:	4413      	add	r3, r2
 8008306:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800830a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800830e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008312:	2b3e      	cmp	r3, #62	; 0x3e
 8008314:	d91d      	bls.n	8008352 <USB_EPStartXfer+0x108c>
 8008316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800831a:	095b      	lsrs	r3, r3, #5
 800831c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008324:	f003 031f 	and.w	r3, r3, #31
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <USB_EPStartXfer+0x1070>
 800832c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008330:	3b01      	subs	r3, #1
 8008332:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008336:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800833a:	b29b      	uxth	r3, r3
 800833c:	029b      	lsls	r3, r3, #10
 800833e:	b29b      	uxth	r3, r3
 8008340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008348:	b29a      	uxth	r2, r3
 800834a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800834e:	801a      	strh	r2, [r3, #0]
 8008350:	e057      	b.n	8008402 <USB_EPStartXfer+0x113c>
 8008352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008356:	2b00      	cmp	r3, #0
 8008358:	d116      	bne.n	8008388 <USB_EPStartXfer+0x10c2>
 800835a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008366:	b29a      	uxth	r2, r3
 8008368:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800836c:	801a      	strh	r2, [r3, #0]
 800836e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800837a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800837e:	b29a      	uxth	r2, r3
 8008380:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008384:	801a      	strh	r2, [r3, #0]
 8008386:	e03c      	b.n	8008402 <USB_EPStartXfer+0x113c>
 8008388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800838c:	085b      	lsrs	r3, r3, #1
 800838e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b00      	cmp	r3, #0
 800839c:	d004      	beq.n	80083a8 <USB_EPStartXfer+0x10e2>
 800839e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083a2:	3301      	adds	r3, #1
 80083a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	029b      	lsls	r3, r3, #10
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083b6:	801a      	strh	r2, [r3, #0]
 80083b8:	e023      	b.n	8008402 <USB_EPStartXfer+0x113c>
 80083ba:	463b      	mov	r3, r7
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	785b      	ldrb	r3, [r3, #1]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d11e      	bne.n	8008402 <USB_EPStartXfer+0x113c>
 80083c4:	1d3b      	adds	r3, r7, #4
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	461a      	mov	r2, r3
 80083d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083d4:	4413      	add	r3, r2
 80083d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083da:	463b      	mov	r3, r7
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	00da      	lsls	r2, r3, #3
 80083e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083e6:	4413      	add	r3, r2
 80083e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083fa:	801a      	strh	r2, [r3, #0]
 80083fc:	e001      	b.n	8008402 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e02e      	b.n	8008460 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008402:	1d3b      	adds	r3, r7, #4
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	463b      	mov	r3, r7
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008420:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008424:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008428:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800842c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008430:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008434:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008438:	1d3b      	adds	r3, r7, #4
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	463b      	mov	r3, r7
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	441a      	add	r2, r3
 8008446:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800844a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800844e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800845a:	b29b      	uxth	r3, r3
 800845c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	785b      	ldrb	r3, [r3, #1]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d020      	beq.n	80084be <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4413      	add	r3, r2
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	b29b      	uxth	r3, r3
 800848a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800848e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008492:	81bb      	strh	r3, [r7, #12]
 8008494:	89bb      	ldrh	r3, [r7, #12]
 8008496:	f083 0310 	eor.w	r3, r3, #16
 800849a:	81bb      	strh	r3, [r7, #12]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	441a      	add	r2, r3
 80084a6:	89bb      	ldrh	r3, [r7, #12]
 80084a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	8013      	strh	r3, [r2, #0]
 80084bc:	e01f      	b.n	80084fe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d4:	81fb      	strh	r3, [r7, #14]
 80084d6:	89fb      	ldrh	r3, [r7, #14]
 80084d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084dc:	81fb      	strh	r3, [r7, #14]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	441a      	add	r2, r3
 80084e8:	89fb      	ldrh	r3, [r7, #14]
 80084ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	7b1b      	ldrb	r3, [r3, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	f040 809d 	bne.w	800865a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	785b      	ldrb	r3, [r3, #1]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d04c      	beq.n	80085c2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	823b      	strh	r3, [r7, #16]
 8008536:	8a3b      	ldrh	r3, [r7, #16]
 8008538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853c:	2b00      	cmp	r3, #0
 800853e:	d01b      	beq.n	8008578 <USB_EPClearStall+0x6c>
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	b29b      	uxth	r3, r3
 800854e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008556:	81fb      	strh	r3, [r7, #14]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	441a      	add	r2, r3
 8008562:	89fb      	ldrh	r3, [r7, #14]
 8008564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800856c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008570:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008574:	b29b      	uxth	r3, r3
 8008576:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	78db      	ldrb	r3, [r3, #3]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d06c      	beq.n	800865a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	b29b      	uxth	r3, r3
 800858e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008596:	81bb      	strh	r3, [r7, #12]
 8008598:	89bb      	ldrh	r3, [r7, #12]
 800859a:	f083 0320 	eor.w	r3, r3, #32
 800859e:	81bb      	strh	r3, [r7, #12]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	441a      	add	r2, r3
 80085aa:	89bb      	ldrh	r3, [r7, #12]
 80085ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085bc:	b29b      	uxth	r3, r3
 80085be:	8013      	strh	r3, [r2, #0]
 80085c0:	e04b      	b.n	800865a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	82fb      	strh	r3, [r7, #22]
 80085d0:	8afb      	ldrh	r3, [r7, #22]
 80085d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d01b      	beq.n	8008612 <USB_EPClearStall+0x106>
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f0:	82bb      	strh	r3, [r7, #20]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	441a      	add	r2, r3
 80085fc:	8abb      	ldrh	r3, [r7, #20]
 80085fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800860a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800860e:	b29b      	uxth	r3, r3
 8008610:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	b29b      	uxth	r3, r3
 8008620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008628:	827b      	strh	r3, [r7, #18]
 800862a:	8a7b      	ldrh	r3, [r7, #18]
 800862c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008630:	827b      	strh	r3, [r7, #18]
 8008632:	8a7b      	ldrh	r3, [r7, #18]
 8008634:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008638:	827b      	strh	r3, [r7, #18]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	441a      	add	r2, r3
 8008644:	8a7b      	ldrh	r3, [r7, #18]
 8008646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800864a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800864e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008656:	b29b      	uxth	r3, r3
 8008658:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	371c      	adds	r7, #28
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d103      	bne.n	8008682 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2280      	movs	r2, #128	; 0x80
 800867e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800869e:	b29b      	uxth	r3, r3
 80086a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80086be:	b480      	push	{r7}
 80086c0:	b085      	sub	sp, #20
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80086d0:	68fb      	ldr	r3, [r7, #12]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80086de:	b480      	push	{r7}
 80086e0:	b08d      	sub	sp, #52	; 0x34
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	4611      	mov	r1, r2
 80086ea:	461a      	mov	r2, r3
 80086ec:	460b      	mov	r3, r1
 80086ee:	80fb      	strh	r3, [r7, #6]
 80086f0:	4613      	mov	r3, r2
 80086f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80086f4:	88bb      	ldrh	r3, [r7, #4]
 80086f6:	3301      	adds	r3, #1
 80086f8:	085b      	lsrs	r3, r3, #1
 80086fa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008704:	88fa      	ldrh	r2, [r7, #6]
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	4413      	add	r3, r2
 800870a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800870e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008714:	e01b      	b.n	800874e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	3301      	adds	r3, #1
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	b29b      	uxth	r3, r3
 8008728:	021b      	lsls	r3, r3, #8
 800872a:	b29b      	uxth	r3, r3
 800872c:	461a      	mov	r2, r3
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	4313      	orrs	r3, r2
 8008732:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	b29a      	uxth	r2, r3
 8008738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	3302      	adds	r3, #2
 8008740:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	3301      	adds	r3, #1
 8008746:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	3b01      	subs	r3, #1
 800874c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e0      	bne.n	8008716 <USB_WritePMA+0x38>
  }
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	3734      	adds	r7, #52	; 0x34
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008762:	b480      	push	{r7}
 8008764:	b08b      	sub	sp, #44	; 0x2c
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	4611      	mov	r1, r2
 800876e:	461a      	mov	r2, r3
 8008770:	460b      	mov	r3, r1
 8008772:	80fb      	strh	r3, [r7, #6]
 8008774:	4613      	mov	r3, r2
 8008776:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008778:	88bb      	ldrh	r3, [r7, #4]
 800877a:	085b      	lsrs	r3, r3, #1
 800877c:	b29b      	uxth	r3, r3
 800877e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008788:	88fa      	ldrh	r2, [r7, #6]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008792:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	627b      	str	r3, [r7, #36]	; 0x24
 8008798:	e018      	b.n	80087cc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	3302      	adds	r3, #2
 80087a6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	3301      	adds	r3, #1
 80087b4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	0a1b      	lsrs	r3, r3, #8
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	3301      	adds	r3, #1
 80087c4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	3b01      	subs	r3, #1
 80087ca:	627b      	str	r3, [r7, #36]	; 0x24
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1e3      	bne.n	800879a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80087d2:	88bb      	ldrh	r3, [r7, #4]
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	b29b      	uxth	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d007      	beq.n	80087ee <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	701a      	strb	r2, [r3, #0]
  }
}
 80087ee:	bf00      	nop
 80087f0:	372c      	adds	r7, #44	; 0x2c
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	460b      	mov	r3, r1
 8008804:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008806:	2010      	movs	r0, #16
 8008808:	f001 fef0 	bl	800a5ec <USBD_static_malloc>
 800880c:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d105      	bne.n	8008820 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800881c:	2302      	movs	r3, #2
 800881e:	e01b      	b.n	8008858 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	7c1b      	ldrb	r3, [r3, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d103      	bne.n	8008838 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2207      	movs	r2, #7
 8008834:	875a      	strh	r2, [r3, #58]	; 0x3a
 8008836:	e002      	b.n	800883e <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	220a      	movs	r2, #10
 800883c:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800883e:	2304      	movs	r3, #4
 8008840:	2203      	movs	r2, #3
 8008842:	2181      	movs	r1, #129	; 0x81
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f001 fd8a 	bl	800a35e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2201      	movs	r2, #1
 800884e:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800886c:	2181      	movs	r1, #129	; 0x81
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f001 fd9b 	bl	800a3aa <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008886:	2b00      	cmp	r3, #0
 8008888:	d009      	beq.n	800889e <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008890:	4618      	mov	r0, r3
 8008892:	f001 feb9 	bl	800a608 <USBD_static_free>
    pdev->pClassData = NULL;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088b8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e0e8      	b.n	8008a9e <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d046      	beq.n	8008966 <USBD_HID_Setup+0xbe>
 80088d8:	2b20      	cmp	r3, #32
 80088da:	f040 80d8 	bne.w	8008a8e <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	785b      	ldrb	r3, [r3, #1]
 80088e2:	3b02      	subs	r3, #2
 80088e4:	2b09      	cmp	r3, #9
 80088e6:	d836      	bhi.n	8008956 <USBD_HID_Setup+0xae>
 80088e8:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <USBD_HID_Setup+0x48>)
 80088ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ee:	bf00      	nop
 80088f0:	08008947 	.word	0x08008947
 80088f4:	08008927 	.word	0x08008927
 80088f8:	08008957 	.word	0x08008957
 80088fc:	08008957 	.word	0x08008957
 8008900:	08008957 	.word	0x08008957
 8008904:	08008957 	.word	0x08008957
 8008908:	08008957 	.word	0x08008957
 800890c:	08008957 	.word	0x08008957
 8008910:	08008935 	.word	0x08008935
 8008914:	08008919 	.word	0x08008919
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	885b      	ldrh	r3, [r3, #2]
 800891c:	b2db      	uxtb	r3, r3
 800891e:	461a      	mov	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	601a      	str	r2, [r3, #0]
          break;
 8008924:	e01e      	b.n	8008964 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 f9d8 	bl	8009ce2 <USBD_CtlSendData>
          break;
 8008932:	e017      	b.n	8008964 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	885b      	ldrh	r3, [r3, #2]
 8008938:	0a1b      	lsrs	r3, r3, #8
 800893a:	b29b      	uxth	r3, r3
 800893c:	b2db      	uxtb	r3, r3
 800893e:	461a      	mov	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	605a      	str	r2, [r3, #4]
          break;
 8008944:	e00e      	b.n	8008964 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3304      	adds	r3, #4
 800894a:	2201      	movs	r2, #1
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 f9c7 	bl	8009ce2 <USBD_CtlSendData>
          break;
 8008954:	e006      	b.n	8008964 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f001 f951 	bl	8009c00 <USBD_CtlError>
          ret = USBD_FAIL;
 800895e:	2303      	movs	r3, #3
 8008960:	75fb      	strb	r3, [r7, #23]
          break;
 8008962:	bf00      	nop
      }
      break;
 8008964:	e09a      	b.n	8008a9c <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	785b      	ldrb	r3, [r3, #1]
 800896a:	2b0b      	cmp	r3, #11
 800896c:	f200 8086 	bhi.w	8008a7c <USBD_HID_Setup+0x1d4>
 8008970:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <USBD_HID_Setup+0xd0>)
 8008972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008976:	bf00      	nop
 8008978:	080089a9 	.word	0x080089a9
 800897c:	08008a8b 	.word	0x08008a8b
 8008980:	08008a7d 	.word	0x08008a7d
 8008984:	08008a7d 	.word	0x08008a7d
 8008988:	08008a7d 	.word	0x08008a7d
 800898c:	08008a7d 	.word	0x08008a7d
 8008990:	080089d3 	.word	0x080089d3
 8008994:	08008a7d 	.word	0x08008a7d
 8008998:	08008a7d 	.word	0x08008a7d
 800899c:	08008a7d 	.word	0x08008a7d
 80089a0:	08008a2b 	.word	0x08008a2b
 80089a4:	08008a55 	.word	0x08008a55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d107      	bne.n	80089c4 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80089b4:	f107 030a 	add.w	r3, r7, #10
 80089b8:	2202      	movs	r2, #2
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 f990 	bl	8009ce2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089c2:	e063      	b.n	8008a8c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 f91a 	bl	8009c00 <USBD_CtlError>
            ret = USBD_FAIL;
 80089cc:	2303      	movs	r3, #3
 80089ce:	75fb      	strb	r3, [r7, #23]
          break;
 80089d0:	e05c      	b.n	8008a8c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	885b      	ldrh	r3, [r3, #2]
 80089d6:	0a1b      	lsrs	r3, r3, #8
 80089d8:	b29b      	uxth	r3, r3
 80089da:	2b22      	cmp	r3, #34	; 0x22
 80089dc:	d108      	bne.n	80089f0 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	88db      	ldrh	r3, [r3, #6]
 80089e2:	2b4a      	cmp	r3, #74	; 0x4a
 80089e4:	bf28      	it	cs
 80089e6:	234a      	movcs	r3, #74	; 0x4a
 80089e8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80089ea:	4b2f      	ldr	r3, [pc, #188]	; (8008aa8 <USBD_HID_Setup+0x200>)
 80089ec:	613b      	str	r3, [r7, #16]
 80089ee:	e015      	b.n	8008a1c <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	885b      	ldrh	r3, [r3, #2]
 80089f4:	0a1b      	lsrs	r3, r3, #8
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	2b21      	cmp	r3, #33	; 0x21
 80089fa:	d108      	bne.n	8008a0e <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 80089fc:	4b2b      	ldr	r3, [pc, #172]	; (8008aac <USBD_HID_Setup+0x204>)
 80089fe:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	88db      	ldrh	r3, [r3, #6]
 8008a04:	2b09      	cmp	r3, #9
 8008a06:	bf28      	it	cs
 8008a08:	2309      	movcs	r3, #9
 8008a0a:	82bb      	strh	r3, [r7, #20]
 8008a0c:	e006      	b.n	8008a1c <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 f8f5 	bl	8009c00 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a16:	2303      	movs	r3, #3
 8008a18:	75fb      	strb	r3, [r7, #23]
            break;
 8008a1a:	e037      	b.n	8008a8c <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a1c:	8abb      	ldrh	r3, [r7, #20]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	6939      	ldr	r1, [r7, #16]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f001 f95d 	bl	8009ce2 <USBD_CtlSendData>
          break;
 8008a28:	e030      	b.n	8008a8c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d107      	bne.n	8008a46 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3308      	adds	r3, #8
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f001 f94f 	bl	8009ce2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a44:	e022      	b.n	8008a8c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 f8d9 	bl	8009c00 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	75fb      	strb	r3, [r7, #23]
          break;
 8008a52:	e01b      	b.n	8008a8c <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d106      	bne.n	8008a6e <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	885b      	ldrh	r3, [r3, #2]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	461a      	mov	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a6c:	e00e      	b.n	8008a8c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f001 f8c5 	bl	8009c00 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a76:	2303      	movs	r3, #3
 8008a78:	75fb      	strb	r3, [r7, #23]
          break;
 8008a7a:	e007      	b.n	8008a8c <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 f8be 	bl	8009c00 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a84:	2303      	movs	r3, #3
 8008a86:	75fb      	strb	r3, [r7, #23]
          break;
 8008a88:	e000      	b.n	8008a8c <USBD_HID_Setup+0x1e4>
          break;
 8008a8a:	bf00      	nop
      }
      break;
 8008a8c:	e006      	b.n	8008a9c <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 f8b5 	bl	8009c00 <USBD_CtlError>
      ret = USBD_FAIL;
 8008a96:	2303      	movs	r3, #3
 8008a98:	75fb      	strb	r3, [r7, #23]
      break;
 8008a9a:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	200000cc 	.word	0x200000cc
 8008aac:	200000b4 	.word	0x200000b4

08008ab0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ac4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e013      	b.n	8008af8 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	d10c      	bne.n	8008af6 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	7b1b      	ldrb	r3, [r3, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d108      	bne.n	8008af6 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008aea:	88fb      	ldrh	r3, [r7, #6]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	2181      	movs	r1, #129	; 0x81
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f001 fd03 	bl	800a4fc <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2222      	movs	r2, #34	; 0x22
 8008b0c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008b0e:	4b03      	ldr	r3, [pc, #12]	; (8008b1c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	20000048 	.word	0x20000048

08008b20 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2222      	movs	r2, #34	; 0x22
 8008b2c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8008b2e:	4b03      	ldr	r3, [pc, #12]	; (8008b3c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	2000006c 	.word	0x2000006c

08008b40 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2222      	movs	r2, #34	; 0x22
 8008b4c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008b4e:	4b03      	ldr	r3, [pc, #12]	; (8008b5c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	20000090 	.word	0x20000090

08008b60 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b72:	2200      	movs	r2, #0
 8008b74:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	220a      	movs	r2, #10
 8008b90:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008b92:	4b03      	ldr	r3, [pc, #12]	; (8008ba0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	200000c0 	.word	0x200000c0

08008ba4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e01f      	b.n	8008bfc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	79fa      	ldrb	r2, [r7, #7]
 8008bee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f001 fb49 	bl	800a288 <USBD_LL_Init>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e016      	b.n	8008c4a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00b      	beq.n	8008c48 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	f107 020e 	add.w	r2, r7, #14
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4798      	blx	r3
 8008c40:	4602      	mov	r2, r0
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f001 fb64 	bl	800a328 <USBD_LL_Start>
 8008c60:	4603      	mov	r3, r0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b083      	sub	sp, #12
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d009      	beq.n	8008cae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	78fa      	ldrb	r2, [r7, #3]
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	4798      	blx	r3
 8008caa:	4603      	mov	r3, r0
 8008cac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d007      	beq.n	8008cde <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	78fa      	ldrb	r2, [r7, #3]
 8008cd8:	4611      	mov	r1, r2
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	4798      	blx	r3
  }

  return USBD_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 ff46 	bl	8009b8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008d0e:	461a      	mov	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d1c:	f003 031f 	and.w	r3, r3, #31
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d01a      	beq.n	8008d5a <USBD_LL_SetupStage+0x72>
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d822      	bhi.n	8008d6e <USBD_LL_SetupStage+0x86>
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <USBD_LL_SetupStage+0x4a>
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d00a      	beq.n	8008d46 <USBD_LL_SetupStage+0x5e>
 8008d30:	e01d      	b.n	8008d6e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f9ee 	bl	800911c <USBD_StdDevReq>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]
      break;
 8008d44:	e020      	b.n	8008d88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa52 	bl	80091f8 <USBD_StdItfReq>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73fb      	strb	r3, [r7, #15]
      break;
 8008d58:	e016      	b.n	8008d88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fa91 	bl	800928a <USBD_StdEPReq>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d6c:	e00c      	b.n	8008d88 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f001 fb33 	bl	800a3e8 <USBD_LL_StallEP>
 8008d82:	4603      	mov	r3, r0
 8008d84:	73fb      	strb	r3, [r7, #15]
      break;
 8008d86:	bf00      	nop
  }

  return ret;
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b086      	sub	sp, #24
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008da0:	7afb      	ldrb	r3, [r7, #11]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d138      	bne.n	8008e18 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008dac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d14a      	bne.n	8008e4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d913      	bls.n	8008dec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	1ad2      	subs	r2, r2, r3
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	68da      	ldr	r2, [r3, #12]
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	bf28      	it	cs
 8008dde:	4613      	movcs	r3, r2
 8008de0:	461a      	mov	r2, r3
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f000 ffa8 	bl	8009d3a <USBD_CtlContinueRx>
 8008dea:	e030      	b.n	8008e4e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b03      	cmp	r3, #3
 8008df6:	d10b      	bne.n	8008e10 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 ffa3 	bl	8009d5c <USBD_CtlSendStatus>
 8008e16:	e01a      	b.n	8008e4e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d114      	bne.n	8008e4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00e      	beq.n	8008e4e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	7afa      	ldrb	r2, [r7, #11]
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	4798      	blx	r3
 8008e40:	4603      	mov	r3, r0
 8008e42:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	e000      	b.n	8008e50 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	460b      	mov	r3, r1
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008e66:	7afb      	ldrb	r3, [r7, #11]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d16b      	bne.n	8008f44 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	3314      	adds	r3, #20
 8008e70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d156      	bne.n	8008f2a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d914      	bls.n	8008eb2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	689a      	ldr	r2, [r3, #8]
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	1ad2      	subs	r2, r2, r3
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	6879      	ldr	r1, [r7, #4]
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 ff3a 	bl	8009d18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f001 fb47 	bl	800a53e <USBD_LL_PrepareReceive>
 8008eb0:	e03b      	b.n	8008f2a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	68da      	ldr	r2, [r3, #12]
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d11c      	bne.n	8008ef8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d316      	bcc.n	8008ef8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d20f      	bcs.n	8008ef8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2100      	movs	r1, #0
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 ff1b 	bl	8009d18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eea:	2300      	movs	r3, #0
 8008eec:	2200      	movs	r2, #0
 8008eee:	2100      	movs	r1, #0
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f001 fb24 	bl	800a53e <USBD_LL_PrepareReceive>
 8008ef6:	e018      	b.n	8008f2a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d10b      	bne.n	8008f1c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d005      	beq.n	8008f1c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f1c:	2180      	movs	r1, #128	; 0x80
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f001 fa62 	bl	800a3e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 ff2c 	bl	8009d82 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d122      	bne.n	8008f7a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f7ff fe98 	bl	8008c6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008f42:	e01a      	b.n	8008f7a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	d114      	bne.n	8008f7a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00e      	beq.n	8008f7a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	7afa      	ldrb	r2, [r7, #11]
 8008f66:	4611      	mov	r1, r2
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	4798      	blx	r3
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	e000      	b.n	8008f7c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e02f      	b.n	8009018 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00f      	beq.n	8008fe2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d009      	beq.n	8008fe2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	6852      	ldr	r2, [r2, #4]
 8008fda:	b2d2      	uxtb	r2, r2
 8008fdc:	4611      	mov	r1, r2
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fe2:	2340      	movs	r3, #64	; 0x40
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 f9b8 	bl	800a35e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2240      	movs	r2, #64	; 0x40
 8008ffa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ffe:	2340      	movs	r3, #64	; 0x40
 8009000:	2200      	movs	r2, #0
 8009002:	2180      	movs	r1, #128	; 0x80
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f001 f9aa 	bl	800a35e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2240      	movs	r2, #64	; 0x40
 8009014:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	78fa      	ldrb	r2, [r7, #3]
 8009030:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904e:	b2da      	uxtb	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2204      	movs	r2, #4
 800905a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b04      	cmp	r3, #4
 800907e:	d106      	bne.n	800908e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009086:	b2da      	uxtb	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e012      	b.n	80090d8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d10b      	bne.n	80090d6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b087      	sub	sp, #28
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	3301      	adds	r3, #1
 80090f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090fe:	8a3b      	ldrh	r3, [r7, #16]
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	b21a      	sxth	r2, r3
 8009104:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009108:	4313      	orrs	r3, r2
 800910a:	b21b      	sxth	r3, r3
 800910c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800910e:	89fb      	ldrh	r3, [r7, #14]
}
 8009110:	4618      	mov	r0, r3
 8009112:	371c      	adds	r7, #28
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009132:	2b40      	cmp	r3, #64	; 0x40
 8009134:	d005      	beq.n	8009142 <USBD_StdDevReq+0x26>
 8009136:	2b40      	cmp	r3, #64	; 0x40
 8009138:	d853      	bhi.n	80091e2 <USBD_StdDevReq+0xc6>
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00b      	beq.n	8009156 <USBD_StdDevReq+0x3a>
 800913e:	2b20      	cmp	r3, #32
 8009140:	d14f      	bne.n	80091e2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	4798      	blx	r3
 8009150:	4603      	mov	r3, r0
 8009152:	73fb      	strb	r3, [r7, #15]
      break;
 8009154:	e04a      	b.n	80091ec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	785b      	ldrb	r3, [r3, #1]
 800915a:	2b09      	cmp	r3, #9
 800915c:	d83b      	bhi.n	80091d6 <USBD_StdDevReq+0xba>
 800915e:	a201      	add	r2, pc, #4	; (adr r2, 8009164 <USBD_StdDevReq+0x48>)
 8009160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009164:	080091b9 	.word	0x080091b9
 8009168:	080091cd 	.word	0x080091cd
 800916c:	080091d7 	.word	0x080091d7
 8009170:	080091c3 	.word	0x080091c3
 8009174:	080091d7 	.word	0x080091d7
 8009178:	08009197 	.word	0x08009197
 800917c:	0800918d 	.word	0x0800918d
 8009180:	080091d7 	.word	0x080091d7
 8009184:	080091af 	.word	0x080091af
 8009188:	080091a1 	.word	0x080091a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f9de 	bl	8009550 <USBD_GetDescriptor>
          break;
 8009194:	e024      	b.n	80091e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fb6d 	bl	8009878 <USBD_SetAddress>
          break;
 800919e:	e01f      	b.n	80091e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091a0:	6839      	ldr	r1, [r7, #0]
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fbac 	bl	8009900 <USBD_SetConfig>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73fb      	strb	r3, [r7, #15]
          break;
 80091ac:	e018      	b.n	80091e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fc4b 	bl	8009a4c <USBD_GetConfig>
          break;
 80091b6:	e013      	b.n	80091e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fc7c 	bl	8009ab8 <USBD_GetStatus>
          break;
 80091c0:	e00e      	b.n	80091e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fcab 	bl	8009b20 <USBD_SetFeature>
          break;
 80091ca:	e009      	b.n	80091e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fcba 	bl	8009b48 <USBD_ClrFeature>
          break;
 80091d4:	e004      	b.n	80091e0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fd11 	bl	8009c00 <USBD_CtlError>
          break;
 80091de:	bf00      	nop
      }
      break;
 80091e0:	e004      	b.n	80091ec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fd0b 	bl	8009c00 <USBD_CtlError>
      break;
 80091ea:	bf00      	nop
  }

  return ret;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop

080091f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800920e:	2b40      	cmp	r3, #64	; 0x40
 8009210:	d005      	beq.n	800921e <USBD_StdItfReq+0x26>
 8009212:	2b40      	cmp	r3, #64	; 0x40
 8009214:	d82f      	bhi.n	8009276 <USBD_StdItfReq+0x7e>
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <USBD_StdItfReq+0x26>
 800921a:	2b20      	cmp	r3, #32
 800921c:	d12b      	bne.n	8009276 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009224:	b2db      	uxtb	r3, r3
 8009226:	3b01      	subs	r3, #1
 8009228:	2b02      	cmp	r3, #2
 800922a:	d81d      	bhi.n	8009268 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	889b      	ldrh	r3, [r3, #4]
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b01      	cmp	r3, #1
 8009234:	d813      	bhi.n	800925e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	4798      	blx	r3
 8009244:	4603      	mov	r3, r0
 8009246:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	88db      	ldrh	r3, [r3, #6]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d110      	bne.n	8009272 <USBD_StdItfReq+0x7a>
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10d      	bne.n	8009272 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fd80 	bl	8009d5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800925c:	e009      	b.n	8009272 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fccd 	bl	8009c00 <USBD_CtlError>
          break;
 8009266:	e004      	b.n	8009272 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fcc8 	bl	8009c00 <USBD_CtlError>
          break;
 8009270:	e000      	b.n	8009274 <USBD_StdItfReq+0x7c>
          break;
 8009272:	bf00      	nop
      }
      break;
 8009274:	e004      	b.n	8009280 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fcc1 	bl	8009c00 <USBD_CtlError>
      break;
 800927e:	bf00      	nop
  }

  return ret;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	889b      	ldrh	r3, [r3, #4]
 800929c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092a6:	2b40      	cmp	r3, #64	; 0x40
 80092a8:	d007      	beq.n	80092ba <USBD_StdEPReq+0x30>
 80092aa:	2b40      	cmp	r3, #64	; 0x40
 80092ac:	f200 8145 	bhi.w	800953a <USBD_StdEPReq+0x2b0>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00c      	beq.n	80092ce <USBD_StdEPReq+0x44>
 80092b4:	2b20      	cmp	r3, #32
 80092b6:	f040 8140 	bne.w	800953a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	4798      	blx	r3
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]
      break;
 80092cc:	e13a      	b.n	8009544 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	785b      	ldrb	r3, [r3, #1]
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d007      	beq.n	80092e6 <USBD_StdEPReq+0x5c>
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	f300 8129 	bgt.w	800952e <USBD_StdEPReq+0x2a4>
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d07f      	beq.n	80093e0 <USBD_StdEPReq+0x156>
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d03c      	beq.n	800935e <USBD_StdEPReq+0xd4>
 80092e4:	e123      	b.n	800952e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d002      	beq.n	80092f8 <USBD_StdEPReq+0x6e>
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d016      	beq.n	8009324 <USBD_StdEPReq+0x9a>
 80092f6:	e02c      	b.n	8009352 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00d      	beq.n	800931a <USBD_StdEPReq+0x90>
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	2b80      	cmp	r3, #128	; 0x80
 8009302:	d00a      	beq.n	800931a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 f86d 	bl	800a3e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800930e:	2180      	movs	r1, #128	; 0x80
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 f869 	bl	800a3e8 <USBD_LL_StallEP>
 8009316:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009318:	e020      	b.n	800935c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fc6f 	bl	8009c00 <USBD_CtlError>
              break;
 8009322:	e01b      	b.n	800935c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	885b      	ldrh	r3, [r3, #2]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10e      	bne.n	800934a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800932c:	7bbb      	ldrb	r3, [r7, #14]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00b      	beq.n	800934a <USBD_StdEPReq+0xc0>
 8009332:	7bbb      	ldrb	r3, [r7, #14]
 8009334:	2b80      	cmp	r3, #128	; 0x80
 8009336:	d008      	beq.n	800934a <USBD_StdEPReq+0xc0>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	88db      	ldrh	r3, [r3, #6]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d104      	bne.n	800934a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 f84f 	bl	800a3e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fd06 	bl	8009d5c <USBD_CtlSendStatus>

              break;
 8009350:	e004      	b.n	800935c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fc53 	bl	8009c00 <USBD_CtlError>
              break;
 800935a:	bf00      	nop
          }
          break;
 800935c:	e0ec      	b.n	8009538 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b02      	cmp	r3, #2
 8009368:	d002      	beq.n	8009370 <USBD_StdEPReq+0xe6>
 800936a:	2b03      	cmp	r3, #3
 800936c:	d016      	beq.n	800939c <USBD_StdEPReq+0x112>
 800936e:	e030      	b.n	80093d2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00d      	beq.n	8009392 <USBD_StdEPReq+0x108>
 8009376:	7bbb      	ldrb	r3, [r7, #14]
 8009378:	2b80      	cmp	r3, #128	; 0x80
 800937a:	d00a      	beq.n	8009392 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800937c:	7bbb      	ldrb	r3, [r7, #14]
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f001 f831 	bl	800a3e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009386:	2180      	movs	r1, #128	; 0x80
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 f82d 	bl	800a3e8 <USBD_LL_StallEP>
 800938e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009390:	e025      	b.n	80093de <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fc33 	bl	8009c00 <USBD_CtlError>
              break;
 800939a:	e020      	b.n	80093de <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	885b      	ldrh	r3, [r3, #2]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d11b      	bne.n	80093dc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
 80093a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d004      	beq.n	80093b8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 f837 	bl	800a426 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fccf 	bl	8009d5c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	4798      	blx	r3
 80093cc:	4603      	mov	r3, r0
 80093ce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80093d0:	e004      	b.n	80093dc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fc13 	bl	8009c00 <USBD_CtlError>
              break;
 80093da:	e000      	b.n	80093de <USBD_StdEPReq+0x154>
              break;
 80093dc:	bf00      	nop
          }
          break;
 80093de:	e0ab      	b.n	8009538 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d002      	beq.n	80093f2 <USBD_StdEPReq+0x168>
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d032      	beq.n	8009456 <USBD_StdEPReq+0x1cc>
 80093f0:	e097      	b.n	8009522 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d007      	beq.n	8009408 <USBD_StdEPReq+0x17e>
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	2b80      	cmp	r3, #128	; 0x80
 80093fc:	d004      	beq.n	8009408 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fbfd 	bl	8009c00 <USBD_CtlError>
                break;
 8009406:	e091      	b.n	800952c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009408:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800940c:	2b00      	cmp	r3, #0
 800940e:	da0b      	bge.n	8009428 <USBD_StdEPReq+0x19e>
 8009410:	7bbb      	ldrb	r3, [r7, #14]
 8009412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	3310      	adds	r3, #16
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	4413      	add	r3, r2
 8009424:	3304      	adds	r3, #4
 8009426:	e00b      	b.n	8009440 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009428:	7bbb      	ldrb	r3, [r7, #14]
 800942a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800942e:	4613      	mov	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	4413      	add	r3, r2
 800943e:	3304      	adds	r3, #4
 8009440:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2200      	movs	r2, #0
 8009446:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2202      	movs	r2, #2
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fc47 	bl	8009ce2 <USBD_CtlSendData>
              break;
 8009454:	e06a      	b.n	800952c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800945a:	2b00      	cmp	r3, #0
 800945c:	da11      	bge.n	8009482 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800945e:	7bbb      	ldrb	r3, [r7, #14]
 8009460:	f003 020f 	and.w	r2, r3, #15
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	4613      	mov	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	3324      	adds	r3, #36	; 0x24
 8009472:	881b      	ldrh	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d117      	bne.n	80094a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fbc0 	bl	8009c00 <USBD_CtlError>
                  break;
 8009480:	e054      	b.n	800952c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009482:	7bbb      	ldrb	r3, [r7, #14]
 8009484:	f003 020f 	and.w	r2, r3, #15
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	4613      	mov	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	440b      	add	r3, r1
 8009494:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d104      	bne.n	80094a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fbad 	bl	8009c00 <USBD_CtlError>
                  break;
 80094a6:	e041      	b.n	800952c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	da0b      	bge.n	80094c8 <USBD_StdEPReq+0x23e>
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094b6:	4613      	mov	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	3310      	adds	r3, #16
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	4413      	add	r3, r2
 80094c4:	3304      	adds	r3, #4
 80094c6:	e00b      	b.n	80094e0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
 80094ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	4413      	add	r3, r2
 80094de:	3304      	adds	r3, #4
 80094e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <USBD_StdEPReq+0x264>
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
 80094ea:	2b80      	cmp	r3, #128	; 0x80
 80094ec:	d103      	bne.n	80094f6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	e00e      	b.n	8009514 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80094f6:	7bbb      	ldrb	r3, [r7, #14]
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 ffb2 	bl	800a464 <USBD_LL_IsStallEP>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d003      	beq.n	800950e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2201      	movs	r2, #1
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	e002      	b.n	8009514 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2200      	movs	r2, #0
 8009512:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2202      	movs	r2, #2
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fbe1 	bl	8009ce2 <USBD_CtlSendData>
              break;
 8009520:	e004      	b.n	800952c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fb6b 	bl	8009c00 <USBD_CtlError>
              break;
 800952a:	bf00      	nop
          }
          break;
 800952c:	e004      	b.n	8009538 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fb65 	bl	8009c00 <USBD_CtlError>
          break;
 8009536:	bf00      	nop
      }
      break;
 8009538:	e004      	b.n	8009544 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fb5f 	bl	8009c00 <USBD_CtlError>
      break;
 8009542:	bf00      	nop
  }

  return ret;
 8009544:	7bfb      	ldrb	r3, [r7, #15]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	885b      	ldrh	r3, [r3, #2]
 800956a:	0a1b      	lsrs	r3, r3, #8
 800956c:	b29b      	uxth	r3, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	2b0e      	cmp	r3, #14
 8009572:	f200 8152 	bhi.w	800981a <USBD_GetDescriptor+0x2ca>
 8009576:	a201      	add	r2, pc, #4	; (adr r2, 800957c <USBD_GetDescriptor+0x2c>)
 8009578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957c:	080095ed 	.word	0x080095ed
 8009580:	08009605 	.word	0x08009605
 8009584:	08009645 	.word	0x08009645
 8009588:	0800981b 	.word	0x0800981b
 800958c:	0800981b 	.word	0x0800981b
 8009590:	080097bb 	.word	0x080097bb
 8009594:	080097e7 	.word	0x080097e7
 8009598:	0800981b 	.word	0x0800981b
 800959c:	0800981b 	.word	0x0800981b
 80095a0:	0800981b 	.word	0x0800981b
 80095a4:	0800981b 	.word	0x0800981b
 80095a8:	0800981b 	.word	0x0800981b
 80095ac:	0800981b 	.word	0x0800981b
 80095b0:	0800981b 	.word	0x0800981b
 80095b4:	080095b9 	.word	0x080095b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00b      	beq.n	80095dc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	7c12      	ldrb	r2, [r2, #16]
 80095d0:	f107 0108 	add.w	r1, r7, #8
 80095d4:	4610      	mov	r0, r2
 80095d6:	4798      	blx	r3
 80095d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095da:	e126      	b.n	800982a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fb0e 	bl	8009c00 <USBD_CtlError>
        err++;
 80095e4:	7afb      	ldrb	r3, [r7, #11]
 80095e6:	3301      	adds	r3, #1
 80095e8:	72fb      	strb	r3, [r7, #11]
      break;
 80095ea:	e11e      	b.n	800982a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	7c12      	ldrb	r2, [r2, #16]
 80095f8:	f107 0108 	add.w	r1, r7, #8
 80095fc:	4610      	mov	r0, r2
 80095fe:	4798      	blx	r3
 8009600:	60f8      	str	r0, [r7, #12]
      break;
 8009602:	e112      	b.n	800982a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	7c1b      	ldrb	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10d      	bne.n	8009628 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009614:	f107 0208 	add.w	r2, r7, #8
 8009618:	4610      	mov	r0, r2
 800961a:	4798      	blx	r3
 800961c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3301      	adds	r3, #1
 8009622:	2202      	movs	r2, #2
 8009624:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009626:	e100      	b.n	800982a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	f107 0208 	add.w	r2, r7, #8
 8009634:	4610      	mov	r0, r2
 8009636:	4798      	blx	r3
 8009638:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3301      	adds	r3, #1
 800963e:	2202      	movs	r2, #2
 8009640:	701a      	strb	r2, [r3, #0]
      break;
 8009642:	e0f2      	b.n	800982a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	885b      	ldrh	r3, [r3, #2]
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b05      	cmp	r3, #5
 800964c:	f200 80ac 	bhi.w	80097a8 <USBD_GetDescriptor+0x258>
 8009650:	a201      	add	r2, pc, #4	; (adr r2, 8009658 <USBD_GetDescriptor+0x108>)
 8009652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009656:	bf00      	nop
 8009658:	08009671 	.word	0x08009671
 800965c:	080096a5 	.word	0x080096a5
 8009660:	080096d9 	.word	0x080096d9
 8009664:	0800970d 	.word	0x0800970d
 8009668:	08009741 	.word	0x08009741
 800966c:	08009775 	.word	0x08009775
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00b      	beq.n	8009694 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	7c12      	ldrb	r2, [r2, #16]
 8009688:	f107 0108 	add.w	r1, r7, #8
 800968c:	4610      	mov	r0, r2
 800968e:	4798      	blx	r3
 8009690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009692:	e091      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fab2 	bl	8009c00 <USBD_CtlError>
            err++;
 800969c:	7afb      	ldrb	r3, [r7, #11]
 800969e:	3301      	adds	r3, #1
 80096a0:	72fb      	strb	r3, [r7, #11]
          break;
 80096a2:	e089      	b.n	80097b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	7c12      	ldrb	r2, [r2, #16]
 80096bc:	f107 0108 	add.w	r1, r7, #8
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
 80096c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096c6:	e077      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa98 	bl	8009c00 <USBD_CtlError>
            err++;
 80096d0:	7afb      	ldrb	r3, [r7, #11]
 80096d2:	3301      	adds	r3, #1
 80096d4:	72fb      	strb	r3, [r7, #11]
          break;
 80096d6:	e06f      	b.n	80097b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	7c12      	ldrb	r2, [r2, #16]
 80096f0:	f107 0108 	add.w	r1, r7, #8
 80096f4:	4610      	mov	r0, r2
 80096f6:	4798      	blx	r3
 80096f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096fa:	e05d      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fa7e 	bl	8009c00 <USBD_CtlError>
            err++;
 8009704:	7afb      	ldrb	r3, [r7, #11]
 8009706:	3301      	adds	r3, #1
 8009708:	72fb      	strb	r3, [r7, #11]
          break;
 800970a:	e055      	b.n	80097b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	7c12      	ldrb	r2, [r2, #16]
 8009724:	f107 0108 	add.w	r1, r7, #8
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
 800972c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800972e:	e043      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fa64 	bl	8009c00 <USBD_CtlError>
            err++;
 8009738:	7afb      	ldrb	r3, [r7, #11]
 800973a:	3301      	adds	r3, #1
 800973c:	72fb      	strb	r3, [r7, #11]
          break;
 800973e:	e03b      	b.n	80097b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00b      	beq.n	8009764 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009752:	695b      	ldr	r3, [r3, #20]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	7c12      	ldrb	r2, [r2, #16]
 8009758:	f107 0108 	add.w	r1, r7, #8
 800975c:	4610      	mov	r0, r2
 800975e:	4798      	blx	r3
 8009760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009762:	e029      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fa4a 	bl	8009c00 <USBD_CtlError>
            err++;
 800976c:	7afb      	ldrb	r3, [r7, #11]
 800976e:	3301      	adds	r3, #1
 8009770:	72fb      	strb	r3, [r7, #11]
          break;
 8009772:	e021      	b.n	80097b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00b      	beq.n	8009798 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	7c12      	ldrb	r2, [r2, #16]
 800978c:	f107 0108 	add.w	r1, r7, #8
 8009790:	4610      	mov	r0, r2
 8009792:	4798      	blx	r3
 8009794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009796:	e00f      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fa30 	bl	8009c00 <USBD_CtlError>
            err++;
 80097a0:	7afb      	ldrb	r3, [r7, #11]
 80097a2:	3301      	adds	r3, #1
 80097a4:	72fb      	strb	r3, [r7, #11]
          break;
 80097a6:	e007      	b.n	80097b8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa28 	bl	8009c00 <USBD_CtlError>
          err++;
 80097b0:	7afb      	ldrb	r3, [r7, #11]
 80097b2:	3301      	adds	r3, #1
 80097b4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80097b6:	bf00      	nop
      }
      break;
 80097b8:	e037      	b.n	800982a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	7c1b      	ldrb	r3, [r3, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d109      	bne.n	80097d6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ca:	f107 0208 	add.w	r2, r7, #8
 80097ce:	4610      	mov	r0, r2
 80097d0:	4798      	blx	r3
 80097d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097d4:	e029      	b.n	800982a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fa11 	bl	8009c00 <USBD_CtlError>
        err++;
 80097de:	7afb      	ldrb	r3, [r7, #11]
 80097e0:	3301      	adds	r3, #1
 80097e2:	72fb      	strb	r3, [r7, #11]
      break;
 80097e4:	e021      	b.n	800982a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	7c1b      	ldrb	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10d      	bne.n	800980a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f6:	f107 0208 	add.w	r2, r7, #8
 80097fa:	4610      	mov	r0, r2
 80097fc:	4798      	blx	r3
 80097fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3301      	adds	r3, #1
 8009804:	2207      	movs	r2, #7
 8009806:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009808:	e00f      	b.n	800982a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f9f7 	bl	8009c00 <USBD_CtlError>
        err++;
 8009812:	7afb      	ldrb	r3, [r7, #11]
 8009814:	3301      	adds	r3, #1
 8009816:	72fb      	strb	r3, [r7, #11]
      break;
 8009818:	e007      	b.n	800982a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f9ef 	bl	8009c00 <USBD_CtlError>
      err++;
 8009822:	7afb      	ldrb	r3, [r7, #11]
 8009824:	3301      	adds	r3, #1
 8009826:	72fb      	strb	r3, [r7, #11]
      break;
 8009828:	bf00      	nop
  }

  if (err != 0U)
 800982a:	7afb      	ldrb	r3, [r7, #11]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d11e      	bne.n	800986e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	88db      	ldrh	r3, [r3, #6]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d016      	beq.n	8009866 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009838:	893b      	ldrh	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00e      	beq.n	800985c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	88da      	ldrh	r2, [r3, #6]
 8009842:	893b      	ldrh	r3, [r7, #8]
 8009844:	4293      	cmp	r3, r2
 8009846:	bf28      	it	cs
 8009848:	4613      	movcs	r3, r2
 800984a:	b29b      	uxth	r3, r3
 800984c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800984e:	893b      	ldrh	r3, [r7, #8]
 8009850:	461a      	mov	r2, r3
 8009852:	68f9      	ldr	r1, [r7, #12]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fa44 	bl	8009ce2 <USBD_CtlSendData>
 800985a:	e009      	b.n	8009870 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f9ce 	bl	8009c00 <USBD_CtlError>
 8009864:	e004      	b.n	8009870 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fa78 	bl	8009d5c <USBD_CtlSendStatus>
 800986c:	e000      	b.n	8009870 <USBD_GetDescriptor+0x320>
    return;
 800986e:	bf00      	nop
  }
}
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop

08009878 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	889b      	ldrh	r3, [r3, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d131      	bne.n	80098ee <USBD_SetAddress+0x76>
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	88db      	ldrh	r3, [r3, #6]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d12d      	bne.n	80098ee <USBD_SetAddress+0x76>
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	885b      	ldrh	r3, [r3, #2]
 8009896:	2b7f      	cmp	r3, #127	; 0x7f
 8009898:	d829      	bhi.n	80098ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	885b      	ldrh	r3, [r3, #2]
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d104      	bne.n	80098bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f9a3 	bl	8009c00 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ba:	e01d      	b.n	80098f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	7bfa      	ldrb	r2, [r7, #15]
 80098c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fdf8 	bl	800a4be <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fa44 	bl	8009d5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d004      	beq.n	80098e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2202      	movs	r2, #2
 80098de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e2:	e009      	b.n	80098f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ec:	e004      	b.n	80098f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f985 	bl	8009c00 <USBD_CtlError>
  }
}
 80098f6:	bf00      	nop
 80098f8:	bf00      	nop
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	885b      	ldrh	r3, [r3, #2]
 8009912:	b2da      	uxtb	r2, r3
 8009914:	4b4c      	ldr	r3, [pc, #304]	; (8009a48 <USBD_SetConfig+0x148>)
 8009916:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009918:	4b4b      	ldr	r3, [pc, #300]	; (8009a48 <USBD_SetConfig+0x148>)
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d905      	bls.n	800992c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f96c 	bl	8009c00 <USBD_CtlError>
    return USBD_FAIL;
 8009928:	2303      	movs	r3, #3
 800992a:	e088      	b.n	8009a3e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b02      	cmp	r3, #2
 8009936:	d002      	beq.n	800993e <USBD_SetConfig+0x3e>
 8009938:	2b03      	cmp	r3, #3
 800993a:	d025      	beq.n	8009988 <USBD_SetConfig+0x88>
 800993c:	e071      	b.n	8009a22 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800993e:	4b42      	ldr	r3, [pc, #264]	; (8009a48 <USBD_SetConfig+0x148>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d01c      	beq.n	8009980 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009946:	4b40      	ldr	r3, [pc, #256]	; (8009a48 <USBD_SetConfig+0x148>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009950:	4b3d      	ldr	r3, [pc, #244]	; (8009a48 <USBD_SetConfig+0x148>)
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff f992 	bl	8008c80 <USBD_SetClassConfig>
 800995c:	4603      	mov	r3, r0
 800995e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d004      	beq.n	8009970 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f949 	bl	8009c00 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800996e:	e065      	b.n	8009a3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f9f3 	bl	8009d5c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2203      	movs	r2, #3
 800997a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800997e:	e05d      	b.n	8009a3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f9eb 	bl	8009d5c <USBD_CtlSendStatus>
      break;
 8009986:	e059      	b.n	8009a3c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009988:	4b2f      	ldr	r3, [pc, #188]	; (8009a48 <USBD_SetConfig+0x148>)
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d112      	bne.n	80099b6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009998:	4b2b      	ldr	r3, [pc, #172]	; (8009a48 <USBD_SetConfig+0x148>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	461a      	mov	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099a2:	4b29      	ldr	r3, [pc, #164]	; (8009a48 <USBD_SetConfig+0x148>)
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7ff f985 	bl	8008cb8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f9d4 	bl	8009d5c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099b4:	e042      	b.n	8009a3c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80099b6:	4b24      	ldr	r3, [pc, #144]	; (8009a48 <USBD_SetConfig+0x148>)
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d02a      	beq.n	8009a1a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7ff f973 	bl	8008cb8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80099d2:	4b1d      	ldr	r3, [pc, #116]	; (8009a48 <USBD_SetConfig+0x148>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099dc:	4b1a      	ldr	r3, [pc, #104]	; (8009a48 <USBD_SetConfig+0x148>)
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff f94c 	bl	8008c80 <USBD_SetClassConfig>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00f      	beq.n	8009a12 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f903 	bl	8009c00 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff f958 	bl	8008cb8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a10:	e014      	b.n	8009a3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f9a2 	bl	8009d5c <USBD_CtlSendStatus>
      break;
 8009a18:	e010      	b.n	8009a3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f99e 	bl	8009d5c <USBD_CtlSendStatus>
      break;
 8009a20:	e00c      	b.n	8009a3c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f8eb 	bl	8009c00 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a2a:	4b07      	ldr	r3, [pc, #28]	; (8009a48 <USBD_SetConfig+0x148>)
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff f941 	bl	8008cb8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a36:	2303      	movs	r3, #3
 8009a38:	73fb      	strb	r3, [r7, #15]
      break;
 8009a3a:	bf00      	nop
  }

  return ret;
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20000194 	.word	0x20000194

08009a4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	88db      	ldrh	r3, [r3, #6]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d004      	beq.n	8009a68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f8cd 	bl	8009c00 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a66:	e023      	b.n	8009ab0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	dc02      	bgt.n	8009a7a <USBD_GetConfig+0x2e>
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dc03      	bgt.n	8009a80 <USBD_GetConfig+0x34>
 8009a78:	e015      	b.n	8009aa6 <USBD_GetConfig+0x5a>
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d00b      	beq.n	8009a96 <USBD_GetConfig+0x4a>
 8009a7e:	e012      	b.n	8009aa6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	3308      	adds	r3, #8
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f927 	bl	8009ce2 <USBD_CtlSendData>
        break;
 8009a94:	e00c      	b.n	8009ab0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f91f 	bl	8009ce2 <USBD_CtlSendData>
        break;
 8009aa4:	e004      	b.n	8009ab0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f8a9 	bl	8009c00 <USBD_CtlError>
        break;
 8009aae:	bf00      	nop
}
 8009ab0:	bf00      	nop
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	3b01      	subs	r3, #1
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d81e      	bhi.n	8009b0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	88db      	ldrh	r3, [r3, #6]
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d004      	beq.n	8009ae2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f890 	bl	8009c00 <USBD_CtlError>
        break;
 8009ae0:	e01a      	b.n	8009b18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d005      	beq.n	8009afe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	f043 0202 	orr.w	r2, r3, #2
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	330c      	adds	r3, #12
 8009b02:	2202      	movs	r2, #2
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f8eb 	bl	8009ce2 <USBD_CtlSendData>
      break;
 8009b0c:	e004      	b.n	8009b18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f875 	bl	8009c00 <USBD_CtlError>
      break;
 8009b16:	bf00      	nop
  }
}
 8009b18:	bf00      	nop
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	885b      	ldrh	r3, [r3, #2]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d106      	bne.n	8009b40 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f90e 	bl	8009d5c <USBD_CtlSendStatus>
  }
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d80b      	bhi.n	8009b78 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	885b      	ldrh	r3, [r3, #2]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d10c      	bne.n	8009b82 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f8f3 	bl	8009d5c <USBD_CtlSendStatus>
      }
      break;
 8009b76:	e004      	b.n	8009b82 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f840 	bl	8009c00 <USBD_CtlError>
      break;
 8009b80:	e000      	b.n	8009b84 <USBD_ClrFeature+0x3c>
      break;
 8009b82:	bf00      	nop
  }
}
 8009b84:	bf00      	nop
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	781a      	ldrb	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	781a      	ldrb	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff fa92 	bl	80090e0 <SWAPBYTE>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f7ff fa85 	bl	80090e0 <SWAPBYTE>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	461a      	mov	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3301      	adds	r3, #1
 8009be2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	3301      	adds	r3, #1
 8009be8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f7ff fa78 	bl	80090e0 <SWAPBYTE>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	80da      	strh	r2, [r3, #6]
}
 8009bf8:	bf00      	nop
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c0a:	2180      	movs	r1, #128	; 0x80
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fbeb 	bl	800a3e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c12:	2100      	movs	r1, #0
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fbe7 	bl	800a3e8 <USBD_LL_StallEP>
}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b086      	sub	sp, #24
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	60f8      	str	r0, [r7, #12]
 8009c2a:	60b9      	str	r1, [r7, #8]
 8009c2c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d036      	beq.n	8009ca6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009c3c:	6938      	ldr	r0, [r7, #16]
 8009c3e:	f000 f836 	bl	8009cae <USBD_GetLen>
 8009c42:	4603      	mov	r3, r0
 8009c44:	3301      	adds	r3, #1
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	005b      	lsls	r3, r3, #1
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c50:	7dfb      	ldrb	r3, [r7, #23]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	4413      	add	r3, r2
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	7812      	ldrb	r2, [r2, #0]
 8009c5a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	4413      	add	r3, r2
 8009c68:	2203      	movs	r2, #3
 8009c6a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c72:	e013      	b.n	8009c9c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009c74:	7dfb      	ldrb	r3, [r7, #23]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	4413      	add	r3, r2
 8009c7a:	693a      	ldr	r2, [r7, #16]
 8009c7c:	7812      	ldrb	r2, [r2, #0]
 8009c7e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	3301      	adds	r3, #1
 8009c84:	613b      	str	r3, [r7, #16]
    idx++;
 8009c86:	7dfb      	ldrb	r3, [r7, #23]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	4413      	add	r3, r2
 8009c92:	2200      	movs	r2, #0
 8009c94:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1e7      	bne.n	8009c74 <USBD_GetString+0x52>
 8009ca4:	e000      	b.n	8009ca8 <USBD_GetString+0x86>
    return;
 8009ca6:	bf00      	nop
  }
}
 8009ca8:	3718      	adds	r7, #24
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b085      	sub	sp, #20
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009cbe:	e005      	b.n	8009ccc <USBD_GetLen+0x1e>
  {
    len++;
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1f5      	bne.n	8009cc0 <USBD_GetLen+0x12>
  }

  return len;
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	60b9      	str	r1, [r7, #8]
 8009cec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	2100      	movs	r1, #0
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f000 fbf7 	bl	800a4fc <USBD_LL_Transmit>

  return USBD_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	2100      	movs	r1, #0
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 fbe6 	bl	800a4fc <USBD_LL_Transmit>

  return USBD_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 fbf6 	bl	800a53e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2204      	movs	r2, #4
 8009d68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	2200      	movs	r2, #0
 8009d70:	2100      	movs	r1, #0
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fbc2 	bl	800a4fc <USBD_LL_Transmit>

  return USBD_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b082      	sub	sp, #8
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2205      	movs	r2, #5
 8009d8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d92:	2300      	movs	r3, #0
 8009d94:	2200      	movs	r2, #0
 8009d96:	2100      	movs	r1, #0
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fbd0 	bl	800a53e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 8009dac:	2200      	movs	r2, #0
 8009dae:	490e      	ldr	r1, [pc, #56]	; (8009de8 <MX_USB_Device_Init+0x40>)
 8009db0:	480e      	ldr	r0, [pc, #56]	; (8009dec <MX_USB_Device_Init+0x44>)
 8009db2:	f7fe fef7 	bl	8008ba4 <USBD_Init>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009dbc:	f7f7 fb05 	bl	80013ca <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 8009dc0:	490b      	ldr	r1, [pc, #44]	; (8009df0 <MX_USB_Device_Init+0x48>)
 8009dc2:	480a      	ldr	r0, [pc, #40]	; (8009dec <MX_USB_Device_Init+0x44>)
 8009dc4:	f7fe ff1e 	bl	8008c04 <USBD_RegisterClass>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009dce:	f7f7 fafc 	bl	80013ca <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009dd2:	4806      	ldr	r0, [pc, #24]	; (8009dec <MX_USB_Device_Init+0x44>)
 8009dd4:	f7fe ff3d 	bl	8008c52 <USBD_Start>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <MX_USB_Device_Init+0x3a>
    Error_Handler();
 8009dde:	f7f7 faf4 	bl	80013ca <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009de2:	bf00      	nop
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	20000118 	.word	0x20000118
 8009dec:	20000270 	.word	0x20000270
 8009df0:	20000010 	.word	0x20000010

08009df4 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	6039      	str	r1, [r7, #0]
 8009dfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	2212      	movs	r2, #18
 8009e04:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 8009e06:	4b03      	ldr	r3, [pc, #12]	; (8009e14 <USBD_HID_DeviceDescriptor+0x20>)
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	20000138 	.word	0x20000138

08009e18 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	6039      	str	r1, [r7, #0]
 8009e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2204      	movs	r2, #4
 8009e28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e2a:	4b03      	ldr	r3, [pc, #12]	; (8009e38 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	2000014c 	.word	0x2000014c

08009e3c <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4603      	mov	r3, r0
 8009e44:	6039      	str	r1, [r7, #0]
 8009e46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e48:	79fb      	ldrb	r3, [r7, #7]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d105      	bne.n	8009e5a <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	4907      	ldr	r1, [pc, #28]	; (8009e70 <USBD_HID_ProductStrDescriptor+0x34>)
 8009e52:	4808      	ldr	r0, [pc, #32]	; (8009e74 <USBD_HID_ProductStrDescriptor+0x38>)
 8009e54:	f7ff fee5 	bl	8009c22 <USBD_GetString>
 8009e58:	e004      	b.n	8009e64 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	4904      	ldr	r1, [pc, #16]	; (8009e70 <USBD_HID_ProductStrDescriptor+0x34>)
 8009e5e:	4805      	ldr	r0, [pc, #20]	; (8009e74 <USBD_HID_ProductStrDescriptor+0x38>)
 8009e60:	f7ff fedf 	bl	8009c22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e64:	4b02      	ldr	r3, [pc, #8]	; (8009e70 <USBD_HID_ProductStrDescriptor+0x34>)
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20000540 	.word	0x20000540
 8009e74:	0800a924 	.word	0x0800a924

08009e78 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	4603      	mov	r3, r0
 8009e80:	6039      	str	r1, [r7, #0]
 8009e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	4904      	ldr	r1, [pc, #16]	; (8009e98 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 8009e88:	4804      	ldr	r0, [pc, #16]	; (8009e9c <USBD_HID_ManufacturerStrDescriptor+0x24>)
 8009e8a:	f7ff feca 	bl	8009c22 <USBD_GetString>
  return USBD_StrDesc;
 8009e8e:	4b02      	ldr	r3, [pc, #8]	; (8009e98 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20000540 	.word	0x20000540
 8009e9c:	0800a93c 	.word	0x0800a93c

08009ea0 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	6039      	str	r1, [r7, #0]
 8009eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	221a      	movs	r2, #26
 8009eb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009eb2:	f000 f843 	bl	8009f3c <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009eb6:	4b02      	ldr	r3, [pc, #8]	; (8009ec0 <USBD_HID_SerialStrDescriptor+0x20>)
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	20000150 	.word	0x20000150

08009ec4 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	6039      	str	r1, [r7, #0]
 8009ece:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ed0:	79fb      	ldrb	r3, [r7, #7]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d105      	bne.n	8009ee2 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	4907      	ldr	r1, [pc, #28]	; (8009ef8 <USBD_HID_ConfigStrDescriptor+0x34>)
 8009eda:	4808      	ldr	r0, [pc, #32]	; (8009efc <USBD_HID_ConfigStrDescriptor+0x38>)
 8009edc:	f7ff fea1 	bl	8009c22 <USBD_GetString>
 8009ee0:	e004      	b.n	8009eec <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	4904      	ldr	r1, [pc, #16]	; (8009ef8 <USBD_HID_ConfigStrDescriptor+0x34>)
 8009ee6:	4805      	ldr	r0, [pc, #20]	; (8009efc <USBD_HID_ConfigStrDescriptor+0x38>)
 8009ee8:	f7ff fe9b 	bl	8009c22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009eec:	4b02      	ldr	r3, [pc, #8]	; (8009ef8 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20000540 	.word	0x20000540
 8009efc:	0800a950 	.word	0x0800a950

08009f00 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4603      	mov	r3, r0
 8009f08:	6039      	str	r1, [r7, #0]
 8009f0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f0c:	79fb      	ldrb	r3, [r7, #7]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d105      	bne.n	8009f1e <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	4907      	ldr	r1, [pc, #28]	; (8009f34 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8009f16:	4808      	ldr	r0, [pc, #32]	; (8009f38 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8009f18:	f7ff fe83 	bl	8009c22 <USBD_GetString>
 8009f1c:	e004      	b.n	8009f28 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	4904      	ldr	r1, [pc, #16]	; (8009f34 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8009f22:	4805      	ldr	r0, [pc, #20]	; (8009f38 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8009f24:	f7ff fe7d 	bl	8009c22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f28:	4b02      	ldr	r3, [pc, #8]	; (8009f34 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	20000540 	.word	0x20000540
 8009f38:	0800a95c 	.word	0x0800a95c

08009f3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f42:	4b0f      	ldr	r3, [pc, #60]	; (8009f80 <Get_SerialNum+0x44>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f48:	4b0e      	ldr	r3, [pc, #56]	; (8009f84 <Get_SerialNum+0x48>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f4e:	4b0e      	ldr	r3, [pc, #56]	; (8009f88 <Get_SerialNum+0x4c>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4413      	add	r3, r2
 8009f5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d009      	beq.n	8009f76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f62:	2208      	movs	r2, #8
 8009f64:	4909      	ldr	r1, [pc, #36]	; (8009f8c <Get_SerialNum+0x50>)
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f000 f814 	bl	8009f94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f6c:	2204      	movs	r2, #4
 8009f6e:	4908      	ldr	r1, [pc, #32]	; (8009f90 <Get_SerialNum+0x54>)
 8009f70:	68b8      	ldr	r0, [r7, #8]
 8009f72:	f000 f80f 	bl	8009f94 <IntToUnicode>
  }
}
 8009f76:	bf00      	nop
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	1fff7590 	.word	0x1fff7590
 8009f84:	1fff7594 	.word	0x1fff7594
 8009f88:	1fff7598 	.word	0x1fff7598
 8009f8c:	20000152 	.word	0x20000152
 8009f90:	20000162 	.word	0x20000162

08009f94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	75fb      	strb	r3, [r7, #23]
 8009faa:	e027      	b.n	8009ffc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	0f1b      	lsrs	r3, r3, #28
 8009fb0:	2b09      	cmp	r3, #9
 8009fb2:	d80b      	bhi.n	8009fcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	0f1b      	lsrs	r3, r3, #28
 8009fb8:	b2da      	uxtb	r2, r3
 8009fba:	7dfb      	ldrb	r3, [r7, #23]
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	440b      	add	r3, r1
 8009fc4:	3230      	adds	r2, #48	; 0x30
 8009fc6:	b2d2      	uxtb	r2, r2
 8009fc8:	701a      	strb	r2, [r3, #0]
 8009fca:	e00a      	b.n	8009fe2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	0f1b      	lsrs	r3, r3, #28
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	7dfb      	ldrb	r3, [r7, #23]
 8009fd4:	005b      	lsls	r3, r3, #1
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	440b      	add	r3, r1
 8009fdc:	3237      	adds	r2, #55	; 0x37
 8009fde:	b2d2      	uxtb	r2, r2
 8009fe0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	011b      	lsls	r3, r3, #4
 8009fe6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	005b      	lsls	r3, r3, #1
 8009fec:	3301      	adds	r3, #1
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	75fb      	strb	r3, [r7, #23]
 8009ffc:	7dfa      	ldrb	r2, [r7, #23]
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
 800a000:	429a      	cmp	r2, r3
 800a002:	d3d3      	bcc.n	8009fac <IntToUnicode+0x18>
  }
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	371c      	adds	r7, #28
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <LL_AHB2_GRP1_EnableClock>:
{
 800a012:	b480      	push	{r7}
 800a014:	b085      	sub	sp, #20
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a01a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a01e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a020:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4313      	orrs	r3, r2
 800a028:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a02a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a02e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4013      	ands	r3, r2
 800a034:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a036:	68fb      	ldr	r3, [r7, #12]
}
 800a038:	bf00      	nop
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <LL_APB1_GRP1_EnableClock>:
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a04c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a050:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4313      	orrs	r3, r2
 800a05a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a05c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a060:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4013      	ands	r3, r2
 800a066:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a068:	68fb      	ldr	r3, [r7, #12]
}
 800a06a:	bf00      	nop
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
	...

0800a078 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b09c      	sub	sp, #112	; 0x70
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a080:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a084:	2200      	movs	r2, #0
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	605a      	str	r2, [r3, #4]
 800a08a:	609a      	str	r2, [r3, #8]
 800a08c:	60da      	str	r2, [r3, #12]
 800a08e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a090:	f107 030c 	add.w	r3, r7, #12
 800a094:	2250      	movs	r2, #80	; 0x50
 800a096:	2100      	movs	r1, #0
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 fb15 	bl	800a6c8 <memset>
  if(pcdHandle->Instance==USB)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a23      	ldr	r2, [pc, #140]	; (800a130 <HAL_PCD_MspInit+0xb8>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d13e      	bne.n	800a126 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a0a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800a0ae:	2318      	movs	r3, #24
 800a0b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800a0b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a0b6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800a0b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800a0be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a0c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800a0c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0c8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a0ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a0ce:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a0d0:	f107 030c 	add.w	r3, r7, #12
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fa ff65 	bl	8004fa4 <HAL_RCCEx_PeriphCLKConfig>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800a0e0:	f7f7 f973 	bl	80013ca <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0e4:	2001      	movs	r0, #1
 800a0e6:	f7ff ff94 	bl	800a012 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a0ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a0ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0f0:	2302      	movs	r3, #2
 800a0f2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a0fc:	230a      	movs	r3, #10
 800a0fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a100:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a104:	4619      	mov	r1, r3
 800a106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a10a:	f7f7 fd5b 	bl	8001bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a10e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a112:	f7ff ff97 	bl	800a044 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a116:	2200      	movs	r2, #0
 800a118:	2100      	movs	r1, #0
 800a11a:	2014      	movs	r0, #20
 800a11c:	f7f7 fd1d 	bl	8001b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a120:	2014      	movs	r0, #20
 800a122:	f7f7 fd34 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a126:	bf00      	nop
 800a128:	3770      	adds	r7, #112	; 0x70
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	40006800 	.word	0x40006800

0800a134 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a148:	4619      	mov	r1, r3
 800a14a:	4610      	mov	r0, r2
 800a14c:	f7fe fdcc 	bl	8008ce8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a150:	bf00      	nop
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	460b      	mov	r3, r1
 800a162:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a16a:	78fa      	ldrb	r2, [r7, #3]
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	00db      	lsls	r3, r3, #3
 800a176:	440b      	add	r3, r1
 800a178:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	78fb      	ldrb	r3, [r7, #3]
 800a180:	4619      	mov	r1, r3
 800a182:	f7fe fe06 	bl	8008d92 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a186:	bf00      	nop
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a1a0:	78fa      	ldrb	r2, [r7, #3]
 800a1a2:	6879      	ldr	r1, [r7, #4]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	00db      	lsls	r3, r3, #3
 800a1ac:	440b      	add	r3, r1
 800a1ae:	333c      	adds	r3, #60	; 0x3c
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	78fb      	ldrb	r3, [r7, #3]
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	f7fe fe4f 	bl	8008e58 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7fe ff63 	bl	800909c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a1d6:	bf00      	nop
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d001      	beq.n	800a1f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a1f2:	f7f7 f8ea 	bl	80013ca <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a1fc:	7bfa      	ldrb	r2, [r7, #15]
 800a1fe:	4611      	mov	r1, r2
 800a200:	4618      	mov	r0, r3
 800a202:	f7fe ff0d 	bl	8009020 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fe feb9 	bl	8008f84 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a212:	bf00      	nop
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fe ff08 	bl	8009040 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d005      	beq.n	800a244 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a238:	4b04      	ldr	r3, [pc, #16]	; (800a24c <HAL_PCD_SuspendCallback+0x30>)
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	4a03      	ldr	r2, [pc, #12]	; (800a24c <HAL_PCD_SuspendCallback+0x30>)
 800a23e:	f043 0306 	orr.w	r3, r3, #6
 800a242:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	e000ed00 	.word	0xe000ed00

0800a250 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	699b      	ldr	r3, [r3, #24]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d007      	beq.n	800a270 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a260:	4b08      	ldr	r3, [pc, #32]	; (800a284 <HAL_PCD_ResumeCallback+0x34>)
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	4a07      	ldr	r2, [pc, #28]	; (800a284 <HAL_PCD_ResumeCallback+0x34>)
 800a266:	f023 0306 	bic.w	r3, r3, #6
 800a26a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a26c:	f000 f9d6 	bl	800a61c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fef8 	bl	800906c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	e000ed00 	.word	0xe000ed00

0800a288 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a290:	4a23      	ldr	r2, [pc, #140]	; (800a320 <USBD_LL_Init+0x98>)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a21      	ldr	r2, [pc, #132]	; (800a320 <USBD_LL_Init+0x98>)
 800a29c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800a2a0:	f7f9 fb62 	bl	8003968 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800a2a4:	4b1e      	ldr	r3, [pc, #120]	; (800a320 <USBD_LL_Init+0x98>)
 800a2a6:	4a1f      	ldr	r2, [pc, #124]	; (800a324 <USBD_LL_Init+0x9c>)
 800a2a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a2aa:	4b1d      	ldr	r3, [pc, #116]	; (800a320 <USBD_LL_Init+0x98>)
 800a2ac:	2208      	movs	r2, #8
 800a2ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a2b0:	4b1b      	ldr	r3, [pc, #108]	; (800a320 <USBD_LL_Init+0x98>)
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2b6:	4b1a      	ldr	r3, [pc, #104]	; (800a320 <USBD_LL_Init+0x98>)
 800a2b8:	2202      	movs	r2, #2
 800a2ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a2bc:	4b18      	ldr	r3, [pc, #96]	; (800a320 <USBD_LL_Init+0x98>)
 800a2be:	2200      	movs	r2, #0
 800a2c0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a2c2:	4b17      	ldr	r3, [pc, #92]	; (800a320 <USBD_LL_Init+0x98>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a2c8:	4b15      	ldr	r3, [pc, #84]	; (800a320 <USBD_LL_Init+0x98>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a2ce:	4b14      	ldr	r3, [pc, #80]	; (800a320 <USBD_LL_Init+0x98>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a2d4:	4812      	ldr	r0, [pc, #72]	; (800a320 <USBD_LL_Init+0x98>)
 800a2d6:	f7f7 fe0d 	bl	8001ef4 <HAL_PCD_Init>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800a2e0:	f7f7 f873 	bl	80013ca <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2ea:	2318      	movs	r3, #24
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	f7f9 faae 	bl	8003850 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2fa:	2358      	movs	r3, #88	; 0x58
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	2180      	movs	r1, #128	; 0x80
 800a300:	f7f9 faa6 	bl	8003850 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a30a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a30e:	2200      	movs	r2, #0
 800a310:	2181      	movs	r1, #129	; 0x81
 800a312:	f7f9 fa9d 	bl	8003850 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20000740 	.word	0x20000740
 800a324:	40006800 	.word	0x40006800

0800a328 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a33e:	4618      	mov	r0, r3
 800a340:	f7f7 febd 	bl	80020be <HAL_PCD_Start>
 800a344:	4603      	mov	r3, r0
 800a346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a348:	7bfb      	ldrb	r3, [r7, #15]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 f96c 	bl	800a628 <USBD_Get_USB_Status>
 800a350:	4603      	mov	r3, r0
 800a352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a354:	7bbb      	ldrb	r3, [r7, #14]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b084      	sub	sp, #16
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	4608      	mov	r0, r1
 800a368:	4611      	mov	r1, r2
 800a36a:	461a      	mov	r2, r3
 800a36c:	4603      	mov	r3, r0
 800a36e:	70fb      	strb	r3, [r7, #3]
 800a370:	460b      	mov	r3, r1
 800a372:	70bb      	strb	r3, [r7, #2]
 800a374:	4613      	mov	r3, r2
 800a376:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a378:	2300      	movs	r3, #0
 800a37a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a386:	78bb      	ldrb	r3, [r7, #2]
 800a388:	883a      	ldrh	r2, [r7, #0]
 800a38a:	78f9      	ldrb	r1, [r7, #3]
 800a38c:	f7f8 f805 	bl	800239a <HAL_PCD_EP_Open>
 800a390:	4603      	mov	r3, r0
 800a392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	4618      	mov	r0, r3
 800a398:	f000 f946 	bl	800a628 <USBD_Get_USB_Status>
 800a39c:	4603      	mov	r3, r0
 800a39e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3c4:	78fa      	ldrb	r2, [r7, #3]
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7f8 f84c 	bl	8002466 <HAL_PCD_EP_Close>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 f927 	bl	800a628 <USBD_Get_USB_Status>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a402:	78fa      	ldrb	r2, [r7, #3]
 800a404:	4611      	mov	r1, r2
 800a406:	4618      	mov	r0, r3
 800a408:	f7f8 f8f5 	bl	80025f6 <HAL_PCD_EP_SetStall>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a410:	7bfb      	ldrb	r3, [r7, #15]
 800a412:	4618      	mov	r0, r3
 800a414:	f000 f908 	bl	800a628 <USBD_Get_USB_Status>
 800a418:	4603      	mov	r3, r0
 800a41a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a41c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b084      	sub	sp, #16
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	460b      	mov	r3, r1
 800a430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a440:	78fa      	ldrb	r2, [r7, #3]
 800a442:	4611      	mov	r1, r2
 800a444:	4618      	mov	r0, r3
 800a446:	f7f8 f928 	bl	800269a <HAL_PCD_EP_ClrStall>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	4618      	mov	r0, r3
 800a452:	f000 f8e9 	bl	800a628 <USBD_Get_USB_Status>
 800a456:	4603      	mov	r3, r0
 800a458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a476:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	da0c      	bge.n	800a49a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a486:	68f9      	ldr	r1, [r7, #12]
 800a488:	1c5a      	adds	r2, r3, #1
 800a48a:	4613      	mov	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4413      	add	r3, r2
 800a490:	00db      	lsls	r3, r3, #3
 800a492:	440b      	add	r3, r1
 800a494:	3302      	adds	r3, #2
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	e00b      	b.n	800a4b2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a49a:	78fb      	ldrb	r3, [r7, #3]
 800a49c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4a0:	68f9      	ldr	r1, [r7, #12]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	440b      	add	r3, r1
 800a4ac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a4b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4d8:	78fa      	ldrb	r2, [r7, #3]
 800a4da:	4611      	mov	r1, r2
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7f7 ff37 	bl	8002350 <HAL_PCD_SetAddress>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 f89d 	bl	800a628 <USBD_Get_USB_Status>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	607a      	str	r2, [r7, #4]
 800a506:	603b      	str	r3, [r7, #0]
 800a508:	460b      	mov	r3, r1
 800a50a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a51a:	7af9      	ldrb	r1, [r7, #11]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	f7f8 f826 	bl	8002570 <HAL_PCD_EP_Transmit>
 800a524:	4603      	mov	r3, r0
 800a526:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 f87c 	bl	800a628 <USBD_Get_USB_Status>
 800a530:	4603      	mov	r3, r0
 800a532:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a534:	7dbb      	ldrb	r3, [r7, #22]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3718      	adds	r7, #24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b086      	sub	sp, #24
 800a542:	af00      	add	r7, sp, #0
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	603b      	str	r3, [r7, #0]
 800a54a:	460b      	mov	r3, r1
 800a54c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a55c:	7af9      	ldrb	r1, [r7, #11]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	f7f7 ffc8 	bl	80024f6 <HAL_PCD_EP_Receive>
 800a566:	4603      	mov	r3, r0
 800a568:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 f85b 	bl	800a628 <USBD_Get_USB_Status>
 800a572:	4603      	mov	r3, r0
 800a574:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a576:	7dbb      	ldrb	r3, [r7, #22]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3718      	adds	r7, #24
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	460b      	mov	r3, r1
 800a58a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a58c:	78fb      	ldrb	r3, [r7, #3]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d002      	beq.n	800a598 <HAL_PCDEx_LPM_Callback+0x18>
 800a592:	2b01      	cmp	r3, #1
 800a594:	d013      	beq.n	800a5be <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a596:	e023      	b.n	800a5e0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d007      	beq.n	800a5b0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a5a0:	f000 f83c 	bl	800a61c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5a4:	4b10      	ldr	r3, [pc, #64]	; (800a5e8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	4a0f      	ldr	r2, [pc, #60]	; (800a5e8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a5aa:	f023 0306 	bic.w	r3, r3, #6
 800a5ae:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fe fd58 	bl	800906c <USBD_LL_Resume>
    break;
 800a5bc:	e010      	b.n	800a5e0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe fd3b 	bl	8009040 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d005      	beq.n	800a5de <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5d2:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	4a04      	ldr	r2, [pc, #16]	; (800a5e8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a5d8:	f043 0306 	orr.w	r3, r3, #6
 800a5dc:	6113      	str	r3, [r2, #16]
    break;
 800a5de:	bf00      	nop
}
 800a5e0:	bf00      	nop
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	e000ed00 	.word	0xe000ed00

0800a5ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a5f4:	4b03      	ldr	r3, [pc, #12]	; (800a604 <USBD_static_malloc+0x18>)
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	370c      	adds	r7, #12
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	20000198 	.word	0x20000198

0800a608 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]

}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a620:	f7f6 fe4a 	bl	80012b8 <SystemClock_Config>
}
 800a624:	bf00      	nop
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a632:	2300      	movs	r3, #0
 800a634:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a636:	79fb      	ldrb	r3, [r7, #7]
 800a638:	2b03      	cmp	r3, #3
 800a63a:	d817      	bhi.n	800a66c <USBD_Get_USB_Status+0x44>
 800a63c:	a201      	add	r2, pc, #4	; (adr r2, 800a644 <USBD_Get_USB_Status+0x1c>)
 800a63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a642:	bf00      	nop
 800a644:	0800a655 	.word	0x0800a655
 800a648:	0800a65b 	.word	0x0800a65b
 800a64c:	0800a661 	.word	0x0800a661
 800a650:	0800a667 	.word	0x0800a667
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
    break;
 800a658:	e00b      	b.n	800a672 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a65a:	2303      	movs	r3, #3
 800a65c:	73fb      	strb	r3, [r7, #15]
    break;
 800a65e:	e008      	b.n	800a672 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a660:	2301      	movs	r3, #1
 800a662:	73fb      	strb	r3, [r7, #15]
    break;
 800a664:	e005      	b.n	800a672 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a666:	2303      	movs	r3, #3
 800a668:	73fb      	strb	r3, [r7, #15]
    break;
 800a66a:	e002      	b.n	800a672 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a66c:	2303      	movs	r3, #3
 800a66e:	73fb      	strb	r3, [r7, #15]
    break;
 800a670:	bf00      	nop
  }
  return usb_status;
 800a672:	7bfb      	ldrb	r3, [r7, #15]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3714      	adds	r7, #20
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <__libc_init_array>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	4d0d      	ldr	r5, [pc, #52]	; (800a6b8 <__libc_init_array+0x38>)
 800a684:	4c0d      	ldr	r4, [pc, #52]	; (800a6bc <__libc_init_array+0x3c>)
 800a686:	1b64      	subs	r4, r4, r5
 800a688:	10a4      	asrs	r4, r4, #2
 800a68a:	2600      	movs	r6, #0
 800a68c:	42a6      	cmp	r6, r4
 800a68e:	d109      	bne.n	800a6a4 <__libc_init_array+0x24>
 800a690:	4d0b      	ldr	r5, [pc, #44]	; (800a6c0 <__libc_init_array+0x40>)
 800a692:	4c0c      	ldr	r4, [pc, #48]	; (800a6c4 <__libc_init_array+0x44>)
 800a694:	f000 f924 	bl	800a8e0 <_init>
 800a698:	1b64      	subs	r4, r4, r5
 800a69a:	10a4      	asrs	r4, r4, #2
 800a69c:	2600      	movs	r6, #0
 800a69e:	42a6      	cmp	r6, r4
 800a6a0:	d105      	bne.n	800a6ae <__libc_init_array+0x2e>
 800a6a2:	bd70      	pop	{r4, r5, r6, pc}
 800a6a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6a8:	4798      	blx	r3
 800a6aa:	3601      	adds	r6, #1
 800a6ac:	e7ee      	b.n	800a68c <__libc_init_array+0xc>
 800a6ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b2:	4798      	blx	r3
 800a6b4:	3601      	adds	r6, #1
 800a6b6:	e7f2      	b.n	800a69e <__libc_init_array+0x1e>
 800a6b8:	0800a9ec 	.word	0x0800a9ec
 800a6bc:	0800a9ec 	.word	0x0800a9ec
 800a6c0:	0800a9ec 	.word	0x0800a9ec
 800a6c4:	0800a9f0 	.word	0x0800a9f0

0800a6c8 <memset>:
 800a6c8:	4402      	add	r2, r0
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d100      	bne.n	800a6d2 <memset+0xa>
 800a6d0:	4770      	bx	lr
 800a6d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a6d6:	e7f9      	b.n	800a6cc <memset+0x4>

0800a6d8 <ceil>:
 800a6d8:	ec51 0b10 	vmov	r0, r1, d0
 800a6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a6e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a6e8:	2e13      	cmp	r6, #19
 800a6ea:	ee10 5a10 	vmov	r5, s0
 800a6ee:	ee10 8a10 	vmov	r8, s0
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	dc30      	bgt.n	800a758 <ceil+0x80>
 800a6f6:	2e00      	cmp	r6, #0
 800a6f8:	da12      	bge.n	800a720 <ceil+0x48>
 800a6fa:	a335      	add	r3, pc, #212	; (adr r3, 800a7d0 <ceil+0xf8>)
 800a6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a700:	f7f5 fd44 	bl	800018c <__adddf3>
 800a704:	2200      	movs	r2, #0
 800a706:	2300      	movs	r3, #0
 800a708:	f7f6 f986 	bl	8000a18 <__aeabi_dcmpgt>
 800a70c:	b128      	cbz	r0, 800a71a <ceil+0x42>
 800a70e:	2c00      	cmp	r4, #0
 800a710:	db55      	blt.n	800a7be <ceil+0xe6>
 800a712:	432c      	orrs	r4, r5
 800a714:	d057      	beq.n	800a7c6 <ceil+0xee>
 800a716:	4c30      	ldr	r4, [pc, #192]	; (800a7d8 <ceil+0x100>)
 800a718:	2500      	movs	r5, #0
 800a71a:	4621      	mov	r1, r4
 800a71c:	4628      	mov	r0, r5
 800a71e:	e025      	b.n	800a76c <ceil+0x94>
 800a720:	4f2e      	ldr	r7, [pc, #184]	; (800a7dc <ceil+0x104>)
 800a722:	4137      	asrs	r7, r6
 800a724:	ea01 0307 	and.w	r3, r1, r7
 800a728:	4303      	orrs	r3, r0
 800a72a:	d01f      	beq.n	800a76c <ceil+0x94>
 800a72c:	a328      	add	r3, pc, #160	; (adr r3, 800a7d0 <ceil+0xf8>)
 800a72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a732:	f7f5 fd2b 	bl	800018c <__adddf3>
 800a736:	2200      	movs	r2, #0
 800a738:	2300      	movs	r3, #0
 800a73a:	f7f6 f96d 	bl	8000a18 <__aeabi_dcmpgt>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d0eb      	beq.n	800a71a <ceil+0x42>
 800a742:	2c00      	cmp	r4, #0
 800a744:	bfc2      	ittt	gt
 800a746:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800a74a:	fa43 f606 	asrgt.w	r6, r3, r6
 800a74e:	19a4      	addgt	r4, r4, r6
 800a750:	ea24 0407 	bic.w	r4, r4, r7
 800a754:	2500      	movs	r5, #0
 800a756:	e7e0      	b.n	800a71a <ceil+0x42>
 800a758:	2e33      	cmp	r6, #51	; 0x33
 800a75a:	dd0b      	ble.n	800a774 <ceil+0x9c>
 800a75c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a760:	d104      	bne.n	800a76c <ceil+0x94>
 800a762:	ee10 2a10 	vmov	r2, s0
 800a766:	460b      	mov	r3, r1
 800a768:	f7f5 fd10 	bl	800018c <__adddf3>
 800a76c:	ec41 0b10 	vmov	d0, r0, r1
 800a770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a774:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a778:	f04f 33ff 	mov.w	r3, #4294967295
 800a77c:	fa23 f707 	lsr.w	r7, r3, r7
 800a780:	4207      	tst	r7, r0
 800a782:	d0f3      	beq.n	800a76c <ceil+0x94>
 800a784:	a312      	add	r3, pc, #72	; (adr r3, 800a7d0 <ceil+0xf8>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fcff 	bl	800018c <__adddf3>
 800a78e:	2200      	movs	r2, #0
 800a790:	2300      	movs	r3, #0
 800a792:	f7f6 f941 	bl	8000a18 <__aeabi_dcmpgt>
 800a796:	2800      	cmp	r0, #0
 800a798:	d0bf      	beq.n	800a71a <ceil+0x42>
 800a79a:	2c00      	cmp	r4, #0
 800a79c:	dd02      	ble.n	800a7a4 <ceil+0xcc>
 800a79e:	2e14      	cmp	r6, #20
 800a7a0:	d103      	bne.n	800a7aa <ceil+0xd2>
 800a7a2:	3401      	adds	r4, #1
 800a7a4:	ea25 0507 	bic.w	r5, r5, r7
 800a7a8:	e7b7      	b.n	800a71a <ceil+0x42>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a7b0:	fa03 f606 	lsl.w	r6, r3, r6
 800a7b4:	4435      	add	r5, r6
 800a7b6:	4545      	cmp	r5, r8
 800a7b8:	bf38      	it	cc
 800a7ba:	18e4      	addcc	r4, r4, r3
 800a7bc:	e7f2      	b.n	800a7a4 <ceil+0xcc>
 800a7be:	2500      	movs	r5, #0
 800a7c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a7c4:	e7a9      	b.n	800a71a <ceil+0x42>
 800a7c6:	4625      	mov	r5, r4
 800a7c8:	e7a7      	b.n	800a71a <ceil+0x42>
 800a7ca:	bf00      	nop
 800a7cc:	f3af 8000 	nop.w
 800a7d0:	8800759c 	.word	0x8800759c
 800a7d4:	7e37e43c 	.word	0x7e37e43c
 800a7d8:	3ff00000 	.word	0x3ff00000
 800a7dc:	000fffff 	.word	0x000fffff

0800a7e0 <floor>:
 800a7e0:	ec51 0b10 	vmov	r0, r1, d0
 800a7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a7ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a7f0:	2e13      	cmp	r6, #19
 800a7f2:	ee10 5a10 	vmov	r5, s0
 800a7f6:	ee10 8a10 	vmov	r8, s0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	dc32      	bgt.n	800a864 <floor+0x84>
 800a7fe:	2e00      	cmp	r6, #0
 800a800:	da14      	bge.n	800a82c <floor+0x4c>
 800a802:	a333      	add	r3, pc, #204	; (adr r3, 800a8d0 <floor+0xf0>)
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	f7f5 fcc0 	bl	800018c <__adddf3>
 800a80c:	2200      	movs	r2, #0
 800a80e:	2300      	movs	r3, #0
 800a810:	f7f6 f902 	bl	8000a18 <__aeabi_dcmpgt>
 800a814:	b138      	cbz	r0, 800a826 <floor+0x46>
 800a816:	2c00      	cmp	r4, #0
 800a818:	da57      	bge.n	800a8ca <floor+0xea>
 800a81a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a81e:	431d      	orrs	r5, r3
 800a820:	d001      	beq.n	800a826 <floor+0x46>
 800a822:	4c2d      	ldr	r4, [pc, #180]	; (800a8d8 <floor+0xf8>)
 800a824:	2500      	movs	r5, #0
 800a826:	4621      	mov	r1, r4
 800a828:	4628      	mov	r0, r5
 800a82a:	e025      	b.n	800a878 <floor+0x98>
 800a82c:	4f2b      	ldr	r7, [pc, #172]	; (800a8dc <floor+0xfc>)
 800a82e:	4137      	asrs	r7, r6
 800a830:	ea01 0307 	and.w	r3, r1, r7
 800a834:	4303      	orrs	r3, r0
 800a836:	d01f      	beq.n	800a878 <floor+0x98>
 800a838:	a325      	add	r3, pc, #148	; (adr r3, 800a8d0 <floor+0xf0>)
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f7f5 fca5 	bl	800018c <__adddf3>
 800a842:	2200      	movs	r2, #0
 800a844:	2300      	movs	r3, #0
 800a846:	f7f6 f8e7 	bl	8000a18 <__aeabi_dcmpgt>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d0eb      	beq.n	800a826 <floor+0x46>
 800a84e:	2c00      	cmp	r4, #0
 800a850:	bfbe      	ittt	lt
 800a852:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a856:	fa43 f606 	asrlt.w	r6, r3, r6
 800a85a:	19a4      	addlt	r4, r4, r6
 800a85c:	ea24 0407 	bic.w	r4, r4, r7
 800a860:	2500      	movs	r5, #0
 800a862:	e7e0      	b.n	800a826 <floor+0x46>
 800a864:	2e33      	cmp	r6, #51	; 0x33
 800a866:	dd0b      	ble.n	800a880 <floor+0xa0>
 800a868:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a86c:	d104      	bne.n	800a878 <floor+0x98>
 800a86e:	ee10 2a10 	vmov	r2, s0
 800a872:	460b      	mov	r3, r1
 800a874:	f7f5 fc8a 	bl	800018c <__adddf3>
 800a878:	ec41 0b10 	vmov	d0, r0, r1
 800a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a880:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a884:	f04f 33ff 	mov.w	r3, #4294967295
 800a888:	fa23 f707 	lsr.w	r7, r3, r7
 800a88c:	4207      	tst	r7, r0
 800a88e:	d0f3      	beq.n	800a878 <floor+0x98>
 800a890:	a30f      	add	r3, pc, #60	; (adr r3, 800a8d0 <floor+0xf0>)
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	f7f5 fc79 	bl	800018c <__adddf3>
 800a89a:	2200      	movs	r2, #0
 800a89c:	2300      	movs	r3, #0
 800a89e:	f7f6 f8bb 	bl	8000a18 <__aeabi_dcmpgt>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d0bf      	beq.n	800a826 <floor+0x46>
 800a8a6:	2c00      	cmp	r4, #0
 800a8a8:	da02      	bge.n	800a8b0 <floor+0xd0>
 800a8aa:	2e14      	cmp	r6, #20
 800a8ac:	d103      	bne.n	800a8b6 <floor+0xd6>
 800a8ae:	3401      	adds	r4, #1
 800a8b0:	ea25 0507 	bic.w	r5, r5, r7
 800a8b4:	e7b7      	b.n	800a826 <floor+0x46>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a8bc:	fa03 f606 	lsl.w	r6, r3, r6
 800a8c0:	4435      	add	r5, r6
 800a8c2:	4545      	cmp	r5, r8
 800a8c4:	bf38      	it	cc
 800a8c6:	18e4      	addcc	r4, r4, r3
 800a8c8:	e7f2      	b.n	800a8b0 <floor+0xd0>
 800a8ca:	2500      	movs	r5, #0
 800a8cc:	462c      	mov	r4, r5
 800a8ce:	e7aa      	b.n	800a826 <floor+0x46>
 800a8d0:	8800759c 	.word	0x8800759c
 800a8d4:	7e37e43c 	.word	0x7e37e43c
 800a8d8:	bff00000 	.word	0xbff00000
 800a8dc:	000fffff 	.word	0x000fffff

0800a8e0 <_init>:
 800a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e2:	bf00      	nop
 800a8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8e6:	bc08      	pop	{r3}
 800a8e8:	469e      	mov	lr, r3
 800a8ea:	4770      	bx	lr

0800a8ec <_fini>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	bf00      	nop
 800a8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f2:	bc08      	pop	{r3}
 800a8f4:	469e      	mov	lr, r3
 800a8f6:	4770      	bx	lr

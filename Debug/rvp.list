
rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa74  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800abb0  0800abb0  0001abb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800aca4  0800aca4  0001aca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800aca8  0800aca8  0001aca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000180  20000004  0800acac  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000934  20000188  0800ae2c  00020188  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  20000abc  0800ae2c  00020abc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   00023791  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000048b7  00000000  00000000  00043945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d28  00000000  00000000  00048200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001b48  00000000  00000000  00049f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024ae8  00000000  00000000  0004ba70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e4e0  00000000  00000000  00070558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d8c22  00000000  00000000  0008ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0016765a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007a4c  00000000  00000000  001676b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000188 	.word	0x20000188
 8000158:	00000000 	.word	0x00000000
 800015c:	0800ab98 	.word	0x0800ab98

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000018c 	.word	0x2000018c
 8000178:	0800ab98 	.word	0x0800ab98

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	3c01      	subs	r4, #1
 80002b8:	bf28      	it	cs
 80002ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002be:	d2e9      	bcs.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dmul>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000502:	bf1d      	ittte	ne
 8000504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000508:	ea94 0f0c 	teqne	r4, ip
 800050c:	ea95 0f0c 	teqne	r5, ip
 8000510:	f000 f8de 	bleq	80006d0 <__aeabi_dmul+0x1dc>
 8000514:	442c      	add	r4, r5
 8000516:	ea81 0603 	eor.w	r6, r1, r3
 800051a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000522:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000526:	bf18      	it	ne
 8000528:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800052c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000534:	d038      	beq.n	80005a8 <__aeabi_dmul+0xb4>
 8000536:	fba0 ce02 	umull	ip, lr, r0, r2
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000542:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000546:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054a:	f04f 0600 	mov.w	r6, #0
 800054e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000552:	f09c 0f00 	teq	ip, #0
 8000556:	bf18      	it	ne
 8000558:	f04e 0e01 	orrne.w	lr, lr, #1
 800055c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000560:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000564:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000568:	d204      	bcs.n	8000574 <__aeabi_dmul+0x80>
 800056a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056e:	416d      	adcs	r5, r5
 8000570:	eb46 0606 	adc.w	r6, r6, r6
 8000574:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000578:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800057c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000580:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000584:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000588:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800058c:	bf88      	it	hi
 800058e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000592:	d81e      	bhi.n	80005d2 <__aeabi_dmul+0xde>
 8000594:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005ac:	ea46 0101 	orr.w	r1, r6, r1
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	ea81 0103 	eor.w	r1, r1, r3
 80005b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005bc:	bfc2      	ittt	gt
 80005be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c6:	bd70      	popgt	{r4, r5, r6, pc}
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f04f 0e00 	mov.w	lr, #0
 80005d0:	3c01      	subs	r4, #1
 80005d2:	f300 80ab 	bgt.w	800072c <__aeabi_dmul+0x238>
 80005d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005da:	bfde      	ittt	le
 80005dc:	2000      	movle	r0, #0
 80005de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e2:	bd70      	pople	{r4, r5, r6, pc}
 80005e4:	f1c4 0400 	rsb	r4, r4, #0
 80005e8:	3c20      	subs	r4, #32
 80005ea:	da35      	bge.n	8000658 <__aeabi_dmul+0x164>
 80005ec:	340c      	adds	r4, #12
 80005ee:	dc1b      	bgt.n	8000628 <__aeabi_dmul+0x134>
 80005f0:	f104 0414 	add.w	r4, r4, #20
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f305 	lsl.w	r3, r0, r5
 80005fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000600:	fa01 f205 	lsl.w	r2, r1, r5
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800060c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	fa21 f604 	lsr.w	r6, r1, r4
 8000618:	eb42 0106 	adc.w	r1, r2, r6
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 040c 	rsb	r4, r4, #12
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f304 	lsl.w	r3, r0, r4
 8000634:	fa20 f005 	lsr.w	r0, r0, r5
 8000638:	fa01 f204 	lsl.w	r2, r1, r4
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	f141 0100 	adc.w	r1, r1, #0
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f205 	lsl.w	r2, r0, r5
 8000660:	ea4e 0e02 	orr.w	lr, lr, r2
 8000664:	fa20 f304 	lsr.w	r3, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea43 0302 	orr.w	r3, r3, r2
 8000670:	fa21 f004 	lsr.w	r0, r1, r4
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000678:	fa21 f204 	lsr.w	r2, r1, r4
 800067c:	ea20 0002 	bic.w	r0, r0, r2
 8000680:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f094 0f00 	teq	r4, #0
 8000694:	d10f      	bne.n	80006b6 <__aeabi_dmul+0x1c2>
 8000696:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069a:	0040      	lsls	r0, r0, #1
 800069c:	eb41 0101 	adc.w	r1, r1, r1
 80006a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3c01      	subeq	r4, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1a6>
 80006aa:	ea41 0106 	orr.w	r1, r1, r6
 80006ae:	f095 0f00 	teq	r5, #0
 80006b2:	bf18      	it	ne
 80006b4:	4770      	bxne	lr
 80006b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	eb43 0303 	adc.w	r3, r3, r3
 80006c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c4:	bf08      	it	eq
 80006c6:	3d01      	subeq	r5, #1
 80006c8:	d0f7      	beq.n	80006ba <__aeabi_dmul+0x1c6>
 80006ca:	ea43 0306 	orr.w	r3, r3, r6
 80006ce:	4770      	bx	lr
 80006d0:	ea94 0f0c 	teq	r4, ip
 80006d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d8:	bf18      	it	ne
 80006da:	ea95 0f0c 	teqne	r5, ip
 80006de:	d00c      	beq.n	80006fa <__aeabi_dmul+0x206>
 80006e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e4:	bf18      	it	ne
 80006e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ea:	d1d1      	bne.n	8000690 <__aeabi_dmul+0x19c>
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
 80006fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fe:	bf06      	itte	eq
 8000700:	4610      	moveq	r0, r2
 8000702:	4619      	moveq	r1, r3
 8000704:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000708:	d019      	beq.n	800073e <__aeabi_dmul+0x24a>
 800070a:	ea94 0f0c 	teq	r4, ip
 800070e:	d102      	bne.n	8000716 <__aeabi_dmul+0x222>
 8000710:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000714:	d113      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000716:	ea95 0f0c 	teq	r5, ip
 800071a:	d105      	bne.n	8000728 <__aeabi_dmul+0x234>
 800071c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000720:	bf1c      	itt	ne
 8000722:	4610      	movne	r0, r2
 8000724:	4619      	movne	r1, r3
 8000726:	d10a      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000742:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000746:	bd70      	pop	{r4, r5, r6, pc}

08000748 <__aeabi_ddiv>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000756:	bf1d      	ittte	ne
 8000758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800075c:	ea94 0f0c 	teqne	r4, ip
 8000760:	ea95 0f0c 	teqne	r5, ip
 8000764:	f000 f8a7 	bleq	80008b6 <__aeabi_ddiv+0x16e>
 8000768:	eba4 0405 	sub.w	r4, r4, r5
 800076c:	ea81 0e03 	eor.w	lr, r1, r3
 8000770:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000774:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000778:	f000 8088 	beq.w	800088c <__aeabi_ddiv+0x144>
 800077c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000780:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000784:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800078c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000790:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000794:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000798:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800079c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a0:	429d      	cmp	r5, r3
 80007a2:	bf08      	it	eq
 80007a4:	4296      	cmpeq	r6, r2
 80007a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ae:	d202      	bcs.n	80007b6 <__aeabi_ddiv+0x6e>
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	1ab6      	subs	r6, r6, r2
 80007b8:	eb65 0503 	sbc.w	r5, r5, r3
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000824:	ea55 0e06 	orrs.w	lr, r5, r6
 8000828:	d018      	beq.n	800085c <__aeabi_ddiv+0x114>
 800082a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000832:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000836:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000842:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000846:	d1c0      	bne.n	80007ca <__aeabi_ddiv+0x82>
 8000848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800084c:	d10b      	bne.n	8000866 <__aeabi_ddiv+0x11e>
 800084e:	ea41 0100 	orr.w	r1, r1, r0
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085a:	e7b6      	b.n	80007ca <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf04      	itt	eq
 8000862:	4301      	orreq	r1, r0
 8000864:	2000      	moveq	r0, #0
 8000866:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086a:	bf88      	it	hi
 800086c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000870:	f63f aeaf 	bhi.w	80005d2 <__aeabi_dmul+0xde>
 8000874:	ebb5 0c03 	subs.w	ip, r5, r3
 8000878:	bf04      	itt	eq
 800087a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000882:	f150 0000 	adcs.w	r0, r0, #0
 8000886:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000890:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000894:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000898:	bfc2      	ittt	gt
 800089a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	popgt	{r4, r5, r6, pc}
 80008a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a8:	f04f 0e00 	mov.w	lr, #0
 80008ac:	3c01      	subs	r4, #1
 80008ae:	e690      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b0:	ea45 0e06 	orr.w	lr, r5, r6
 80008b4:	e68d      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ba:	ea94 0f0c 	teq	r4, ip
 80008be:	bf08      	it	eq
 80008c0:	ea95 0f0c 	teqeq	r5, ip
 80008c4:	f43f af3b 	beq.w	800073e <__aeabi_dmul+0x24a>
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	d10a      	bne.n	80008e4 <__aeabi_ddiv+0x19c>
 80008ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d2:	f47f af34 	bne.w	800073e <__aeabi_dmul+0x24a>
 80008d6:	ea95 0f0c 	teq	r5, ip
 80008da:	f47f af25 	bne.w	8000728 <__aeabi_dmul+0x234>
 80008de:	4610      	mov	r0, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	e72c      	b.n	800073e <__aeabi_dmul+0x24a>
 80008e4:	ea95 0f0c 	teq	r5, ip
 80008e8:	d106      	bne.n	80008f8 <__aeabi_ddiv+0x1b0>
 80008ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ee:	f43f aefd 	beq.w	80006ec <__aeabi_dmul+0x1f8>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e722      	b.n	800073e <__aeabi_dmul+0x24a>
 80008f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fc:	bf18      	it	ne
 80008fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000902:	f47f aec5 	bne.w	8000690 <__aeabi_dmul+0x19c>
 8000906:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090a:	f47f af0d 	bne.w	8000728 <__aeabi_dmul+0x234>
 800090e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000912:	f47f aeeb 	bne.w	80006ec <__aeabi_dmul+0x1f8>
 8000916:	e712      	b.n	800073e <__aeabi_dmul+0x24a>

08000918 <__gedf2>:
 8000918:	f04f 3cff 	mov.w	ip, #4294967295
 800091c:	e006      	b.n	800092c <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__ledf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	e002      	b.n	800092c <__cmpdf2+0x4>
 8000926:	bf00      	nop

08000928 <__cmpdf2>:
 8000928:	f04f 0c01 	mov.w	ip, #1
 800092c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000930:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000938:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800093c:	bf18      	it	ne
 800093e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000942:	d01b      	beq.n	800097c <__cmpdf2+0x54>
 8000944:	b001      	add	sp, #4
 8000946:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094a:	bf0c      	ite	eq
 800094c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000950:	ea91 0f03 	teqne	r1, r3
 8000954:	bf02      	ittt	eq
 8000956:	ea90 0f02 	teqeq	r0, r2
 800095a:	2000      	moveq	r0, #0
 800095c:	4770      	bxeq	lr
 800095e:	f110 0f00 	cmn.w	r0, #0
 8000962:	ea91 0f03 	teq	r1, r3
 8000966:	bf58      	it	pl
 8000968:	4299      	cmppl	r1, r3
 800096a:	bf08      	it	eq
 800096c:	4290      	cmpeq	r0, r2
 800096e:	bf2c      	ite	cs
 8000970:	17d8      	asrcs	r0, r3, #31
 8000972:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000976:	f040 0001 	orr.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	d102      	bne.n	800098c <__cmpdf2+0x64>
 8000986:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098a:	d107      	bne.n	800099c <__cmpdf2+0x74>
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	d1d6      	bne.n	8000944 <__cmpdf2+0x1c>
 8000996:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099a:	d0d3      	beq.n	8000944 <__cmpdf2+0x1c>
 800099c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <__aeabi_cdrcmple>:
 80009a4:	4684      	mov	ip, r0
 80009a6:	4610      	mov	r0, r2
 80009a8:	4662      	mov	r2, ip
 80009aa:	468c      	mov	ip, r1
 80009ac:	4619      	mov	r1, r3
 80009ae:	4663      	mov	r3, ip
 80009b0:	e000      	b.n	80009b4 <__aeabi_cdcmpeq>
 80009b2:	bf00      	nop

080009b4 <__aeabi_cdcmpeq>:
 80009b4:	b501      	push	{r0, lr}
 80009b6:	f7ff ffb7 	bl	8000928 <__cmpdf2>
 80009ba:	2800      	cmp	r0, #0
 80009bc:	bf48      	it	mi
 80009be:	f110 0f00 	cmnmi.w	r0, #0
 80009c2:	bd01      	pop	{r0, pc}

080009c4 <__aeabi_dcmpeq>:
 80009c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c8:	f7ff fff4 	bl	80009b4 <__aeabi_cdcmpeq>
 80009cc:	bf0c      	ite	eq
 80009ce:	2001      	moveq	r0, #1
 80009d0:	2000      	movne	r0, #0
 80009d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d6:	bf00      	nop

080009d8 <__aeabi_dcmplt>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff ffea 	bl	80009b4 <__aeabi_cdcmpeq>
 80009e0:	bf34      	ite	cc
 80009e2:	2001      	movcc	r0, #1
 80009e4:	2000      	movcs	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmple>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffe0 	bl	80009b4 <__aeabi_cdcmpeq>
 80009f4:	bf94      	ite	ls
 80009f6:	2001      	movls	r0, #1
 80009f8:	2000      	movhi	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmpge>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffce 	bl	80009a4 <__aeabi_cdrcmple>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpgt>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffc4 	bl	80009a4 <__aeabi_cdrcmple>
 8000a1c:	bf34      	ite	cc
 8000a1e:	2001      	movcc	r0, #1
 8000a20:	2000      	movcs	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <update_buttons>:
uint8_t middle_down = 0;
uint8_t right_down = 0;
uint8_t b4_down = 0;
uint8_t b5_down = 0;

void update_buttons() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	// updates all the button states
 	if (HAL_GPIO_ReadPin(LEFT_UP_GPIO_Port, LEFT_UP_Pin)) {
 8000a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f001 fc66 	bl	8002354 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <update_buttons+0x1c>
		left_down = 0;
 8000a8e:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <update_buttons+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(LEFT_DOWN_GPIO_Port, LEFT_DOWN_Pin)) {
 8000a94:	2108      	movs	r1, #8
 8000a96:	482f      	ldr	r0, [pc, #188]	; (8000b54 <update_buttons+0xdc>)
 8000a98:	f001 fc5c 	bl	8002354 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <update_buttons+0x30>
		left_down = 1;
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <update_buttons+0xd8>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(MIDDLE_UP_GPIO_Port, MIDDLE_UP_Pin)) {
 8000aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f001 fc50 	bl	8002354 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <update_buttons+0x48>
		middle_down = 0;
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <update_buttons+0xe0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(MIDDLE_DOWN_GPIO_Port, MIDDLE_DOWN_Pin)) {
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4826      	ldr	r0, [pc, #152]	; (8000b5c <update_buttons+0xe4>)
 8000ac4:	f001 fc46 	bl	8002354 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <update_buttons+0x5c>
		middle_down = 1;
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <update_buttons+0xe0>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(RIGHT_UP_GPIO_Port, RIGHT_UP_Pin)) {
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	481f      	ldr	r0, [pc, #124]	; (8000b54 <update_buttons+0xdc>)
 8000ad8:	f001 fc3c 	bl	8002354 <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <update_buttons+0x70>
		right_down = 0;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <update_buttons+0xe8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(RIGHT_DOWN_GPIO_Port, RIGHT_DOWN_Pin)) {
 8000ae8:	2101      	movs	r1, #1
 8000aea:	481a      	ldr	r0, [pc, #104]	; (8000b54 <update_buttons+0xdc>)
 8000aec:	f001 fc32 	bl	8002354 <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <update_buttons+0x84>
		right_down = 1;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <update_buttons+0xe8>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B4_UP_GPIO_Port, B4_UP_Pin)) {
 8000afc:	2120      	movs	r1, #32
 8000afe:	4815      	ldr	r0, [pc, #84]	; (8000b54 <update_buttons+0xdc>)
 8000b00:	f001 fc28 	bl	8002354 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <update_buttons+0x98>
		b4_down = 0;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <update_buttons+0xec>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B4_DOWN_GPIO_Port, B4_DOWN_Pin)) {
 8000b10:	2110      	movs	r1, #16
 8000b12:	4810      	ldr	r0, [pc, #64]	; (8000b54 <update_buttons+0xdc>)
 8000b14:	f001 fc1e 	bl	8002354 <HAL_GPIO_ReadPin>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <update_buttons+0xac>
		b4_down = 1;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <update_buttons+0xec>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B5_UP_GPIO_Port, B5_UP_Pin)) {
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <update_buttons+0xdc>)
 8000b28:	f001 fc14 	bl	8002354 <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <update_buttons+0xc0>
		b5_down = 0;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <update_buttons+0xf0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B5_DOWN_GPIO_Port, B5_DOWN_Pin)) {
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <update_buttons+0xdc>)
 8000b3c:	f001 fc0a 	bl	8002354 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <update_buttons+0xd4>
		b5_down = 1;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <update_buttons+0xf0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200001a4 	.word	0x200001a4
 8000b54:	48000400 	.word	0x48000400
 8000b58:	200001a5 	.word	0x200001a5
 8000b5c:	48001000 	.word	0x48001000
 8000b60:	200001a6 	.word	0x200001a6
 8000b64:	200001a7 	.word	0x200001a7
 8000b68:	200001a8 	.word	0x200001a8

08000b6c <read_register>:
#include "imu.h"
#include "math.h"

uint8_t read_register(uint8_t r) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
	// reads a single value from a register
	// r - register
	uint8_t pTxData[1] = { r | (1UL << 7) };
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	733b      	strb	r3, [r7, #12]
	uint8_t pRxData[1] = { 0 };
 8000b80:	2300      	movs	r3, #0
 8000b82:	723b      	strb	r3, [r7, #8]
	CS_START();
 8000b84:	2200      	movs	r2, #0
 8000b86:	2110      	movs	r1, #16
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f001 fbfa 	bl	8002384 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, HAL_MAX_DELAY);
 8000b90:	f107 010c 	add.w	r1, r7, #12
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
 8000b98:	2201      	movs	r2, #1
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <read_register+0x5c>)
 8000b9c:	f004 ff92 	bl	8005ac4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 1, HAL_MAX_DELAY);
 8000ba0:	f107 0108 	add.w	r1, r7, #8
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <read_register+0x5c>)
 8000bac:	f005 f8f8 	bl	8005da0 <HAL_SPI_Receive>
	CS_END();
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb8:	f001 fbe4 	bl	8002384 <HAL_GPIO_WritePin>
	return pRxData[0];
 8000bbc:	7a3b      	ldrb	r3, [r7, #8]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000244 	.word	0x20000244

08000bcc <write_register>:

void write_register(uint8_t r, uint8_t value) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
	// writes the value to the register
	// r - register
	// value - value to write
	uint8_t pTxData[2] = { r, value };
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	733b      	strb	r3, [r7, #12]
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	737b      	strb	r3, [r7, #13]
	uint8_t pRxData[2] = { 0, 0 };
 8000be4:	2300      	movs	r3, #0
 8000be6:	813b      	strh	r3, [r7, #8]
	CS_START();
 8000be8:	2200      	movs	r2, #0
 8000bea:	2110      	movs	r1, #16
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f001 fbc8 	bl	8002384 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 2, HAL_MAX_DELAY);
 8000bf4:	f107 010c 	add.w	r1, r7, #12
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	480a      	ldr	r0, [pc, #40]	; (8000c28 <write_register+0x5c>)
 8000c00:	f004 ff60 	bl	8005ac4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 2, HAL_MAX_DELAY);
 8000c04:	f107 0108 	add.w	r1, r7, #8
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <write_register+0x5c>)
 8000c10:	f005 f8c6 	bl	8005da0 <HAL_SPI_Receive>
	CS_END();
 8000c14:	2201      	movs	r2, #1
 8000c16:	2110      	movs	r1, #16
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f001 fbb2 	bl	8002384 <HAL_GPIO_WritePin>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000244 	.word	0x20000244

08000c2c <imu_setup>:

#define ACCEL_CALIBRATION_N 100
int16_t x_offset, y_offset, z_offset = 0;
void imu_setup() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	// IMU setup operations

	// reset IMU
	while (1) {
		write_register(PWR_MGMT_1, (1UL << 7));
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	206b      	movs	r0, #107	; 0x6b
 8000c36:	f7ff ffc9 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000c3a:	2064      	movs	r0, #100	; 0x64
 8000c3c:	f001 f8ee 	bl	8001e1c <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000c40:	206b      	movs	r0, #107	; 0x6b
 8000c42:	f7ff ff93 	bl	8000b6c <read_register>
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
		if (reg & (1UL << 6)) {
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0ee      	beq.n	8000c32 <imu_setup+0x6>
		}
	}

	// wake up
	while (1) {
		write_register(PWR_MGMT_1, (1 << 0));
 8000c54:	2101      	movs	r1, #1
 8000c56:	206b      	movs	r0, #107	; 0x6b
 8000c58:	f7ff ffb8 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f001 f8dd 	bl	8001e1c <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000c62:	206b      	movs	r0, #107	; 0x6b
 8000c64:	f7ff ff82 	bl	8000b6c <read_register>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71bb      	strb	r3, [r7, #6]
		if (reg & (1 << 0)) {
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0ee      	beq.n	8000c54 <imu_setup+0x28>
		}
	}

	//disable i2c
	while (1) {
		write_register(USER_CTRL, (1 << 4));
 8000c76:	2110      	movs	r1, #16
 8000c78:	206a      	movs	r0, #106	; 0x6a
 8000c7a:	f7ff ffa7 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000c7e:	2064      	movs	r0, #100	; 0x64
 8000c80:	f001 f8cc 	bl	8001e1c <HAL_Delay>
		uint8_t reg = read_register(USER_CTRL);
 8000c84:	206a      	movs	r0, #106	; 0x6a
 8000c86:	f7ff ff71 	bl	8000b6c <read_register>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	717b      	strb	r3, [r7, #5]
		if (reg & (1 << 4)) {
 8000c8e:	797b      	ldrb	r3, [r7, #5]
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0ee      	beq.n	8000c76 <imu_setup+0x4a>
		}
	}

	//accel +-16g
	while (1) {
		write_register(ACCEL_CONFIG, (1 << 4) | (1 << 3));
 8000c98:	2118      	movs	r1, #24
 8000c9a:	201c      	movs	r0, #28
 8000c9c:	f7ff ff96 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000ca0:	2064      	movs	r0, #100	; 0x64
 8000ca2:	f001 f8bb 	bl	8001e1c <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG);
 8000ca6:	201c      	movs	r0, #28
 8000ca8:	f7ff ff60 	bl	8000b6c <read_register>
 8000cac:	4603      	mov	r3, r0
 8000cae:	713b      	strb	r3, [r7, #4]
		if (reg & (1 << 4) && reg & (1 << 3)) {
 8000cb0:	793b      	ldrb	r3, [r7, #4]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0ee      	beq.n	8000c98 <imu_setup+0x6c>
 8000cba:	793b      	ldrb	r3, [r7, #4]
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0e9      	beq.n	8000c98 <imu_setup+0x6c>
		}
	}

	//accel low pass filter setting
	while (1) {
		write_register(ACCEL_CONFIG_2, 1);
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	201d      	movs	r0, #29
 8000cc8:	f7ff ff80 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000ccc:	2064      	movs	r0, #100	; 0x64
 8000cce:	f001 f8a5 	bl	8001e1c <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG_2);
 8000cd2:	201d      	movs	r0, #29
 8000cd4:	f7ff ff4a 	bl	8000b6c <read_register>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	70fb      	strb	r3, [r7, #3]
		if (reg == 1) {
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d000      	beq.n	8000ce4 <imu_setup+0xb8>
	while (1) {
 8000ce2:	e7ef      	b.n	8000cc4 <imu_setup+0x98>
			break;
 8000ce4:	bf00      	nop
//		HAL_Delay(1);
//	}
//	x_offset = xsum / ACCEL_CALIBRATION_N;
//	y_offset = ysum / ACCEL_CALIBRATION_N;
//	z_offset = zsum / ACCEL_CALIBRATION_N;
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <read_x>:

int16_t read_x() {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
	// reads and returns the accel x axis
	uint8_t h = read_register(ACCEL_XOUT_H);
 8000cf4:	203b      	movs	r0, #59	; 0x3b
 8000cf6:	f7ff ff39 	bl	8000b6c <read_register>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_XOUT_L);
 8000cfe:	203c      	movs	r0, #60	; 0x3c
 8000d00:	f7ff ff34 	bl	8000b6c <read_register>
 8000d04:	4603      	mov	r3, r0
 8000d06:	71bb      	strb	r3, [r7, #6]
	int16_t x = (h << 8) | l;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	80bb      	strh	r3, [r7, #4]
	return x;
 8000d16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <read_y>:

int16_t read_y() {
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
	// reads and returns the accel y axis
	uint8_t h = read_register(ACCEL_YOUT_H);
 8000d28:	203d      	movs	r0, #61	; 0x3d
 8000d2a:	f7ff ff1f 	bl	8000b6c <read_register>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_YOUT_L);
 8000d32:	203e      	movs	r0, #62	; 0x3e
 8000d34:	f7ff ff1a 	bl	8000b6c <read_register>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	71bb      	strb	r3, [r7, #6]
	int16_t y = (h << 8) | l;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	80bb      	strh	r3, [r7, #4]
	return y;
 8000d4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <read_z>:

int16_t read_z() {
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
	// reads and returns the accel z axis
	uint8_t h = read_register(ACCEL_ZOUT_H);
 8000d5c:	203f      	movs	r0, #63	; 0x3f
 8000d5e:	f7ff ff05 	bl	8000b6c <read_register>
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_ZOUT_L);
 8000d66:	2040      	movs	r0, #64	; 0x40
 8000d68:	f7ff ff00 	bl	8000b6c <read_register>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71bb      	strb	r3, [r7, #6]
	int16_t z = (h << 8) | l;
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	80bb      	strh	r3, [r7, #4]
	return z;
 8000d7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <filter_p>:
//float den[] = { -1, 3.1673, -3.8396, 2.1405, -0.4706 };
//#define FILTER_N 3
//float num[] = { 0.6156, -1.8468, 1.8468, -0.6156 };
//float den[] = { -1, 2.0478, -1.5057, 0.3713 };

void filter_p(int16_t r[], int16_t f[], int16_t new) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	4613      	mov	r3, r2
 8000d98:	80fb      	strh	r3, [r7, #6]
	// applies an iir filter
	// r - raw inputs array
	// f - filtered values array
	// new - the new value to add
	if (new < -10000 || new > 10000) {
 8000d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d9e:	4a3e      	ldr	r2, [pc, #248]	; (8000e98 <filter_p+0x10c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	db72      	blt.n	8000e8a <filter_p+0xfe>
 8000da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dac:	4293      	cmp	r3, r2
 8000dae:	dc6c      	bgt.n	8000e8a <filter_p+0xfe>
		return;
	}
	r[0] = new;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	88fa      	ldrh	r2, [r7, #6]
 8000db4:	801a      	strh	r2, [r3, #0]
	f[0] = 0;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	2200      	movs	r2, #0
 8000dba:	801a      	strh	r2, [r3, #0]
	float sum = 0;
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < FILTER_N + 1; i++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
 8000dc6:	e032      	b.n	8000e2e <filter_p+0xa2>
		sum += den[i] * f[i];
 8000dc8:	4a34      	ldr	r2, [pc, #208]	; (8000e9c <filter_p+0x110>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	ed93 7a00 	vldr	s14, [r3]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	68ba      	ldr	r2, [r7, #8]
 8000dda:	4413      	add	r3, r2
 8000ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dec:	ed97 7a07 	vldr	s14, [r7, #28]
 8000df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df4:	edc7 7a07 	vstr	s15, [r7, #28]
		sum += num[i] * r[i];
 8000df8:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <filter_p+0x114>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	ed93 7a00 	vldr	s14, [r3]
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e24:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < FILTER_N + 1; i++) {
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	ddc9      	ble.n	8000dc8 <filter_p+0x3c>
	}
	f[0] = sum;
 8000e34:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3c:	ee17 3a90 	vmov	r3, s15
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	801a      	strh	r2, [r3, #0]
	for (int i = FILTER_N - 1; i >= 0; i--) {
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	e01a      	b.n	8000e82 <filter_p+0xf6>
		r[i + 1] = r[i];
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	441a      	add	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	3301      	adds	r3, #1
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	68f9      	ldr	r1, [r7, #12]
 8000e5c:	440b      	add	r3, r1
 8000e5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e62:	801a      	strh	r2, [r3, #0]
		f[i + 1] = f[i];
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	441a      	add	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	440b      	add	r3, r1
 8000e76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e7a:	801a      	strh	r2, [r3, #0]
	for (int i = FILTER_N - 1; i >= 0; i--) {
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	dae1      	bge.n	8000e4c <filter_p+0xc0>
 8000e88:	e000      	b.n	8000e8c <filter_p+0x100>
		return;
 8000e8a:	bf00      	nop
	}
}
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	ffffd8f0 	.word	0xffffd8f0
 8000e9c:	20000010 	.word	0x20000010
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <get_xyz>:
int16_t y_r[FILTER_N + 1] = { 0 };
int16_t y_f[FILTER_N + 1] = { 0 };
int16_t z_r[FILTER_N + 1] = { 0 };
int16_t z_f[FILTER_N + 1] = { 0 };

void get_xyz(int16_t *x, int16_t *y, int16_t *z) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	// returns current xyz accelerometer values
	// x - accel x return value ptr
	// y - accel y return value ptr
	// z - accel z return value ptr
	filter_p(x_r, x_f, read_x());
 8000eb0:	f7ff ff1d 	bl	8000cee <read_x>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4913      	ldr	r1, [pc, #76]	; (8000f08 <get_xyz+0x64>)
 8000eba:	4814      	ldr	r0, [pc, #80]	; (8000f0c <get_xyz+0x68>)
 8000ebc:	f7ff ff66 	bl	8000d8c <filter_p>
	filter_p(y_r, y_f, read_y());
 8000ec0:	f7ff ff2f 	bl	8000d22 <read_y>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4911      	ldr	r1, [pc, #68]	; (8000f10 <get_xyz+0x6c>)
 8000eca:	4812      	ldr	r0, [pc, #72]	; (8000f14 <get_xyz+0x70>)
 8000ecc:	f7ff ff5e 	bl	8000d8c <filter_p>
	filter_p(z_r, z_f, read_z());
 8000ed0:	f7ff ff41 	bl	8000d56 <read_z>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	490f      	ldr	r1, [pc, #60]	; (8000f18 <get_xyz+0x74>)
 8000eda:	4810      	ldr	r0, [pc, #64]	; (8000f1c <get_xyz+0x78>)
 8000edc:	f7ff ff56 	bl	8000d8c <filter_p>
	*x = x_f[0];
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <get_xyz+0x64>)
 8000ee2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	801a      	strh	r2, [r3, #0]
	*y = y_f[0];
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <get_xyz+0x6c>)
 8000eec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	801a      	strh	r2, [r3, #0]
	*z = z_f[0];
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <get_xyz+0x74>)
 8000ef6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	801a      	strh	r2, [r3, #0]
//	*x = read_x() - x_offset;
//	*y = read_y() - y_offset;
//	*z = read_z() - z_offset;
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200001b4 	.word	0x200001b4
 8000f0c:	200001ac 	.word	0x200001ac
 8000f10:	200001c4 	.word	0x200001c4
 8000f14:	200001bc 	.word	0x200001bc
 8000f18:	200001d4 	.word	0x200001d4
 8000f1c:	200001cc 	.word	0x200001cc

08000f20 <get_mouse_xy>:

#define PREV_C 10
int16_t prev_x[PREV_C] = { 0 };
int16_t prev_y[PREV_C] = { 0 };

void get_mouse_xy(int8_t *x, int8_t *y) {
 8000f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f24:	b09a      	sub	sp, #104	; 0x68
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6578      	str	r0, [r7, #84]	; 0x54
 8000f2a:	6539      	str	r1, [r7, #80]	; 0x50
//		*y = -ceil(accel.y / 500.0);
//	} else {
//		*y = -floor(accel.y / 500.0);
//	}

	get_xyz(&accel.x, &accel.y, &accel.z);
 8000f2c:	4a7b      	ldr	r2, [pc, #492]	; (800111c <get_mouse_xy+0x1fc>)
 8000f2e:	497c      	ldr	r1, [pc, #496]	; (8001120 <get_mouse_xy+0x200>)
 8000f30:	487c      	ldr	r0, [pc, #496]	; (8001124 <get_mouse_xy+0x204>)
 8000f32:	f7ff ffb7 	bl	8000ea4 <get_xyz>

	// exponential moving avg. to smooth peaks
	if (i == 0) {
 8000f36:	4b7c      	ldr	r3, [pc, #496]	; (8001128 <get_mouse_xy+0x208>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d11c      	bne.n	8000f78 <get_mouse_xy+0x58>
		avg_x = accel.x;
 8000f3e:	4b79      	ldr	r3, [pc, #484]	; (8001124 <get_mouse_xy+0x204>)
 8000f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa6b 	bl	8000420 <__aeabi_i2d>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4977      	ldr	r1, [pc, #476]	; (800112c <get_mouse_xy+0x20c>)
 8000f50:	e9c1 2300 	strd	r2, r3, [r1]
		avg_y = accel.y;
 8000f54:	4b73      	ldr	r3, [pc, #460]	; (8001124 <get_mouse_xy+0x204>)
 8000f56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fa60 	bl	8000420 <__aeabi_i2d>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4972      	ldr	r1, [pc, #456]	; (8001130 <get_mouse_xy+0x210>)
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
		i++;
 8000f6a:	4b6f      	ldr	r3, [pc, #444]	; (8001128 <get_mouse_xy+0x208>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4a6d      	ldr	r2, [pc, #436]	; (8001128 <get_mouse_xy+0x208>)
 8000f74:	7013      	strb	r3, [r2, #0]
 8000f76:	e047      	b.n	8001008 <get_mouse_xy+0xe8>
	} else {
		avg_x = 0.5 * accel.x + (1 - 0.5) * avg_x;
 8000f78:	4b6a      	ldr	r3, [pc, #424]	; (8001124 <get_mouse_xy+0x204>)
 8000f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fa4e 	bl	8000420 <__aeabi_i2d>
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	4b6a      	ldr	r3, [pc, #424]	; (8001134 <get_mouse_xy+0x214>)
 8000f8a:	f7ff fab3 	bl	80004f4 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4614      	mov	r4, r2
 8000f94:	461d      	mov	r5, r3
 8000f96:	4b65      	ldr	r3, [pc, #404]	; (800112c <get_mouse_xy+0x20c>)
 8000f98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	4b64      	ldr	r3, [pc, #400]	; (8001134 <get_mouse_xy+0x214>)
 8000fa2:	f7ff faa7 	bl	80004f4 <__aeabi_dmul>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4620      	mov	r0, r4
 8000fac:	4629      	mov	r1, r5
 8000fae:	f7ff f8eb 	bl	8000188 <__adddf3>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4b5c      	ldr	r3, [pc, #368]	; (800112c <get_mouse_xy+0x20c>)
 8000fbc:	e9c3 0100 	strd	r0, r1, [r3]
		avg_y = 0.5 * accel.y + (1 - 0.5) * avg_y;
 8000fc0:	4b58      	ldr	r3, [pc, #352]	; (8001124 <get_mouse_xy+0x204>)
 8000fc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa2a 	bl	8000420 <__aeabi_i2d>
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b58      	ldr	r3, [pc, #352]	; (8001134 <get_mouse_xy+0x214>)
 8000fd2:	f7ff fa8f 	bl	80004f4 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4614      	mov	r4, r2
 8000fdc:	461d      	mov	r5, r3
 8000fde:	4b54      	ldr	r3, [pc, #336]	; (8001130 <get_mouse_xy+0x210>)
 8000fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	4b52      	ldr	r3, [pc, #328]	; (8001134 <get_mouse_xy+0x214>)
 8000fea:	f7ff fa83 	bl	80004f4 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	4629      	mov	r1, r5
 8000ff6:	f7ff f8c7 	bl	8000188 <__adddf3>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <get_mouse_xy+0x210>)
 8001004:	e9c3 0100 	strd	r0, r1, [r3]
	}

	for (int l = PREV_C - 2; l >= 0; l--) {
 8001008:	2308      	movs	r3, #8
 800100a:	667b      	str	r3, [r7, #100]	; 0x64
 800100c:	e014      	b.n	8001038 <get_mouse_xy+0x118>
		prev_x[l + 1] = prev_x[l];
 800100e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001010:	1c59      	adds	r1, r3, #1
 8001012:	4a49      	ldr	r2, [pc, #292]	; (8001138 <get_mouse_xy+0x218>)
 8001014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001016:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800101a:	4a47      	ldr	r2, [pc, #284]	; (8001138 <get_mouse_xy+0x218>)
 800101c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		prev_y[l + 1] = prev_y[l];
 8001020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001022:	1c59      	adds	r1, r3, #1
 8001024:	4a45      	ldr	r2, [pc, #276]	; (800113c <get_mouse_xy+0x21c>)
 8001026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001028:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800102c:	4a43      	ldr	r2, [pc, #268]	; (800113c <get_mouse_xy+0x21c>)
 800102e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	for (int l = PREV_C - 2; l >= 0; l--) {
 8001032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001034:	3b01      	subs	r3, #1
 8001036:	667b      	str	r3, [r7, #100]	; 0x64
 8001038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800103a:	2b00      	cmp	r3, #0
 800103c:	dae7      	bge.n	800100e <get_mouse_xy+0xee>
	}
	prev_x[0] = avg_x;
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <get_mouse_xy+0x20c>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fcee 	bl	8000a28 <__aeabi_d2iz>
 800104c:	4603      	mov	r3, r0
 800104e:	b21b      	sxth	r3, r3
 8001050:	4a39      	ldr	r2, [pc, #228]	; (8001138 <get_mouse_xy+0x218>)
 8001052:	8013      	strh	r3, [r2, #0]
	prev_y[0] = avg_y;
 8001054:	4b36      	ldr	r3, [pc, #216]	; (8001130 <get_mouse_xy+0x210>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fce3 	bl	8000a28 <__aeabi_d2iz>
 8001062:	4603      	mov	r3, r0
 8001064:	b21b      	sxth	r3, r3
 8001066:	4a35      	ldr	r2, [pc, #212]	; (800113c <get_mouse_xy+0x21c>)
 8001068:	8013      	strh	r3, [r2, #0]

	// movement direction trigger
	int x_reset = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	663b      	str	r3, [r7, #96]	; 0x60
	int y_reset = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	65fb      	str	r3, [r7, #92]	; 0x5c
	for (int k = 0; k < PREV_C; k++) {
 8001072:	2300      	movs	r3, #0
 8001074:	65bb      	str	r3, [r7, #88]	; 0x58
 8001076:	e01a      	b.n	80010ae <get_mouse_xy+0x18e>
		// reset if 5 small values in a row
		if (abs(prev_x[k]) > 5) {
 8001078:	4a2f      	ldr	r2, [pc, #188]	; (8001138 <get_mouse_xy+0x218>)
 800107a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800107c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001080:	2b00      	cmp	r3, #0
 8001082:	bfb8      	it	lt
 8001084:	425b      	neglt	r3, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	2b05      	cmp	r3, #5
 800108a:	d901      	bls.n	8001090 <get_mouse_xy+0x170>
			x_reset = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	663b      	str	r3, [r7, #96]	; 0x60
		}
		if (abs(prev_y[k]) > 5) {
 8001090:	4a2a      	ldr	r2, [pc, #168]	; (800113c <get_mouse_xy+0x21c>)
 8001092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001094:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001098:	2b00      	cmp	r3, #0
 800109a:	bfb8      	it	lt
 800109c:	425b      	neglt	r3, r3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d901      	bls.n	80010a8 <get_mouse_xy+0x188>
			y_reset = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	65fb      	str	r3, [r7, #92]	; 0x5c
	for (int k = 0; k < PREV_C; k++) {
 80010a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010aa:	3301      	adds	r3, #1
 80010ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80010ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010b0:	2b09      	cmp	r3, #9
 80010b2:	dde1      	ble.n	8001078 <get_mouse_xy+0x158>
		}
	}
	if (x_reset) {
 80010b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <get_mouse_xy+0x1a0>
		*x = 0;
 80010ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010bc:	2300      	movs	r3, #0
 80010be:	7013      	strb	r3, [r2, #0]
	}
	if (y_reset) {
 80010c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <get_mouse_xy+0x1ac>
		*y = 0;
 80010c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80010c8:	2300      	movs	r3, #0
 80010ca:	7013      	strb	r3, [r2, #0]
	}

	// if x trigger is not set and accel is significant
	if (*x == 0) {
 80010cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ce:	f993 3000 	ldrsb.w	r3, [r3]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d15a      	bne.n	800118c <get_mouse_xy+0x26c>
		if (avg_x < -SIG_ACCEL) {
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <get_mouse_xy+0x20c>)
 80010d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <get_mouse_xy+0x220>)
 80010e2:	f7ff fc79 	bl	80009d8 <__aeabi_dcmplt>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d02d      	beq.n	8001148 <get_mouse_xy+0x228>
			*x = -avg_x / ACCEL_DIV;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <get_mouse_xy+0x20c>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	4690      	mov	r8, r2
 80010f4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <get_mouse_xy+0x224>)
 80010fe:	4640      	mov	r0, r8
 8001100:	4649      	mov	r1, r9
 8001102:	f7ff fb21 	bl	8000748 <__aeabi_ddiv>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fc8b 	bl	8000a28 <__aeabi_d2iz>
 8001112:	4603      	mov	r3, r0
 8001114:	b25b      	sxtb	r3, r3
 8001116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001118:	7013      	strb	r3, [r2, #0]
 800111a:	e037      	b.n	800118c <get_mouse_xy+0x26c>
 800111c:	2000023c 	.word	0x2000023c
 8001120:	2000023a 	.word	0x2000023a
 8001124:	20000238 	.word	0x20000238
 8001128:	200001da 	.word	0x200001da
 800112c:	200001e0 	.word	0x200001e0
 8001130:	200001e8 	.word	0x200001e8
 8001134:	3fe00000 	.word	0x3fe00000
 8001138:	200001f0 	.word	0x200001f0
 800113c:	20000204 	.word	0x20000204
 8001140:	c0390000 	.word	0xc0390000
 8001144:	40340000 	.word	0x40340000
		} else if (avg_x > SIG_ACCEL) {
 8001148:	4ba9      	ldr	r3, [pc, #676]	; (80013f0 <get_mouse_xy+0x4d0>)
 800114a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4ba8      	ldr	r3, [pc, #672]	; (80013f4 <get_mouse_xy+0x4d4>)
 8001154:	f7ff fc5e 	bl	8000a14 <__aeabi_dcmpgt>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d016      	beq.n	800118c <get_mouse_xy+0x26c>
			*x = -avg_x / ACCEL_DIV;
 800115e:	4ba4      	ldr	r3, [pc, #656]	; (80013f0 <get_mouse_xy+0x4d0>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	4692      	mov	sl, r2
 8001166:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	4ba2      	ldr	r3, [pc, #648]	; (80013f8 <get_mouse_xy+0x4d8>)
 8001170:	4650      	mov	r0, sl
 8001172:	4659      	mov	r1, fp
 8001174:	f7ff fae8 	bl	8000748 <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fc52 	bl	8000a28 <__aeabi_d2iz>
 8001184:	4603      	mov	r3, r0
 8001186:	b25b      	sxtb	r3, r3
 8001188:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800118a:	7013      	strb	r3, [r2, #0]
		}
	}
	// if x accel is greater than starting accel
	if (*x > 0) {
 800118c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800118e:	f993 3000 	ldrsb.w	r3, [r3]
 8001192:	2b00      	cmp	r3, #0
 8001194:	dd45      	ble.n	8001222 <get_mouse_xy+0x302>
		if (avg_x < -SIG_ACCEL) {
 8001196:	4b96      	ldr	r3, [pc, #600]	; (80013f0 <get_mouse_xy+0x4d0>)
 8001198:	e9d3 0100 	ldrd	r0, r1, [r3]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b96      	ldr	r3, [pc, #600]	; (80013fc <get_mouse_xy+0x4dc>)
 80011a2:	f7ff fc19 	bl	80009d8 <__aeabi_dcmplt>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d03a      	beq.n	8001222 <get_mouse_xy+0x302>
			if (fabs(avg_x / ACCEL_DIV) > fabs(*x)) {
 80011ac:	4b90      	ldr	r3, [pc, #576]	; (80013f0 <get_mouse_xy+0x4d0>)
 80011ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b90      	ldr	r3, [pc, #576]	; (80013f8 <get_mouse_xy+0x4d8>)
 80011b8:	f7ff fac6 	bl	8000748 <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80011c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ca:	f993 3000 	ldrsb.w	r3, [r3]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f926 	bl	8000420 <__aeabi_i2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	643a      	str	r2, [r7, #64]	; 0x40
 80011da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
 80011e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80011e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80011e8:	f7ff fc14 	bl	8000a14 <__aeabi_dcmpgt>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d017      	beq.n	8001222 <get_mouse_xy+0x302>
				*x = -avg_x / ACCEL_DIV;
 80011f2:	4b7f      	ldr	r3, [pc, #508]	; (80013f0 <get_mouse_xy+0x4d0>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80011fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b7c      	ldr	r3, [pc, #496]	; (80013f8 <get_mouse_xy+0x4d8>)
 8001206:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800120a:	f7ff fa9d 	bl	8000748 <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fc07 	bl	8000a28 <__aeabi_d2iz>
 800121a:	4603      	mov	r3, r0
 800121c:	b25b      	sxtb	r3, r3
 800121e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001220:	7013      	strb	r3, [r2, #0]
			}
		}
	}
	if (*x < 0) {
 8001222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001224:	f993 3000 	ldrsb.w	r3, [r3]
 8001228:	2b00      	cmp	r3, #0
 800122a:	da45      	bge.n	80012b8 <get_mouse_xy+0x398>
		if (avg_x > SIG_ACCEL) {
 800122c:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <get_mouse_xy+0x4d0>)
 800122e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b6f      	ldr	r3, [pc, #444]	; (80013f4 <get_mouse_xy+0x4d4>)
 8001238:	f7ff fbec 	bl	8000a14 <__aeabi_dcmpgt>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d03a      	beq.n	80012b8 <get_mouse_xy+0x398>
			if (fabs(avg_x / ACCEL_DIV) > fabs(*x)) {
 8001242:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <get_mouse_xy+0x4d0>)
 8001244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b6a      	ldr	r3, [pc, #424]	; (80013f8 <get_mouse_xy+0x4d8>)
 800124e:	f7ff fa7b 	bl	8000748 <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	633a      	str	r2, [r7, #48]	; 0x30
 8001258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
 800125e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001260:	f993 3000 	ldrsb.w	r3, [r3]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f8db 	bl	8000420 <__aeabi_i2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001270:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800127a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800127e:	f7ff fbc9 	bl	8000a14 <__aeabi_dcmpgt>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d017      	beq.n	80012b8 <get_mouse_xy+0x398>
				*x = -avg_x / ACCEL_DIV;
 8001288:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <get_mouse_xy+0x4d0>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	623a      	str	r2, [r7, #32]
 8001290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	4b57      	ldr	r3, [pc, #348]	; (80013f8 <get_mouse_xy+0x4d8>)
 800129c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012a0:	f7ff fa52 	bl	8000748 <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fbbc 	bl	8000a28 <__aeabi_d2iz>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b25a      	sxtb	r2, r3
 80012b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b6:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// if y trigger is not set and accel is significant
	if (*y == 0) {
 80012b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012ba:	f993 3000 	ldrsb.w	r3, [r3]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d13a      	bne.n	8001338 <get_mouse_xy+0x418>
		if (avg_y < -SIG_ACCEL) {
 80012c2:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <get_mouse_xy+0x4e0>)
 80012c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <get_mouse_xy+0x4dc>)
 80012ce:	f7ff fb83 	bl	80009d8 <__aeabi_dcmplt>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d012      	beq.n	80012fe <get_mouse_xy+0x3de>
			*y = avg_y / ACCEL_DIV;
 80012d8:	4b49      	ldr	r3, [pc, #292]	; (8001400 <get_mouse_xy+0x4e0>)
 80012da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <get_mouse_xy+0x4d8>)
 80012e4:	f7ff fa30 	bl	8000748 <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fb9a 	bl	8000a28 <__aeabi_d2iz>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b25a      	sxtb	r2, r3
 80012f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	e01c      	b.n	8001338 <get_mouse_xy+0x418>
		} else if (avg_y > SIG_ACCEL) {
 80012fe:	4b40      	ldr	r3, [pc, #256]	; (8001400 <get_mouse_xy+0x4e0>)
 8001300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <get_mouse_xy+0x4d4>)
 800130a:	f7ff fb83 	bl	8000a14 <__aeabi_dcmpgt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d011      	beq.n	8001338 <get_mouse_xy+0x418>
			*y = avg_y / ACCEL_DIV;
 8001314:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <get_mouse_xy+0x4e0>)
 8001316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <get_mouse_xy+0x4d8>)
 8001320:	f7ff fa12 	bl	8000748 <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fb7c 	bl	8000a28 <__aeabi_d2iz>
 8001330:	4603      	mov	r3, r0
 8001332:	b25a      	sxtb	r2, r3
 8001334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001336:	701a      	strb	r2, [r3, #0]
		}
	}
	// if y accel is greater than starting accel
	if (*y < 0 || *y > 0) {
 8001338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800133a:	f993 3000 	ldrsb.w	r3, [r3]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db04      	blt.n	800134c <get_mouse_xy+0x42c>
 8001342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001344:	f993 3000 	ldrsb.w	r3, [r3]
 8001348:	2b00      	cmp	r3, #0
 800134a:	dd3f      	ble.n	80013cc <get_mouse_xy+0x4ac>
		if (avg_y < -SIG_ACCEL) {
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <get_mouse_xy+0x4e0>)
 800134e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <get_mouse_xy+0x4dc>)
 8001358:	f7ff fb3e 	bl	80009d8 <__aeabi_dcmplt>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d034      	beq.n	80013cc <get_mouse_xy+0x4ac>
			if (fabs(avg_y / ACCEL_DIV) > fabs(*y)) {
 8001362:	4b27      	ldr	r3, [pc, #156]	; (8001400 <get_mouse_xy+0x4e0>)
 8001364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <get_mouse_xy+0x4d8>)
 800136e:	f7ff f9eb 	bl	8000748 <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	61ba      	str	r2, [r7, #24]
 8001378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001380:	f993 3000 	ldrsb.w	r3, [r3]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f84b 	bl	8000420 <__aeabi_i2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	613a      	str	r2, [r7, #16]
 8001390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800139a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800139e:	f7ff fb39 	bl	8000a14 <__aeabi_dcmpgt>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d011      	beq.n	80013cc <get_mouse_xy+0x4ac>
				*y = avg_y / ACCEL_DIV;
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <get_mouse_xy+0x4e0>)
 80013aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <get_mouse_xy+0x4d8>)
 80013b4:	f7ff f9c8 	bl	8000748 <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb32 	bl	8000a28 <__aeabi_d2iz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b25a      	sxtb	r2, r3
 80013c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ca:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (*y > 0) {
 80013cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ce:	f993 3000 	ldrsb.w	r3, [r3]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dd4c      	ble.n	8001470 <get_mouse_xy+0x550>
		if (avg_y > SIG_ACCEL) {
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <get_mouse_xy+0x4e0>)
 80013d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <get_mouse_xy+0x4d4>)
 80013e2:	f7ff fb17 	bl	8000a14 <__aeabi_dcmpgt>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10b      	bne.n	8001404 <get_mouse_xy+0x4e4>
			if (fabs(avg_y / ACCEL_DIV) > fabs(*y)) {
				*y = avg_y / ACCEL_DIV;
			}
		}
	}
}
 80013ec:	e040      	b.n	8001470 <get_mouse_xy+0x550>
 80013ee:	bf00      	nop
 80013f0:	200001e0 	.word	0x200001e0
 80013f4:	40390000 	.word	0x40390000
 80013f8:	40340000 	.word	0x40340000
 80013fc:	c0390000 	.word	0xc0390000
 8001400:	200001e8 	.word	0x200001e8
			if (fabs(avg_y / ACCEL_DIV) > fabs(*y)) {
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <get_mouse_xy+0x55c>)
 8001406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <get_mouse_xy+0x560>)
 8001410:	f7ff f99a 	bl	8000748 <__aeabi_ddiv>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	60ba      	str	r2, [r7, #8]
 800141a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001422:	f993 3000 	ldrsb.w	r3, [r3]
 8001426:	4618      	mov	r0, r3
 8001428:	f7fe fffa 	bl	8000420 <__aeabi_i2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	603a      	str	r2, [r7, #0]
 8001432:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800143c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001440:	f7ff fae8 	bl	8000a14 <__aeabi_dcmpgt>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d100      	bne.n	800144c <get_mouse_xy+0x52c>
}
 800144a:	e011      	b.n	8001470 <get_mouse_xy+0x550>
				*y = avg_y / ACCEL_DIV;
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <get_mouse_xy+0x55c>)
 800144e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <get_mouse_xy+0x560>)
 8001458:	f7ff f976 	bl	8000748 <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fae0 	bl	8000a28 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
 800146a:	b25a      	sxtb	r2, r3
 800146c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800146e:	701a      	strb	r2, [r3, #0]
}
 8001470:	bf00      	nop
 8001472:	3768      	adds	r7, #104	; 0x68
 8001474:	46bd      	mov	sp, r7
 8001476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800147a:	bf00      	nop
 800147c:	200001e8 	.word	0x200001e8
 8001480:	40340000 	.word	0x40340000

08001484 <calculate_encoder_diff>:
#include "wheel.h"

int8_t calculate_encoder_diff(uint32_t prev_pos, uint32_t cur_pos) {
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	// calculates encoder diff
	// prev_pos - previous position of the encoder
	// cur_pos - current position of the encoder
	int diff = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
	if (prev_pos > ENCODER_QUADRANT_3 && cur_pos < ENCODER_QUADRANT) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8001498:	4293      	cmp	r3, r2
 800149a:	d90c      	bls.n	80014b6 <calculate_encoder_diff+0x32>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d807      	bhi.n	80014b6 <calculate_encoder_diff+0x32>
		// encoder counter overflow from high to low
		diff = 65535 - prev_pos + cur_pos;
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80014b0:	33ff      	adds	r3, #255	; 0xff
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	e015      	b.n	80014e2 <calculate_encoder_diff+0x5e>
	} else if (prev_pos < ENCODER_QUADRANT && cur_pos > ENCODER_QUADRANT_3) {
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 80014bc:	4293      	cmp	r3, r2
 80014be:	d80c      	bhi.n	80014da <calculate_encoder_diff+0x56>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d907      	bls.n	80014da <calculate_encoder_diff+0x56>
		// encoder counter overflow from low to high
		diff = -65535 + cur_pos - prev_pos;
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80014d4:	3bff      	subs	r3, #255	; 0xff
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	e003      	b.n	80014e2 <calculate_encoder_diff+0x5e>
	} else {
		// encoder didn't overflow
		diff = cur_pos - prev_pos;
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	60fb      	str	r3, [r7, #12]
	}
	return (int8_t) clamp(INT8_MIN, INT8_MAX, diff);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80014e8:	db07      	blt.n	80014fa <calculate_encoder_diff+0x76>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b7f      	cmp	r3, #127	; 0x7f
 80014ee:	dc02      	bgt.n	80014f6 <calculate_encoder_diff+0x72>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	e003      	b.n	80014fe <calculate_encoder_diff+0x7a>
 80014f6:	237f      	movs	r3, #127	; 0x7f
 80014f8:	e001      	b.n	80014fe <calculate_encoder_diff+0x7a>
 80014fa:	f06f 037f 	mvn.w	r3, #127	; 0x7f
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <get_wheel_change>:

uint32_t encoder_prev = 0;
int8_t get_wheel_change(uint32_t encoder_timer_count) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	// returns wheel change -1, 0 or 1 when compared to the last wheel position
	// encoder_timer_count - current wheel encoder timer count
	uint32_t encoder_cur = encoder_timer_count;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60fb      	str	r3, [r7, #12]
	int8_t diff = calculate_encoder_diff(encoder_prev, encoder_cur);
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <get_wheel_change+0x48>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68f9      	ldr	r1, [r7, #12]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ffb0 	bl	8001484 <calculate_encoder_diff>
 8001524:	4603      	mov	r3, r0
 8001526:	72fb      	strb	r3, [r7, #11]
	encoder_prev = encoder_cur;
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <get_wheel_change+0x48>)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6013      	str	r3, [r2, #0]
	if (diff < 0) {
 800152e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001532:	2b00      	cmp	r3, #0
 8001534:	da02      	bge.n	800153c <get_wheel_change+0x30>
		return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e006      	b.n	800154a <get_wheel_change+0x3e>
	}
	if (diff > 0) {
 800153c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001540:	2b00      	cmp	r3, #0
 8001542:	dd01      	ble.n	8001548 <get_wheel_change+0x3c>
		return 1;
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <get_wheel_change+0x3e>
	}
	return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000218 	.word	0x20000218

08001558 <update_wheel>:

int wheel_t = 0;
void update_wheel(int8_t *wheel, uint32_t encoder_timer_count) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
	// updates wheel
	// wheel - wheel value pointer
	// encoder_timer_count - current wheel encoder timer count
	int new_wheel = get_wheel_change(TIM1->CNT);
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <update_wheel+0x50>)
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ffd0 	bl	800150c <get_wheel_change>
 800156c:	4603      	mov	r3, r0
 800156e:	60fb      	str	r3, [r7, #12]
	if (*wheel == 0 || wheel_t > 10) {
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f993 3000 	ldrsb.w	r3, [r3]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <update_wheel+0x2a>
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <update_wheel+0x54>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b0a      	cmp	r3, #10
 8001580:	dd07      	ble.n	8001592 <update_wheel+0x3a>
		*wheel = new_wheel;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	b25a      	sxtb	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	701a      	strb	r2, [r3, #0]
		wheel_t = 0;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <update_wheel+0x54>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	e005      	b.n	800159e <update_wheel+0x46>
	} else {
		wheel_t++;
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <update_wheel+0x54>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <update_wheel+0x54>)
 800159a:	6013      	str	r3, [r2, #0]
	}
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40012c00 	.word	0x40012c00
 80015ac:	2000021c 	.word	0x2000021c

080015b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015d4:	68fb      	ldr	r3, [r7, #12]
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	2002      	movs	r0, #2
 80015fa:	f7ff ffd9 	bl	80015b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff ffd6 	bl	80015b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001604:	2010      	movs	r0, #16
 8001606:	f7ff ffd3 	bl	80015b0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001610:	4825      	ldr	r0, [pc, #148]	; (80016a8 <MX_GPIO_Init+0xc4>)
 8001612:	f000 feb7 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2110      	movs	r1, #16
 800161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161e:	f000 feb1 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001626:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	4619      	mov	r1, r3
 8001638:	481b      	ldr	r0, [pc, #108]	; (80016a8 <MX_GPIO_Init+0xc4>)
 800163a:	f000 fd23 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800163e:	2310      	movs	r3, #16
 8001640:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	4619      	mov	r1, r3
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f000 fd15 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_DOWN_Pin|RIGHT_UP_Pin|LEFT_DOWN_Pin|B4_DOWN_Pin
 800165a:	23fb      	movs	r3, #251	; 0xfb
 800165c:	607b      	str	r3, [r7, #4]
                          |B4_UP_Pin|B5_DOWN_Pin|B5_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	480f      	ldr	r0, [pc, #60]	; (80016a8 <MX_GPIO_Init+0xc4>)
 800166c:	f000 fd0a 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIDDLE_DOWN_Pin;
 8001670:	2310      	movs	r3, #16
 8001672:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MIDDLE_DOWN_GPIO_Port, &GPIO_InitStruct);
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4619      	mov	r1, r3
 8001680:	480a      	ldr	r0, [pc, #40]	; (80016ac <MX_GPIO_Init+0xc8>)
 8001682:	f000 fcff 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MIDDLE_UP_Pin|LEFT_UP_Pin;
 8001686:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800168a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	4619      	mov	r1, r3
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f000 fcf2 	bl	8002084 <HAL_GPIO_Init>

}
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	48000400 	.word	0x48000400
 80016ac:	48001000 	.word	0x48001000

080016b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80016b6:	f000 fb2b 	bl	8001d10 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80016ba:	f000 f85d 	bl	8001778 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80016be:	f000 f8c7 	bl	8001850 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016c2:	f7ff ff8f 	bl	80015e4 <MX_GPIO_Init>
	MX_USB_Device_Init();
 80016c6:	f008 fdcf 	bl	800a268 <MX_USB_Device_Init>
	MX_SPI1_Init();
 80016ca:	f000 f915 	bl	80018f8 <MX_SPI1_Init>
	MX_TIM1_Init();
 80016ce:	f000 fa5d 	bl	8001b8c <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	// start encoder timer
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80016d2:	2104      	movs	r1, #4
 80016d4:	481c      	ldr	r0, [pc, #112]	; (8001748 <main+0x98>)
 80016d6:	f005 f909 	bl	80068ec <HAL_TIM_Encoder_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	imu_setup();
 80016da:	f7ff faa7 	bl	8000c2c <imu_setup>
	int wheel_t = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
	while (1) {
		// buttons
		update_buttons();
 80016e2:	f7ff f9c9 	bl	8000a78 <update_buttons>
		report.buttons = (left_down << 0) | (right_down << 1)
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <main+0x9c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	b25a      	sxtb	r2, r3
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <main+0xa0>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b25a      	sxtb	r2, r3
				| (middle_down << 2) | (b5_down << 3) | (b4_down << 4);
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <main+0xa4>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b25a      	sxtb	r2, r3
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <main+0xa8>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	b25b      	sxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b25a      	sxtb	r2, r3
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <main+0xac>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	b25b      	sxtb	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b25b      	sxtb	r3, r3
 800171c:	b2da      	uxtb	r2, r3
		report.buttons = (left_down << 0) | (right_down << 1)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <main+0xb0>)
 8001720:	701a      	strb	r2, [r3, #0]

		// wheel
		update_wheel(&report.wheel, TIM1->CNT);
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <main+0xb4>)
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	4619      	mov	r1, r3
 8001728:	480f      	ldr	r0, [pc, #60]	; (8001768 <main+0xb8>)
 800172a:	f7ff ff15 	bl	8001558 <update_wheel>

		// mouse x, y
		get_mouse_xy(&report.x, &report.y);
 800172e:	490f      	ldr	r1, [pc, #60]	; (800176c <main+0xbc>)
 8001730:	480f      	ldr	r0, [pc, #60]	; (8001770 <main+0xc0>)
 8001732:	f7ff fbf5 	bl	8000f20 <get_mouse_xy>

		USBD_HID_SendReport(&hUsbDeviceFS, &report, 4);
 8001736:	2204      	movs	r2, #4
 8001738:	4909      	ldr	r1, [pc, #36]	; (8001760 <main+0xb0>)
 800173a:	480e      	ldr	r0, [pc, #56]	; (8001774 <main+0xc4>)
 800173c:	f007 fc18 	bl	8008f70 <USBD_HID_SendReport>
		HAL_Delay(1);
 8001740:	2001      	movs	r0, #1
 8001742:	f000 fb6b 	bl	8001e1c <HAL_Delay>
		update_buttons();
 8001746:	e7cc      	b.n	80016e2 <main+0x32>
 8001748:	200002a8 	.word	0x200002a8
 800174c:	200001a6 	.word	0x200001a6
 8001750:	200001a4 	.word	0x200001a4
 8001754:	200001a5 	.word	0x200001a5
 8001758:	200001a8 	.word	0x200001a8
 800175c:	200001a7 	.word	0x200001a7
 8001760:	20000240 	.word	0x20000240
 8001764:	40012c00 	.word	0x40012c00
 8001768:	20000243 	.word	0x20000243
 800176c:	20000242 	.word	0x20000242
 8001770:	20000241 	.word	0x20000241
 8001774:	200002f8 	.word	0x200002f8

08001778 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b09a      	sub	sp, #104	; 0x68
 800177c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800177e:	f107 0320 	add.w	r3, r7, #32
 8001782:	2248      	movs	r2, #72	; 0x48
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f009 f9fe 	bl	800ab88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <SystemClock_Config+0xd4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a6:	4a29      	ldr	r2, [pc, #164]	; (800184c <SystemClock_Config+0xd4>)
 80017a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <SystemClock_Config+0xd4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80017ba:	2326      	movs	r3, #38	; 0x26
 80017bc:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80017be:	2300      	movs	r3, #0
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017c8:	2301      	movs	r3, #1
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017cc:	2340      	movs	r3, #64	; 0x40
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80017d0:	2300      	movs	r3, #0
 80017d2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017d4:	2360      	movs	r3, #96	; 0x60
 80017d6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d8:	2302      	movs	r3, #2
 80017da:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017dc:	2301      	movs	r3, #1
 80017de:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 32;
 80017e4:	2320      	movs	r3, #32
 80017e6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ec:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017f2:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f8:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017fa:	f107 0320 	add.w	r3, r7, #32
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fe80 	bl	8004504 <HAL_RCC_OscConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0x96>
		Error_Handler();
 800180a:	f000 f83e 	bl	800188a <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 800180e:	236f      	movs	r3, #111	; 0x6f
 8001810:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001812:	2303      	movs	r3, #3
 8001814:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2103      	movs	r1, #3
 800182e:	4618      	mov	r0, r3
 8001830:	f003 f9f4 	bl	8004c1c <HAL_RCC_ClockConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0xc6>
		Error_Handler();
 800183a:	f000 f826 	bl	800188a <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 800183e:	f003 ff87 	bl	8005750 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001842:	bf00      	nop
 8001844:	3768      	adds	r7, #104	; 0x68
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	58000400 	.word	0x58000400

08001850 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b094      	sub	sp, #80	; 0x50
 8001854:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001856:	463b      	mov	r3, r7
 8001858:	2250      	movs	r2, #80	; 0x50
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f009 f993 	bl	800ab88 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001866:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001868:	2300      	movs	r3, #0
 800186a:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800186c:	2310      	movs	r3, #16
 800186e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001870:	463b      	mov	r3, r7
 8001872:	4618      	mov	r0, r3
 8001874:	f003 fdf6 	bl	8005464 <HAL_RCCEx_PeriphCLKConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <PeriphCommonClock_Config+0x32>
		Error_Handler();
 800187e:	f000 f804 	bl	800188a <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8001882:	bf00      	nop
 8001884:	3750      	adds	r7, #80	; 0x50
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188e:	b672      	cpsid	i
}
 8001890:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001892:	e7fe      	b.n	8001892 <Error_Handler+0x8>

08001894 <LL_AHB2_GRP1_EnableClock>:
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4013      	ands	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b8:	68fb      	ldr	r3, [r7, #12]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4313      	orrs	r3, r2
 80018dc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4013      	ands	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <MX_SPI1_Init+0x74>)
 80018fe:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <MX_SPI1_Init+0x78>)
 8001900:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <MX_SPI1_Init+0x74>)
 8001904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001908:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_SPI1_Init+0x74>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <MX_SPI1_Init+0x74>)
 8001912:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001916:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_SPI1_Init+0x74>)
 800191a:	2202      	movs	r2, #2
 800191c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <MX_SPI1_Init+0x74>)
 8001920:	2201      	movs	r2, #1
 8001922:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_SPI1_Init+0x74>)
 8001926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800192a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_SPI1_Init+0x74>)
 800192e:	2210      	movs	r2, #16
 8001930:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_SPI1_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_SPI1_Init+0x74>)
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <MX_SPI1_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_SPI1_Init+0x74>)
 8001946:	2207      	movs	r2, #7
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <MX_SPI1_Init+0x74>)
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_SPI1_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_SPI1_Init+0x74>)
 8001958:	f004 f811 	bl	800597e <HAL_SPI_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001962:	f7ff ff92 	bl	800188a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000244 	.word	0x20000244
 8001970:	40013000 	.word	0x40013000

08001974 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <HAL_SPI_MspInit+0x5c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d117      	bne.n	80019c6 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001996:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800199a:	f7ff ff94 	bl	80018c6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff ff78 	bl	8001894 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80019a4:	23c2      	movs	r3, #194	; 0xc2
 80019a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019b4:	2305      	movs	r3, #5
 80019b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	4619      	mov	r1, r3
 80019be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c2:	f000 fb5f 	bl	8002084 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40013000 	.word	0x40013000

080019d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2101      	movs	r1, #1
 80019dc:	f06f 000b 	mvn.w	r0, #11
 80019e0:	f000 fb1b 	bl	800201a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2101      	movs	r1, #1
 80019e8:	f06f 000a 	mvn.w	r0, #10
 80019ec:	f000 fb15 	bl	800201a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2101      	movs	r1, #1
 80019f4:	f06f 0009 	mvn.w	r0, #9
 80019f8:	f000 fb0f 	bl	800201a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2101      	movs	r1, #1
 8001a00:	f06f 0004 	mvn.w	r0, #4
 8001a04:	f000 fb09 	bl	800201a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	f06f 0003 	mvn.w	r0, #3
 8001a10:	f000 fb03 	bl	800201a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2101      	movs	r1, #1
 8001a18:	f06f 0001 	mvn.w	r0, #1
 8001a1c:	f000 fafd 	bl	800201a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <NMI_Handler+0x4>

08001a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler+0x4>

08001a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a70:	f000 f9a8 	bl	8001dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <USB_LP_IRQHandler+0x10>)
 8001a7e:	f000 fda0 	bl	80025c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200007c8 	.word	0x200007c8

08001a8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <SystemInit+0x90>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a96:	4a21      	ldr	r2, [pc, #132]	; (8001b1c <SystemInit+0x90>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001ab8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <SystemInit+0x94>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad6:	f023 0305 	bic.w	r3, r3, #5
 8001ada:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af6:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <SystemInit+0x98>)
 8001af8:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00
 8001b20:	faf6fefb 	.word	0xfaf6fefb
 8001b24:	22041000 	.word	0x22041000

08001b28 <LL_AHB2_GRP1_EnableClock>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_APB2_GRP1_EnableClock>:
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b085      	sub	sp, #20
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	; 0x30
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	2224      	movs	r2, #36	; 0x24
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f008 fff4 	bl	800ab88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <MX_TIM1_Init+0xac>)
 8001bac:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <MX_TIM1_Init+0xb0>)
 8001bae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <MX_TIM1_Init+0xac>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <MX_TIM1_Init+0xac>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <MX_TIM1_Init+0xac>)
 8001bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <MX_TIM1_Init+0xac>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bca:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <MX_TIM1_Init+0xac>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <MX_TIM1_Init+0xac>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bde:	2301      	movs	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480d      	ldr	r0, [pc, #52]	; (8001c38 <MX_TIM1_Init+0xac>)
 8001c02:	f004 fdcd 	bl	80067a0 <HAL_TIM_Encoder_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001c0c:	f7ff fe3d 	bl	800188a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_TIM1_Init+0xac>)
 8001c22:	f004 ff7b 	bl	8006b1c <HAL_TIMEx_MasterConfigSynchronization>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001c2c:	f7ff fe2d 	bl	800188a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	3730      	adds	r7, #48	; 0x30
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200002a8 	.word	0x200002a8
 8001c3c:	40012c00 	.word	0x40012c00

08001c40 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_TIM_Encoder_MspInit+0x5c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d118      	bne.n	8001c94 <HAL_TIM_Encoder_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c62:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c66:	f7ff ff78 	bl	8001b5a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f7ff ff5c 	bl	8001b28 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f000 f9f8 	bl	8002084 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40012c00 	.word	0x40012c00

08001ca0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ca0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca4:	3304      	adds	r3, #4

08001ca6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001caa:	d3f9      	bcc.n	8001ca0 <CopyDataInit>
  bx lr
 8001cac:	4770      	bx	lr

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001cae:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001cb0:	3004      	adds	r0, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001cb2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>
  bx lr
 8001cb6:	4770      	bx	lr

08001cb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001cba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cbc:	f7ff fee6 	bl	8001a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001cc0:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <LoopForever+0x8>)
 8001cc2:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <LoopForever+0xc>)
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <LoopForever+0x10>)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f7ff ffed 	bl	8001ca6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001ccc:	480b      	ldr	r0, [pc, #44]	; (8001cfc <LoopForever+0x14>)
 8001cce:	490c      	ldr	r1, [pc, #48]	; (8001d00 <LoopForever+0x18>)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f7ff ffee 	bl	8001cb2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001cd6:	480b      	ldr	r0, [pc, #44]	; (8001d04 <LoopForever+0x1c>)
 8001cd8:	490b      	ldr	r1, [pc, #44]	; (8001d08 <LoopForever+0x20>)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f7ff ffe9 	bl	8001cb2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ce0:	f008 ff2e 	bl	800ab40 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001ce4:	f7ff fce4 	bl	80016b0 <main>

08001ce8 <LoopForever>:

LoopForever:
  b LoopForever
 8001ce8:	e7fe      	b.n	8001ce8 <LoopForever>
 8001cea:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001cec:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8001cf0:	20000004 	.word	0x20000004
 8001cf4:	20000184 	.word	0x20000184
 8001cf8:	0800acac 	.word	0x0800acac
  INIT_BSS _sbss, _ebss
 8001cfc:	20000188 	.word	0x20000188
 8001d00:	20000abc 	.word	0x20000abc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001d04:	20030000 	.word	0x20030000
 8001d08:	20030000 	.word	0x20030000

08001d0c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC1_IRQHandler>
	...

08001d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_Init+0x3c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <HAL_Init+0x3c>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d26:	2003      	movs	r0, #3
 8001d28:	f000 f96c 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f000 f80f 	bl	8001d50 <HAL_InitTick>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	71fb      	strb	r3, [r7, #7]
 8001d3c:	e001      	b.n	8001d42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d3e:	f7ff fe49 	bl	80019d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d42:	79fb      	ldrb	r3, [r7, #7]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	58004000 	.word	0x58004000

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001d5c:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_InitTick+0x6c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d024      	beq.n	8001dae <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d64:	f003 f906 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_InitTick+0x6c>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d74:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 f974 	bl	800206a <HAL_SYSTICK_Config>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10f      	bne.n	8001da8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b0f      	cmp	r3, #15
 8001d8c:	d809      	bhi.n	8001da2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	f04f 30ff 	mov.w	r0, #4294967295
 8001d96:	f000 f940 	bl	800201a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d9a:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <HAL_InitTick+0x70>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e007      	b.n	8001db2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	e004      	b.n	8001db2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000024 	.word	0x20000024
 8001dc0:	20000020 	.word	0x20000020

08001dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x20>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_IncTick+0x24>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <HAL_IncTick+0x24>)
 8001dd6:	6013      	str	r3, [r2, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000024 	.word	0x20000024
 8001de8:	200002f4 	.word	0x200002f4

08001dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_GetTick+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	200002f4 	.word	0x200002f4

08001e04 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <HAL_GetTickPrio+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000020 	.word	0x20000020

08001e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff ffe2 	bl	8001dec <HAL_GetTick>
 8001e28:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d005      	beq.n	8001e42 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_Delay+0x44>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001e42:	bf00      	nop
 8001e44:	f7ff ffd2 	bl	8001dec <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f7      	bhi.n	8001e44 <HAL_Delay+0x28>
    {
    }
  }
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000024 	.word	0x20000024

08001e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db0b      	blt.n	8001ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4907      	ldr	r1, [pc, #28]	; (8001f00 <__NVIC_EnableIRQ+0x38>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2001      	movs	r0, #1
 8001eea:	fa00 f202 	lsl.w	r2, r0, r2
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000e100 	.word	0xe000e100

08001f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db0a      	blt.n	8001f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	490c      	ldr	r1, [pc, #48]	; (8001f50 <__NVIC_SetPriority+0x4c>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	440b      	add	r3, r1
 8001f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f2c:	e00a      	b.n	8001f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4908      	ldr	r1, [pc, #32]	; (8001f54 <__NVIC_SetPriority+0x50>)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	3b04      	subs	r3, #4
 8001f3c:	0112      	lsls	r2, r2, #4
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	440b      	add	r3, r1
 8001f42:	761a      	strb	r2, [r3, #24]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000e100 	.word	0xe000e100
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f1c3 0307 	rsb	r3, r3, #7
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	bf28      	it	cs
 8001f76:	2304      	movcs	r3, #4
 8001f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d902      	bls.n	8001f88 <NVIC_EncodePriority+0x30>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3b03      	subs	r3, #3
 8001f86:	e000      	b.n	8001f8a <NVIC_EncodePriority+0x32>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	4313      	orrs	r3, r2
         );
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd0:	d301      	bcc.n	8001fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00f      	b.n	8001ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <SysTick_Config+0x40>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fde:	210f      	movs	r1, #15
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f7ff ff8e 	bl	8001f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <SysTick_Config+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <SysTick_Config+0x40>)
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	e000e010 	.word	0xe000e010

08002004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff29 	bl	8001e64 <__NVIC_SetPriorityGrouping>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002028:	f7ff ff40 	bl	8001eac <__NVIC_GetPriorityGrouping>
 800202c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	6978      	ldr	r0, [r7, #20]
 8002034:	f7ff ff90 	bl	8001f58 <NVIC_EncodePriority>
 8002038:	4602      	mov	r2, r0
 800203a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff5f 	bl	8001f04 <__NVIC_SetPriority>
}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff33 	bl	8001ec8 <__NVIC_EnableIRQ>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffa4 	bl	8001fc0 <SysTick_Config>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002092:	e146      	b.n	8002322 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	2101      	movs	r1, #1
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	4013      	ands	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8138 	beq.w	800231c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d005      	beq.n	80020c4 <HAL_GPIO_Init+0x40>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d130      	bne.n	8002126 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020fa:	2201      	movs	r2, #1
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 0201 	and.w	r2, r3, #1
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b03      	cmp	r3, #3
 8002130:	d017      	beq.n	8002162 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d123      	bne.n	80021b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	08da      	lsrs	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3208      	adds	r2, #8
 80021b0:	6939      	ldr	r1, [r7, #16]
 80021b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0203 	and.w	r2, r3, #3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8092 	beq.w	800231c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80021f8:	4a51      	ldr	r2, [pc, #324]	; (8002340 <HAL_GPIO_Init+0x2bc>)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3302      	adds	r3, #2
 8002200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	220f      	movs	r2, #15
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002222:	d013      	beq.n	800224c <HAL_GPIO_Init+0x1c8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a47      	ldr	r2, [pc, #284]	; (8002344 <HAL_GPIO_Init+0x2c0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00d      	beq.n	8002248 <HAL_GPIO_Init+0x1c4>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a46      	ldr	r2, [pc, #280]	; (8002348 <HAL_GPIO_Init+0x2c4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d007      	beq.n	8002244 <HAL_GPIO_Init+0x1c0>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a45      	ldr	r2, [pc, #276]	; (800234c <HAL_GPIO_Init+0x2c8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d101      	bne.n	8002240 <HAL_GPIO_Init+0x1bc>
 800223c:	2304      	movs	r3, #4
 800223e:	e006      	b.n	800224e <HAL_GPIO_Init+0x1ca>
 8002240:	2307      	movs	r3, #7
 8002242:	e004      	b.n	800224e <HAL_GPIO_Init+0x1ca>
 8002244:	2302      	movs	r3, #2
 8002246:	e002      	b.n	800224e <HAL_GPIO_Init+0x1ca>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_GPIO_Init+0x1ca>
 800224c:	2300      	movs	r3, #0
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	f002 0203 	and.w	r2, r2, #3
 8002254:	0092      	lsls	r2, r2, #2
 8002256:	4093      	lsls	r3, r2
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800225e:	4938      	ldr	r1, [pc, #224]	; (8002340 <HAL_GPIO_Init+0x2bc>)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800226c:	4b38      	ldr	r3, [pc, #224]	; (8002350 <HAL_GPIO_Init+0x2cc>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002290:	4a2f      	ldr	r2, [pc, #188]	; (8002350 <HAL_GPIO_Init+0x2cc>)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002296:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <HAL_GPIO_Init+0x2cc>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022ba:	4a25      	ldr	r2, [pc, #148]	; (8002350 <HAL_GPIO_Init+0x2cc>)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_GPIO_Init+0x2cc>)
 80022c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022e6:	4a1a      	ldr	r2, [pc, #104]	; (8002350 <HAL_GPIO_Init+0x2cc>)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_GPIO_Init+0x2cc>)
 80022f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <HAL_GPIO_Init+0x2cc>)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3301      	adds	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	f47f aeb1 	bne.w	8002094 <HAL_GPIO_Init+0x10>
  }
}
 8002332:	bf00      	nop
 8002334:	bf00      	nop
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40010000 	.word	0x40010000
 8002344:	48000400 	.word	0x48000400
 8002348:	48000800 	.word	0x48000800
 800234c:	48001000 	.word	0x48001000
 8002350:	58000800 	.word	0x58000800

08002354 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	e001      	b.n	8002376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
 8002390:	4613      	mov	r3, r2
 8002392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002394:	787b      	ldrb	r3, [r7, #1]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b6:	b08b      	sub	sp, #44	; 0x2c
 80023b8:	af06      	add	r7, sp, #24
 80023ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0d7      	b.n	8002576 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f008 f8ac 	bl	800a538 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2203      	movs	r2, #3
 80023e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f004 fc0c 	bl	8006c0a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	e04c      	b.n	8002492 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	3301      	adds	r3, #1
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	b298      	uxth	r0, r3
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	3336      	adds	r3, #54	; 0x36
 8002436:	4602      	mov	r2, r0
 8002438:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	3303      	adds	r3, #3
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	440b      	add	r3, r1
 800245e:	3338      	adds	r3, #56	; 0x38
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	333c      	adds	r3, #60	; 0x3c
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	3340      	adds	r3, #64	; 0x40
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	3301      	adds	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d3ad      	bcc.n	80023f8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e044      	b.n	800252c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	440b      	add	r3, r1
 80024b0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	440b      	add	r3, r1
 80024c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	440b      	add	r3, r1
 80024f2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	440b      	add	r3, r1
 8002508:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	440b      	add	r3, r1
 800251e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3301      	adds	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	d3b5      	bcc.n	80024a2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	687e      	ldr	r6, [r7, #4]
 800253e:	466d      	mov	r5, sp
 8002540:	f106 0410 	add.w	r4, r6, #16
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	602b      	str	r3, [r5, #0]
 800254c:	1d33      	adds	r3, r6, #4
 800254e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002550:	6838      	ldr	r0, [r7, #0]
 8002552:	f004 fb75 	bl	8006c40 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d102      	bne.n	8002574 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f001 fc11 	bl	8003d96 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800257e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_PCD_Start+0x16>
 8002590:	2302      	movs	r3, #2
 8002592:	e012      	b.n	80025ba <HAL_PCD_Start+0x3c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f004 fb1b 	bl	8006bdc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f006 fad0 	bl	8008b50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f006 fad5 	bl	8008b7e <USB_ReadInterrupts>
 80025d4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fb0e 	bl	8002c02 <PCD_EP_ISR_Handler>

    return;
 80025e6:	e110      	b.n	800280a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d013      	beq.n	800261a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002604:	b292      	uxth	r2, r2
 8002606:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f008 f847 	bl	800a69e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002610:	2100      	movs	r1, #0
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f8fc 	bl	8002810 <HAL_PCD_SetAddress>

    return;
 8002618:	e0f7      	b.n	800280a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00c      	beq.n	800263e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800262c:	b29a      	uxth	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002636:	b292      	uxth	r2, r2
 8002638:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800263c:	e0e5      	b.n	800280a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00c      	beq.n	8002662 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002650:	b29a      	uxth	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800265a:	b292      	uxth	r2, r2
 800265c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002660:	e0d3      	b.n	800280a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d034      	beq.n	80026d6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002674:	b29a      	uxth	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0204 	bic.w	r2, r2, #4
 800267e:	b292      	uxth	r2, r2
 8002680:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800268c:	b29a      	uxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0208 	bic.w	r2, r2, #8
 8002696:	b292      	uxth	r2, r2
 8002698:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d107      	bne.n	80026b6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026ae:	2100      	movs	r1, #0
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f008 f9c5 	bl	800aa40 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f008 f82a 	bl	800a710 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026ce:	b292      	uxth	r2, r2
 80026d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80026d4:	e099      	b.n	800280a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d027      	beq.n	8002730 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0208 	orr.w	r2, r2, #8
 80026f2:	b292      	uxth	r2, r2
 80026f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002700:	b29a      	uxth	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270a:	b292      	uxth	r2, r2
 800270c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002718:	b29a      	uxth	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0204 	orr.w	r2, r2, #4
 8002722:	b292      	uxth	r2, r2
 8002724:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f007 ffd7 	bl	800a6dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800272e:	e06c      	b.n	800280a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002736:	2b00      	cmp	r3, #0
 8002738:	d040      	beq.n	80027bc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002742:	b29a      	uxth	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800274c:	b292      	uxth	r2, r2
 800274e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d12b      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002764:	b29a      	uxth	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0204 	orr.w	r2, r2, #4
 800276e:	b292      	uxth	r2, r2
 8002770:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800277c:	b29a      	uxth	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0208 	orr.w	r2, r2, #8
 8002786:	b292      	uxth	r2, r2
 8002788:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800279c:	b29b      	uxth	r3, r3
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80027aa:	2101      	movs	r1, #1
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f008 f947 	bl	800aa40 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80027b2:	e02a      	b.n	800280a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f007 ff91 	bl	800a6dc <HAL_PCD_SuspendCallback>
    return;
 80027ba:	e026      	b.n	800280a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00f      	beq.n	80027e6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027d8:	b292      	uxth	r2, r2
 80027da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f007 ff4f 	bl	800a682 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80027e4:	e011      	b.n	800280a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00c      	beq.n	800280a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002802:	b292      	uxth	r2, r2
 8002804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002808:	bf00      	nop
  }
}
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_PCD_SetAddress+0x1a>
 8002826:	2302      	movs	r3, #2
 8002828:	e013      	b.n	8002852 <HAL_PCD_SetAddress+0x42>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f006 f970 	bl	8008b28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	4608      	mov	r0, r1
 8002864:	4611      	mov	r1, r2
 8002866:	461a      	mov	r2, r3
 8002868:	4603      	mov	r3, r0
 800286a:	70fb      	strb	r3, [r7, #3]
 800286c:	460b      	mov	r3, r1
 800286e:	803b      	strh	r3, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800287c:	2b00      	cmp	r3, #0
 800287e:	da0e      	bge.n	800289e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	705a      	strb	r2, [r3, #1]
 800289c:	e00e      	b.n	80028bc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	f003 0207 	and.w	r2, r3, #7
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028c8:	883a      	ldrh	r2, [r7, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	78ba      	ldrb	r2, [r7, #2]
 80028d2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	785b      	ldrb	r3, [r3, #1]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028e6:	78bb      	ldrb	r3, [r7, #2]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d102      	bne.n	80028f2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_PCD_EP_Open+0xa6>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e00e      	b.n	800291e <HAL_PCD_EP_Open+0xc4>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68f9      	ldr	r1, [r7, #12]
 800290e:	4618      	mov	r0, r3
 8002910:	f004 f9b8 	bl	8006c84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800291c:	7afb      	ldrb	r3, [r7, #11]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002936:	2b00      	cmp	r3, #0
 8002938:	da0e      	bge.n	8002958 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	705a      	strb	r2, [r3, #1]
 8002956:	e00e      	b.n	8002976 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f003 0207 	and.w	r2, r3, #7
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	b2da      	uxtb	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_PCD_EP_Close+0x6a>
 800298c:	2302      	movs	r3, #2
 800298e:	e00e      	b.n	80029ae <HAL_PCD_EP_Close+0x88>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68f9      	ldr	r1, [r7, #12]
 800299e:	4618      	mov	r0, r3
 80029a0:	f004 fd04 	bl	80073ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	460b      	mov	r3, r1
 80029c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029c6:	7afb      	ldrb	r3, [r7, #11]
 80029c8:	f003 0207 	and.w	r2, r3, #7
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4413      	add	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2200      	movs	r2, #0
 80029f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029f6:	7afb      	ldrb	r3, [r7, #11]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a02:	7afb      	ldrb	r3, [r7, #11]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d106      	bne.n	8002a1a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6979      	ldr	r1, [r7, #20]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f004 feb7 	bl	8007786 <USB_EPStartXfer>
 8002a18:	e005      	b.n	8002a26 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6979      	ldr	r1, [r7, #20]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f004 feb0 	bl	8007786 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a40:	7afb      	ldrb	r3, [r7, #11]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2200      	movs	r2, #0
 8002a74:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a7c:	7afb      	ldrb	r3, [r7, #11]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a88:	7afb      	ldrb	r3, [r7, #11]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6979      	ldr	r1, [r7, #20]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f004 fe74 	bl	8007786 <USB_EPStartXfer>
 8002a9e:	e005      	b.n	8002aac <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6979      	ldr	r1, [r7, #20]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 fe6d 	bl	8007786 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	f003 0207 	and.w	r2, r3, #7
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d901      	bls.n	8002ad4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e03e      	b.n	8002b52 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	da0e      	bge.n	8002afa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	705a      	strb	r2, [r3, #1]
 8002af8:	e00c      	b.n	8002b14 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_PCD_EP_SetStall+0x7e>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e00e      	b.n	8002b52 <HAL_PCD_EP_SetStall+0x9c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68f9      	ldr	r1, [r7, #12]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f005 fef1 	bl	800892a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	f003 020f 	and.w	r2, r3, #15
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d901      	bls.n	8002b78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e040      	b.n	8002bfa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	da0e      	bge.n	8002b9e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	705a      	strb	r2, [r3, #1]
 8002b9c:	e00e      	b.n	8002bbc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	f003 0207 	and.w	r2, r3, #7
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_PCD_EP_ClrStall+0x82>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e00e      	b.n	8002bfa <HAL_PCD_EP_ClrStall+0xa0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68f9      	ldr	r1, [r7, #12]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f005 feee 	bl	80089cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b096      	sub	sp, #88	; 0x58
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c0a:	e39c      	b.n	8003346 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002c26:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 815e 	bne.w	8002eec <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d150      	bne.n	8002cde <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4c:	81fb      	strh	r3, [r7, #14]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	89fb      	ldrh	r3, [r7, #14]
 8002c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3328      	adds	r3, #40	; 0x28
 8002c64:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	441a      	add	r2, r3
 8002c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f007 fcd5 	bl	800a64e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 834a 	beq.w	8003346 <PCD_EP_ISR_Handler+0x744>
 8002cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 8345 	bne.w	8003346 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	b292      	uxth	r2, r2
 8002cd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cdc:	e333      	b.n	8003346 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002cf0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d032      	beq.n	8002d62 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	4413      	add	r3, r2
 8002d16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d22:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d30:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d34:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f005 ff73 	bl	8008c22 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d48:	4013      	ands	r3, r2
 8002d4a:	823b      	strh	r3, [r7, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	8a3a      	ldrh	r2, [r7, #16]
 8002d52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d56:	b292      	uxth	r2, r2
 8002d58:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f007 fc4a 	bl	800a5f4 <HAL_PCD_SetupStageCallback>
 8002d60:	e2f1      	b.n	8003346 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d62:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f280 82ed 	bge.w	8003346 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d78:	4013      	ands	r3, r2
 8002d7a:	83fb      	strh	r3, [r7, #30]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	8bfa      	ldrh	r2, [r7, #30]
 8002d82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d86:	b292      	uxth	r2, r2
 8002d88:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d019      	beq.n	8002dee <PCD_EP_ISR_Handler+0x1ec>
 8002dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d015      	beq.n	8002dee <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc8:	6959      	ldr	r1, [r3, #20]
 8002dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dcc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f005 ff25 	bl	8008c22 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	441a      	add	r2, r3
 8002de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002de6:	2100      	movs	r1, #0
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f007 fc15 	bl	800a618 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 82a3 	bne.w	8003346 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4413      	add	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2b3e      	cmp	r3, #62	; 0x3e
 8002e26:	d918      	bls.n	8002e5a <PCD_EP_ISR_Handler+0x258>
 8002e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <PCD_EP_ISR_Handler+0x240>
 8002e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	647b      	str	r3, [r7, #68]	; 0x44
 8002e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	029b      	lsls	r3, r3, #10
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	801a      	strh	r2, [r3, #0]
 8002e58:	e029      	b.n	8002eae <PCD_EP_ISR_Handler+0x2ac>
 8002e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d112      	bne.n	8002e88 <PCD_EP_ISR_Handler+0x286>
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	801a      	strh	r2, [r3, #0]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	801a      	strh	r2, [r3, #0]
 8002e86:	e012      	b.n	8002eae <PCD_EP_ISR_Handler+0x2ac>
 8002e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <PCD_EP_ISR_Handler+0x2a0>
 8002e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	029b      	lsls	r3, r3, #10
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebe:	827b      	strh	r3, [r7, #18]
 8002ec0:	8a7b      	ldrh	r3, [r7, #18]
 8002ec2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ec6:	827b      	strh	r3, [r7, #18]
 8002ec8:	8a7b      	ldrh	r3, [r7, #18]
 8002eca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ece:	827b      	strh	r3, [r7, #18]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	8a7b      	ldrh	r3, [r7, #18]
 8002ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	8013      	strh	r3, [r2, #0]
 8002eea:	e22c      	b.n	8003346 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f00:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f280 80f6 	bge.w	80030f6 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f20:	4013      	ands	r3, r2
 8002f22:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002f38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f3c:	b292      	uxth	r2, r2
 8002f3e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f40:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f58:	7b1b      	ldrb	r3, [r3, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d123      	bne.n	8002fa6 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f82:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002f86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 808e 	beq.w	80030ac <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f96:	6959      	ldr	r1, [r3, #20]
 8002f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9a:	88da      	ldrh	r2, [r3, #6]
 8002f9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fa0:	f005 fe3f 	bl	8008c22 <USB_ReadPMA>
 8002fa4:	e082      	b.n	80030ac <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa8:	78db      	ldrb	r3, [r3, #3]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d10a      	bne.n	8002fc4 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002fae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f9d3 	bl	8003362 <HAL_PCD_EP_DB_Receive>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002fc2:	e073      	b.n	80030ac <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	441a      	add	r2, r3
 8002ff0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003004:	b29b      	uxth	r3, r3
 8003006:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d022      	beq.n	8003068 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	4413      	add	r3, r2
 800303c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003046:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800304a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800304e:	2b00      	cmp	r3, #0
 8003050:	d02c      	beq.n	80030ac <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003058:	6959      	ldr	r1, [r3, #20]
 800305a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800305c:	891a      	ldrh	r2, [r3, #8]
 800305e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003062:	f005 fdde 	bl	8008c22 <USB_ReadPMA>
 8003066:	e021      	b.n	80030ac <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003070:	b29b      	uxth	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	4413      	add	r3, r2
 8003082:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800308c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003090:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003094:	2b00      	cmp	r3, #0
 8003096:	d009      	beq.n	80030ac <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309e:	6959      	ldr	r1, [r3, #20]
 80030a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a2:	895a      	ldrh	r2, [r3, #10]
 80030a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030a8:	f005 fdbb 	bl	8008c22 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80030ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030b4:	441a      	add	r2, r3
 80030b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80030ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030c2:	441a      	add	r2, r3
 80030c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80030c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <PCD_EP_ISR_Handler+0x4da>
 80030d0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80030d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d206      	bcs.n	80030ea <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80030dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	4619      	mov	r1, r3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f007 fa98 	bl	800a618 <HAL_PCD_DataOutStageCallback>
 80030e8:	e005      	b.n	80030f6 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030f0:	4618      	mov	r0, r3
 80030f2:	f004 fb48 	bl	8007786 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80030f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8121 	beq.w	8003346 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8003104:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	b29b      	uxth	r3, r3
 800312a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800312e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003132:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	441a      	add	r2, r3
 8003144:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003150:	b29b      	uxth	r3, r3
 8003152:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003156:	78db      	ldrb	r3, [r3, #3]
 8003158:	2b02      	cmp	r3, #2
 800315a:	f000 80a2 	beq.w	80032a2 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800315e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003160:	2200      	movs	r2, #0
 8003162:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003166:	7b1b      	ldrb	r3, [r3, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8093 	beq.w	8003294 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800316e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d046      	beq.n	8003208 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800317a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d126      	bne.n	80031d0 <PCD_EP_ISR_Handler+0x5ce>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003190:	b29b      	uxth	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	4413      	add	r3, r2
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
 800319a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	00da      	lsls	r2, r3, #3
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	4413      	add	r3, r2
 80031a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031a8:	623b      	str	r3, [r7, #32]
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	801a      	strh	r2, [r3, #0]
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	801a      	strh	r2, [r3, #0]
 80031ce:	e061      	b.n	8003294 <PCD_EP_ISR_Handler+0x692>
 80031d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d2:	785b      	ldrb	r3, [r3, #1]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d15d      	bne.n	8003294 <PCD_EP_ISR_Handler+0x692>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	4413      	add	r3, r2
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	00da      	lsls	r2, r3, #3
 80031f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f8:	4413      	add	r3, r2
 80031fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	2200      	movs	r2, #0
 8003204:	801a      	strh	r2, [r3, #0]
 8003206:	e045      	b.n	8003294 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800320e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003210:	785b      	ldrb	r3, [r3, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d126      	bne.n	8003264 <PCD_EP_ISR_Handler+0x662>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003224:	b29b      	uxth	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322a:	4413      	add	r3, r2
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
 800322e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	00da      	lsls	r2, r3, #3
 8003234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003236:	4413      	add	r3, r2
 8003238:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800323c:	633b      	str	r3, [r7, #48]	; 0x30
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	b29b      	uxth	r3, r3
 8003244:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003248:	b29a      	uxth	r2, r3
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800325c:	b29a      	uxth	r2, r3
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	801a      	strh	r2, [r3, #0]
 8003262:	e017      	b.n	8003294 <PCD_EP_ISR_Handler+0x692>
 8003264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003266:	785b      	ldrb	r3, [r3, #1]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d113      	bne.n	8003294 <PCD_EP_ISR_Handler+0x692>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003274:	b29b      	uxth	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327a:	4413      	add	r3, r2
 800327c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800327e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	00da      	lsls	r2, r3, #3
 8003284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003286:	4413      	add	r3, r2
 8003288:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800328c:	63bb      	str	r3, [r7, #56]	; 0x38
 800328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003290:	2200      	movs	r2, #0
 8003292:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f007 f9d7 	bl	800a64e <HAL_PCD_DataInStageCallback>
 80032a0:	e051      	b.n	8003346 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80032a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d144      	bne.n	8003338 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80032d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032de:	429a      	cmp	r2, r3
 80032e0:	d907      	bls.n	80032f2 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80032e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032ea:	1ad2      	subs	r2, r2, r3
 80032ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ee:	619a      	str	r2, [r3, #24]
 80032f0:	e002      	b.n	80032f8 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80032f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f4:	2200      	movs	r2, #0
 80032f6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80032f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f007 f9a1 	bl	800a64e <HAL_PCD_DataInStageCallback>
 800330c:	e01b      	b.n	8003346 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800330e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003316:	441a      	add	r2, r3
 8003318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800331c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003324:	441a      	add	r2, r3
 8003326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003328:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003330:	4618      	mov	r0, r3
 8003332:	f004 fa28 	bl	8007786 <USB_EPStartXfer>
 8003336:	e006      	b.n	8003346 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003338:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800333c:	461a      	mov	r2, r3
 800333e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f917 	bl	8003574 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800334e:	b29b      	uxth	r3, r3
 8003350:	b21b      	sxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	f6ff ac5a 	blt.w	8002c0c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3758      	adds	r7, #88	; 0x58
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b088      	sub	sp, #32
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	4613      	mov	r3, r2
 800336e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d07c      	beq.n	8003474 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003382:	b29b      	uxth	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	4413      	add	r3, r2
 8003394:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800339e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	699a      	ldr	r2, [r3, #24]
 80033a4:	8b7b      	ldrh	r3, [r7, #26]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d306      	bcc.n	80033b8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	8b7b      	ldrh	r3, [r7, #26]
 80033b0:	1ad2      	subs	r2, r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	619a      	str	r2, [r3, #24]
 80033b6:	e002      	b.n	80033be <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2200      	movs	r2, #0
 80033bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d123      	bne.n	800340e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e0:	833b      	strh	r3, [r7, #24]
 80033e2:	8b3b      	ldrh	r3, [r7, #24]
 80033e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033e8:	833b      	strh	r3, [r7, #24]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	441a      	add	r2, r3
 80033f8:	8b3b      	ldrh	r3, [r7, #24]
 80033fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340a:	b29b      	uxth	r3, r3
 800340c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01f      	beq.n	8003458 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003432:	82fb      	strh	r3, [r7, #22]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	441a      	add	r2, r3
 8003442:	8afb      	ldrh	r3, [r7, #22]
 8003444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800344c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003450:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003454:	b29b      	uxth	r3, r3
 8003456:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003458:	8b7b      	ldrh	r3, [r7, #26]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 8085 	beq.w	800356a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	6959      	ldr	r1, [r3, #20]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	891a      	ldrh	r2, [r3, #8]
 800346c:	8b7b      	ldrh	r3, [r7, #26]
 800346e:	f005 fbd8 	bl	8008c22 <USB_ReadPMA>
 8003472:	e07a      	b.n	800356a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347c:	b29b      	uxth	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	4413      	add	r3, r2
 800348e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003498:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	8b7b      	ldrh	r3, [r7, #26]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d306      	bcc.n	80034b2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	699a      	ldr	r2, [r3, #24]
 80034a8:	8b7b      	ldrh	r3, [r7, #26]
 80034aa:	1ad2      	subs	r2, r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	619a      	str	r2, [r3, #24]
 80034b0:	e002      	b.n	80034b8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2200      	movs	r2, #0
 80034b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d123      	bne.n	8003508 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	83fb      	strh	r3, [r7, #30]
 80034dc:	8bfb      	ldrh	r3, [r7, #30]
 80034de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034e2:	83fb      	strh	r3, [r7, #30]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	441a      	add	r2, r3
 80034f2:	8bfb      	ldrh	r3, [r7, #30]
 80034f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003504:	b29b      	uxth	r3, r3
 8003506:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d11f      	bne.n	8003552 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352c:	83bb      	strh	r3, [r7, #28]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	441a      	add	r2, r3
 800353c:	8bbb      	ldrh	r3, [r7, #28]
 800353e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800354a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800354e:	b29b      	uxth	r3, r3
 8003550:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003552:	8b7b      	ldrh	r3, [r7, #26]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6959      	ldr	r1, [r3, #20]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	895a      	ldrh	r2, [r3, #10]
 8003564:	8b7b      	ldrh	r3, [r7, #26]
 8003566:	f005 fb5c 	bl	8008c22 <USB_ReadPMA>
    }
  }

  return count;
 800356a:	8b7b      	ldrh	r3, [r7, #26]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b0a2      	sub	sp, #136	; 0x88
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 81c5 	beq.w	8003918 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003596:	b29b      	uxth	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	4413      	add	r3, r2
 80035a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035be:	429a      	cmp	r2, r3
 80035c0:	d907      	bls.n	80035d2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035ca:	1ad2      	subs	r2, r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	619a      	str	r2, [r3, #24]
 80035d0:	e002      	b.n	80035d8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2200      	movs	r2, #0
 80035d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f040 80b9 	bne.w	8003754 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d126      	bne.n	8003638 <HAL_PCD_EP_DB_Transmit+0xc4>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	4413      	add	r3, r2
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	00da      	lsls	r2, r3, #3
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	4413      	add	r3, r2
 800360c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800361c:	b29a      	uxth	r2, r3
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	801a      	strh	r2, [r3, #0]
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800362c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003630:	b29a      	uxth	r2, r3
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	801a      	strh	r2, [r3, #0]
 8003636:	e01a      	b.n	800366e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	785b      	ldrb	r3, [r3, #1]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d116      	bne.n	800366e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800364e:	b29b      	uxth	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	4413      	add	r3, r2
 8003656:	633b      	str	r3, [r7, #48]	; 0x30
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	00da      	lsls	r2, r3, #3
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	4413      	add	r3, r2
 8003662:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	2200      	movs	r2, #0
 800366c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	623b      	str	r3, [r7, #32]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	785b      	ldrb	r3, [r3, #1]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d126      	bne.n	80036ca <HAL_PCD_EP_DB_Transmit+0x156>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800368a:	b29b      	uxth	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	4413      	add	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	00da      	lsls	r2, r3, #3
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4413      	add	r3, r2
 800369e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	801a      	strh	r2, [r3, #0]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	801a      	strh	r2, [r3, #0]
 80036c8:	e017      	b.n	80036fa <HAL_PCD_EP_DB_Transmit+0x186>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	785b      	ldrb	r3, [r3, #1]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d113      	bne.n	80036fa <HAL_PCD_EP_DB_Transmit+0x186>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036da:	b29b      	uxth	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	4413      	add	r3, r2
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	00da      	lsls	r2, r3, #3
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	4413      	add	r3, r2
 80036ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2200      	movs	r2, #0
 80036f8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	4619      	mov	r1, r3
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f006 ffa4 	bl	800a64e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 82d2 	beq.w	8003cb6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	b29b      	uxth	r3, r3
 8003724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372c:	827b      	strh	r3, [r7, #18]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	441a      	add	r2, r3
 800373c:	8a7b      	ldrh	r3, [r7, #18]
 800373e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800374a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374e:	b29b      	uxth	r3, r3
 8003750:	8013      	strh	r3, [r2, #0]
 8003752:	e2b0      	b.n	8003cb6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d021      	beq.n	80037a2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003778:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	441a      	add	r2, r3
 800378a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800378e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800379a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379e:	b29b      	uxth	r3, r3
 80037a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 8284 	bne.w	8003cb6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037b6:	441a      	add	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037c4:	441a      	add	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d309      	bcc.n	80037ea <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e2:	1ad2      	subs	r2, r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	621a      	str	r2, [r3, #32]
 80037e8:	e015      	b.n	8003816 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d107      	bne.n	8003802 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80037f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037f6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003800:	e009      	b.n	8003816 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	785b      	ldrb	r3, [r3, #1]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d155      	bne.n	80038ca <HAL_PCD_EP_DB_Transmit+0x356>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	63bb      	str	r3, [r7, #56]	; 0x38
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800382c:	b29b      	uxth	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	4413      	add	r3, r2
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	00da      	lsls	r2, r3, #3
 800383c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383e:	4413      	add	r3, r2
 8003840:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003844:	637b      	str	r3, [r7, #52]	; 0x34
 8003846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003848:	2b3e      	cmp	r3, #62	; 0x3e
 800384a:	d916      	bls.n	800387a <HAL_PCD_EP_DB_Transmit+0x306>
 800384c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	64bb      	str	r3, [r7, #72]	; 0x48
 8003852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	2b00      	cmp	r3, #0
 800385a:	d102      	bne.n	8003862 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800385c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385e:	3b01      	subs	r3, #1
 8003860:	64bb      	str	r3, [r7, #72]	; 0x48
 8003862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003864:	b29b      	uxth	r3, r3
 8003866:	029b      	lsls	r3, r3, #10
 8003868:	b29b      	uxth	r3, r3
 800386a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800386e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003872:	b29a      	uxth	r2, r3
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	801a      	strh	r2, [r3, #0]
 8003878:	e043      	b.n	8003902 <HAL_PCD_EP_DB_Transmit+0x38e>
 800387a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387c:	2b00      	cmp	r3, #0
 800387e:	d112      	bne.n	80038a6 <HAL_PCD_EP_DB_Transmit+0x332>
 8003880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800388a:	b29a      	uxth	r2, r3
 800388c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388e:	801a      	strh	r2, [r3, #0]
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b29b      	uxth	r3, r3
 8003896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800389a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800389e:	b29a      	uxth	r2, r3
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	801a      	strh	r2, [r3, #0]
 80038a4:	e02d      	b.n	8003902 <HAL_PCD_EP_DB_Transmit+0x38e>
 80038a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80038ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_PCD_EP_DB_Transmit+0x348>
 80038b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b8:	3301      	adds	r3, #1
 80038ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80038bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038be:	b29b      	uxth	r3, r3
 80038c0:	029b      	lsls	r3, r3, #10
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c6:	801a      	strh	r2, [r3, #0]
 80038c8:	e01b      	b.n	8003902 <HAL_PCD_EP_DB_Transmit+0x38e>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	785b      	ldrb	r3, [r3, #1]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d117      	bne.n	8003902 <HAL_PCD_EP_DB_Transmit+0x38e>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	643b      	str	r3, [r7, #64]	; 0x40
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e6:	4413      	add	r3, r2
 80038e8:	643b      	str	r3, [r7, #64]	; 0x40
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	00da      	lsls	r2, r3, #3
 80038f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f2:	4413      	add	r3, r2
 80038f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003900:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	6959      	ldr	r1, [r3, #20]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	891a      	ldrh	r2, [r3, #8]
 800390e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003910:	b29b      	uxth	r3, r3
 8003912:	f005 f944 	bl	8008b9e <USB_WritePMA>
 8003916:	e1ce      	b.n	8003cb6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003920:	b29b      	uxth	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	4413      	add	r3, r2
 8003932:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800393c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	699a      	ldr	r2, [r3, #24]
 8003944:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003948:	429a      	cmp	r2, r3
 800394a:	d307      	bcc.n	800395c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003954:	1ad2      	subs	r2, r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	619a      	str	r2, [r3, #24]
 800395a:	e002      	b.n	8003962 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2200      	movs	r2, #0
 8003960:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f040 80c4 	bne.w	8003af4 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d126      	bne.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	66bb      	str	r3, [r7, #104]	; 0x68
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003982:	b29b      	uxth	r3, r3
 8003984:	461a      	mov	r2, r3
 8003986:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003988:	4413      	add	r3, r2
 800398a:	66bb      	str	r3, [r7, #104]	; 0x68
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	00da      	lsls	r2, r3, #3
 8003992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003994:	4413      	add	r3, r2
 8003996:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800399a:	667b      	str	r3, [r7, #100]	; 0x64
 800399c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039aa:	801a      	strh	r2, [r3, #0]
 80039ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039be:	801a      	strh	r2, [r3, #0]
 80039c0:	e01a      	b.n	80039f8 <HAL_PCD_EP_DB_Transmit+0x484>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	785b      	ldrb	r3, [r3, #1]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d116      	bne.n	80039f8 <HAL_PCD_EP_DB_Transmit+0x484>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	673b      	str	r3, [r7, #112]	; 0x70
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d8:	b29b      	uxth	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039de:	4413      	add	r3, r2
 80039e0:	673b      	str	r3, [r7, #112]	; 0x70
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	00da      	lsls	r2, r3, #3
 80039e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ea:	4413      	add	r3, r2
 80039ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f4:	2200      	movs	r2, #0
 80039f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	785b      	ldrb	r3, [r3, #1]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d12f      	bne.n	8003a66 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a1e:	4413      	add	r3, r2
 8003a20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	00da      	lsls	r2, r3, #3
 8003a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a2e:	4413      	add	r3, r2
 8003a30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a4a:	801a      	strh	r2, [r3, #0]
 8003a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	e017      	b.n	8003a96 <HAL_PCD_EP_DB_Transmit+0x522>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	785b      	ldrb	r3, [r3, #1]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d113      	bne.n	8003a96 <HAL_PCD_EP_DB_Transmit+0x522>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a7c:	4413      	add	r3, r2
 8003a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	00da      	lsls	r2, r3, #3
 8003a86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a88:	4413      	add	r3, r2
 8003a8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a92:	2200      	movs	r2, #0
 8003a94:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f006 fdd6 	bl	800a64e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f040 8104 	bne.w	8003cb6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	8013      	strh	r3, [r2, #0]
 8003af2:	e0e0      	b.n	8003cb6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d121      	bne.n	8003b42 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b18:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	441a      	add	r2, r3
 8003b2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	f040 80b4 	bne.w	8003cb6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b56:	441a      	add	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b64:	441a      	add	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6a1a      	ldr	r2, [r3, #32]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d309      	bcc.n	8003b8a <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	6a1a      	ldr	r2, [r3, #32]
 8003b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b82:	1ad2      	subs	r2, r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	621a      	str	r2, [r3, #32]
 8003b88:	e015      	b.n	8003bb6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d107      	bne.n	8003ba2 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003b92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b96:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ba0:	e009      	b.n	8003bb6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2200      	movs	r2, #0
 8003bac:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	663b      	str	r3, [r7, #96]	; 0x60
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	785b      	ldrb	r3, [r3, #1]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d155      	bne.n	8003c70 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bd8:	4413      	add	r3, r2
 8003bda:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	00da      	lsls	r2, r3, #3
 8003be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003be4:	4413      	add	r3, r2
 8003be6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bea:	657b      	str	r3, [r7, #84]	; 0x54
 8003bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bee:	2b3e      	cmp	r3, #62	; 0x3e
 8003bf0:	d916      	bls.n	8003c20 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	677b      	str	r3, [r7, #116]	; 0x74
 8003bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d102      	bne.n	8003c08 <HAL_PCD_EP_DB_Transmit+0x694>
 8003c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c04:	3b01      	subs	r3, #1
 8003c06:	677b      	str	r3, [r7, #116]	; 0x74
 8003c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	029b      	lsls	r3, r3, #10
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c1c:	801a      	strh	r2, [r3, #0]
 8003c1e:	e040      	b.n	8003ca2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d112      	bne.n	8003c4c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c48:	801a      	strh	r2, [r3, #0]
 8003c4a:	e02a      	b.n	8003ca2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	677b      	str	r3, [r7, #116]	; 0x74
 8003c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c5e:	3301      	adds	r3, #1
 8003c60:	677b      	str	r3, [r7, #116]	; 0x74
 8003c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	029b      	lsls	r3, r3, #10
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6c:	801a      	strh	r2, [r3, #0]
 8003c6e:	e018      	b.n	8003ca2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d114      	bne.n	8003ca2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c86:	4413      	add	r3, r2
 8003c88:	663b      	str	r3, [r7, #96]	; 0x60
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	00da      	lsls	r2, r3, #3
 8003c90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c92:	4413      	add	r3, r2
 8003c94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6959      	ldr	r1, [r3, #20]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	895a      	ldrh	r2, [r3, #10]
 8003cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	f004 ff74 	bl	8008b9e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cd0:	823b      	strh	r3, [r7, #16]
 8003cd2:	8a3b      	ldrh	r3, [r7, #16]
 8003cd4:	f083 0310 	eor.w	r3, r3, #16
 8003cd8:	823b      	strh	r3, [r7, #16]
 8003cda:	8a3b      	ldrh	r3, [r7, #16]
 8003cdc:	f083 0320 	eor.w	r3, r3, #32
 8003ce0:	823b      	strh	r3, [r7, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	441a      	add	r2, r3
 8003cf0:	8a3b      	ldrh	r3, [r7, #16]
 8003cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3788      	adds	r7, #136	; 0x88
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	607b      	str	r3, [r7, #4]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	817b      	strh	r3, [r7, #10]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d22:	897b      	ldrh	r3, [r7, #10]
 8003d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d2e:	897b      	ldrh	r3, [r7, #10]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4413      	add	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e009      	b.n	8003d5a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d46:	897a      	ldrh	r2, [r7, #10]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d5a:	893b      	ldrh	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d107      	bne.n	8003d70 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2200      	movs	r2, #0
 8003d64:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	80da      	strh	r2, [r3, #6]
 8003d6e:	e00b      	b.n	8003d88 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2201      	movs	r2, #1
 8003d74:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	0c1b      	lsrs	r3, r3, #16
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfa:	6013      	str	r3, [r2, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	58000400 	.word	0x58000400

08003e0c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e10:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	58000400 	.word	0x58000400

08003e28 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e36:	6053      	str	r3, [r2, #4]
}
 8003e38:	bf00      	nop
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	58000400 	.word	0x58000400

08003e48 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5a:	d101      	bne.n	8003e60 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7e:	6013      	str	r3, [r2, #0]
}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9c:	6013      	str	r3, [r2, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eba:	d101      	bne.n	8003ec0 <LL_RCC_HSE_IsReady+0x18>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <LL_RCC_HSE_IsReady+0x1a>
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ede:	6013      	str	r3, [r2, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]
}
 8003efe:	bf00      	nop
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1a:	d101      	bne.n	8003f20 <LL_RCC_HSI_IsReady+0x18>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <LL_RCC_HSI_IsReady+0x1a>
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	061b      	lsls	r3, r3, #24
 8003f42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f46:	4313      	orrs	r3, r2
 8003f48:	604b      	str	r3, [r1, #4]
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003f56:	b480      	push	{r7}
 8003f58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003f6e:	bf00      	nop
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d101      	bne.n	8003fb2 <LL_RCC_HSI48_IsReady+0x18>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <LL_RCC_HSI48_IsReady+0x1a>
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fd6:	bf00      	nop
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004012:	f043 0304 	orr.w	r3, r3, #4
 8004016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800401a:	bf00      	nop
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004034:	f023 0304 	bic.w	r3, r3, #4
 8004038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004046:	b480      	push	{r7}
 8004048:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800404a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b02      	cmp	r3, #2
 8004058:	d101      	bne.n	800405e <LL_RCC_LSE_IsReady+0x18>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <LL_RCC_LSE_IsReady+0x1a>
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800406e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004082:	bf00      	nop
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80040b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d101      	bne.n	80040c6 <LL_RCC_LSI1_IsReady+0x18>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <LL_RCC_LSI1_IsReady+0x1a>
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80040d2:	b480      	push	{r7}
 80040d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80040d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040e2:	f043 0304 	orr.w	r3, r3, #4
 80040e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040ea:	bf00      	nop
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80040f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004104:	f023 0304 	bic.w	r3, r3, #4
 8004108:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004116:	b480      	push	{r7}
 8004118:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800411a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b08      	cmp	r3, #8
 8004128:	d101      	bne.n	800412e <LL_RCC_LSI2_IsReady+0x18>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <LL_RCC_LSI2_IsReady+0x1a>
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6013      	str	r3, [r2, #0]
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800418a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	6013      	str	r3, [r2, #0]
}
 800419a:	bf00      	nop
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80041a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d101      	bne.n	80041ba <LL_RCC_MSI_IsReady+0x16>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <LL_RCC_MSI_IsReady+0x18>
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80041ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041fe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2bb0      	cmp	r3, #176	; 0xb0
 8004204:	d901      	bls.n	800420a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004206:	23b0      	movs	r3, #176	; 0xb0
 8004208:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800420a:	687b      	ldr	r3, [r7, #4]
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004232:	4313      	orrs	r3, r2
 8004234:	604b      	str	r3, [r1, #4]
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800424a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f023 0203 	bic.w	r2, r3, #3
 8004254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4313      	orrs	r3, r2
 800425c:	608b      	str	r3, [r1, #8]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800426a:	b480      	push	{r7}
 800426c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800426e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 030c 	and.w	r3, r3, #12
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800428a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80042b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80042de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042e6:	f023 020f 	bic.w	r2, r3, #15
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	091b      	lsrs	r3, r3, #4
 80042ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800430c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4313      	orrs	r3, r2
 800431e:	608b      	str	r3, [r1, #8]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800433e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4313      	orrs	r3, r2
 8004346:	608b      	str	r3, [r1, #8]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004362:	4618      	mov	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004374:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800437e:	4618      	mov	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439a:	6013      	str	r3, [r2, #0]
}
 800439c:	bf00      	nop
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80043a6:	b480      	push	{r7}
 80043a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80043aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b8:	6013      	str	r3, [r2, #0]
}
 80043ba:	bf00      	nop
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80043c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d6:	d101      	bne.n	80043dc <LL_RCC_PLL_IsReady+0x18>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <LL_RCC_PLL_IsReady+0x1a>
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80043ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	0a1b      	lsrs	r3, r3, #8
 80043f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004402:	b480      	push	{r7}
 8004404:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800441a:	b480      	push	{r7}
 800441c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800441e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004432:	b480      	push	{r7}
 8004434:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0303 	and.w	r3, r3, #3
}
 8004440:	4618      	mov	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800444a:	b480      	push	{r7}
 800444c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800444e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445c:	d101      	bne.n	8004462 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800446e:	b480      	push	{r7}
 8004470:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004476:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004482:	d101      	bne.n	8004488 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a8:	d101      	bne.n	80044ae <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80044ba:	b480      	push	{r7}
 80044bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044cc:	d101      	bne.n	80044d2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80044de:	b480      	push	{r7}
 80044e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80044e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044f0:	d101      	bne.n	80044f6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b08d      	sub	sp, #52	; 0x34
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e37e      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 8092 	beq.w	8004648 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004524:	f7ff fea1 	bl	800426a <LL_RCC_GetSysClkSource>
 8004528:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800452a:	f7ff ff82 	bl	8004432 <LL_RCC_PLL_GetMainSource>
 800452e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_RCC_OscConfig+0x3e>
 8004536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004538:	2b0c      	cmp	r3, #12
 800453a:	d14c      	bne.n	80045d6 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	2b01      	cmp	r3, #1
 8004540:	d149      	bne.n	80045d6 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004542:	f7ff fe2f 	bl	80041a4 <LL_RCC_MSI_IsReady>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_RCC_OscConfig+0x54>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e35d      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800455c:	f7ff fe47 	bl	80041ee <LL_RCC_MSI_GetRange>
 8004560:	4603      	mov	r3, r0
 8004562:	429c      	cmp	r4, r3
 8004564:	d914      	bls.n	8004590 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fd16 	bl	8004f9c <RCC_SetFlashLatencyFromMSIRange>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e34c      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fe21 	bl	80041c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fe45 	bl	8004218 <LL_RCC_MSI_SetCalibTrimming>
 800458e:	e013      	b.n	80045b8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fe16 	bl	80041c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff fe3a 	bl	8004218 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fcf7 	bl	8004f9c <RCC_SetFlashLatencyFromMSIRange>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e32d      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80045b8:	f000 fcdc 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 80045bc:	4603      	mov	r3, r0
 80045be:	4ab3      	ldr	r2, [pc, #716]	; (800488c <HAL_RCC_OscConfig+0x388>)
 80045c0:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045c2:	4bb3      	ldr	r3, [pc, #716]	; (8004890 <HAL_RCC_OscConfig+0x38c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fd fbc2 	bl	8001d50 <HAL_InitTick>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d039      	beq.n	8004646 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e31e      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d01e      	beq.n	800461c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045de:	f7ff fdc3 	bl	8004168 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045e2:	f7fd fc03 	bl	8001dec <HAL_GetTick>
 80045e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045ea:	f7fd fbff 	bl	8001dec <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e30b      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80045fc:	f7ff fdd2 	bl	80041a4 <LL_RCC_MSI_IsReady>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f1      	beq.n	80045ea <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fddb 	bl	80041c6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fdff 	bl	8004218 <LL_RCC_MSI_SetCalibTrimming>
 800461a:	e015      	b.n	8004648 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800461c:	f7ff fdb3 	bl	8004186 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004620:	f7fd fbe4 	bl	8001dec <HAL_GetTick>
 8004624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004628:	f7fd fbe0 	bl	8001dec <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e2ec      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800463a:	f7ff fdb3 	bl	80041a4 <LL_RCC_MSI_IsReady>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f1      	bne.n	8004628 <HAL_RCC_OscConfig+0x124>
 8004644:	e000      	b.n	8004648 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004646:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d04e      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004654:	f7ff fe09 	bl	800426a <LL_RCC_GetSysClkSource>
 8004658:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800465a:	f7ff feea 	bl	8004432 <LL_RCC_PLL_GetMainSource>
 800465e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	2b08      	cmp	r3, #8
 8004664:	d005      	beq.n	8004672 <HAL_RCC_OscConfig+0x16e>
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	2b0c      	cmp	r3, #12
 800466a:	d10d      	bne.n	8004688 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d10a      	bne.n	8004688 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004672:	f7ff fc19 	bl	8003ea8 <LL_RCC_HSE_IsReady>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d039      	beq.n	80046f0 <HAL_RCC_OscConfig+0x1ec>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d135      	bne.n	80046f0 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e2c5      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004690:	d102      	bne.n	8004698 <HAL_RCC_OscConfig+0x194>
 8004692:	f7ff fbeb 	bl	8003e6c <LL_RCC_HSE_Enable>
 8004696:	e001      	b.n	800469c <HAL_RCC_OscConfig+0x198>
 8004698:	f7ff fbf7 	bl	8003e8a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d012      	beq.n	80046ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd fba2 	bl	8001dec <HAL_GetTick>
 80046a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fd fb9e 	bl	8001dec <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	; 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e2aa      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80046be:	f7ff fbf3 	bl	8003ea8 <LL_RCC_HSE_IsReady>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f1      	beq.n	80046ac <HAL_RCC_OscConfig+0x1a8>
 80046c8:	e013      	b.n	80046f2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd fb8f 	bl	8001dec <HAL_GetTick>
 80046ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d2:	f7fd fb8b 	bl	8001dec <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b64      	cmp	r3, #100	; 0x64
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e297      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80046e4:	f7ff fbe0 	bl	8003ea8 <LL_RCC_HSE_IsReady>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f1      	bne.n	80046d2 <HAL_RCC_OscConfig+0x1ce>
 80046ee:	e000      	b.n	80046f2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d051      	beq.n	80047a2 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046fe:	f7ff fdb4 	bl	800426a <LL_RCC_GetSysClkSource>
 8004702:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004704:	f7ff fe95 	bl	8004432 <LL_RCC_PLL_GetMainSource>
 8004708:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2b04      	cmp	r3, #4
 800470e:	d005      	beq.n	800471c <HAL_RCC_OscConfig+0x218>
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b0c      	cmp	r3, #12
 8004714:	d113      	bne.n	800473e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d110      	bne.n	800473e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800471c:	f7ff fbf4 	bl	8003f08 <LL_RCC_HSI_IsReady>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <HAL_RCC_OscConfig+0x22e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e270      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fbf8 	bl	8003f2c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800473c:	e031      	b.n	80047a2 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d019      	beq.n	800477a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004746:	f7ff fbc1 	bl	8003ecc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd fb4f 	bl	8001dec <HAL_GetTick>
 800474e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004752:	f7fd fb4b 	bl	8001dec <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e257      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004764:	f7ff fbd0 	bl	8003f08 <LL_RCC_HSI_IsReady>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f1      	beq.n	8004752 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fbda 	bl	8003f2c <LL_RCC_HSI_SetCalibTrimming>
 8004778:	e013      	b.n	80047a2 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800477a:	f7ff fbb6 	bl	8003eea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477e:	f7fd fb35 	bl	8001dec <HAL_GetTick>
 8004782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004786:	f7fd fb31 	bl	8001dec <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e23d      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004798:	f7ff fbb6 	bl	8003f08 <LL_RCC_HSI_IsReady>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f1      	bne.n	8004786 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80a3 	beq.w	8004902 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d076      	beq.n	80048b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d046      	beq.n	800485e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80047d0:	f7ff fc6d 	bl	80040ae <LL_RCC_LSI1_IsReady>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d113      	bne.n	8004802 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80047da:	f7ff fc46 	bl	800406a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047de:	f7fd fb05 	bl	8001dec <HAL_GetTick>
 80047e2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80047e6:	f7fd fb01 	bl	8001dec <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e20d      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80047f8:	f7ff fc59 	bl	80040ae <LL_RCC_LSI1_IsReady>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f1      	beq.n	80047e6 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004802:	f7ff fc66 	bl	80040d2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004806:	f7fd faf1 	bl	8001dec <HAL_GetTick>
 800480a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800480e:	f7fd faed 	bl	8001dec <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b03      	cmp	r3, #3
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e1f9      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004820:	f7ff fc79 	bl	8004116 <LL_RCC_LSI2_IsReady>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f1      	beq.n	800480e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fc83 	bl	800413a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004834:	f7ff fc2a 	bl	800408c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fd fad8 	bl	8001dec <HAL_GetTick>
 800483c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004840:	f7fd fad4 	bl	8001dec <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e1e0      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004852:	f7ff fc2c 	bl	80040ae <LL_RCC_LSI1_IsReady>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1f1      	bne.n	8004840 <HAL_RCC_OscConfig+0x33c>
 800485c:	e051      	b.n	8004902 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800485e:	f7ff fc04 	bl	800406a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fd fac3 	bl	8001dec <HAL_GetTick>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800486a:	f7fd fabf 	bl	8001dec <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e1cb      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800487c:	f7ff fc17 	bl	80040ae <LL_RCC_LSI1_IsReady>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f1      	beq.n	800486a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004886:	f7ff fc35 	bl	80040f4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800488a:	e00c      	b.n	80048a6 <HAL_RCC_OscConfig+0x3a2>
 800488c:	2000001c 	.word	0x2000001c
 8004890:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004894:	f7fd faaa 	bl	8001dec <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e1b6      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80048a6:	f7ff fc36 	bl	8004116 <LL_RCC_LSI2_IsReady>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f1      	bne.n	8004894 <HAL_RCC_OscConfig+0x390>
 80048b0:	e027      	b.n	8004902 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80048b2:	f7ff fc1f 	bl	80040f4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b6:	f7fd fa99 	bl	8001dec <HAL_GetTick>
 80048ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80048be:	f7fd fa95 	bl	8001dec <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e1a1      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80048d0:	f7ff fc21 	bl	8004116 <LL_RCC_LSI2_IsReady>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f1      	bne.n	80048be <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80048da:	f7ff fbd7 	bl	800408c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048de:	f7fd fa85 	bl	8001dec <HAL_GetTick>
 80048e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048e6:	f7fd fa81 	bl	8001dec <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e18d      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80048f8:	f7ff fbd9 	bl	80040ae <LL_RCC_LSI1_IsReady>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f1      	bne.n	80048e6 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d05b      	beq.n	80049c6 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800490e:	4bb5      	ldr	r3, [pc, #724]	; (8004be4 <HAL_RCC_OscConfig+0x6e0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d114      	bne.n	8004944 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800491a:	f7ff fa67 	bl	8003dec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491e:	f7fd fa65 	bl	8001dec <HAL_GetTick>
 8004922:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004926:	f7fd fa61 	bl	8001dec <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e16d      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004938:	4baa      	ldr	r3, [pc, #680]	; (8004be4 <HAL_RCC_OscConfig+0x6e0>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d102      	bne.n	8004952 <HAL_RCC_OscConfig+0x44e>
 800494c:	f7ff fb37 	bl	8003fbe <LL_RCC_LSE_Enable>
 8004950:	e00c      	b.n	800496c <HAL_RCC_OscConfig+0x468>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b05      	cmp	r3, #5
 8004958:	d104      	bne.n	8004964 <HAL_RCC_OscConfig+0x460>
 800495a:	f7ff fb52 	bl	8004002 <LL_RCC_LSE_EnableBypass>
 800495e:	f7ff fb2e 	bl	8003fbe <LL_RCC_LSE_Enable>
 8004962:	e003      	b.n	800496c <HAL_RCC_OscConfig+0x468>
 8004964:	f7ff fb3c 	bl	8003fe0 <LL_RCC_LSE_Disable>
 8004968:	f7ff fb5c 	bl	8004024 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d014      	beq.n	800499e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7fd fa3a 	bl	8001dec <HAL_GetTick>
 8004978:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800497a:	e00a      	b.n	8004992 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497c:	f7fd fa36 	bl	8001dec <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f241 3288 	movw	r2, #5000	; 0x1388
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e140      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004992:	f7ff fb58 	bl	8004046 <LL_RCC_LSE_IsReady>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0ef      	beq.n	800497c <HAL_RCC_OscConfig+0x478>
 800499c:	e013      	b.n	80049c6 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499e:	f7fd fa25 	bl	8001dec <HAL_GetTick>
 80049a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80049a4:	e00a      	b.n	80049bc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a6:	f7fd fa21 	bl	8001dec <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e12b      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80049bc:	f7ff fb43 	bl	8004046 <LL_RCC_LSE_IsReady>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1ef      	bne.n	80049a6 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d02c      	beq.n	8004a2c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d014      	beq.n	8004a04 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049da:	f7ff fabc 	bl	8003f56 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049de:	f7fd fa05 	bl	8001dec <HAL_GetTick>
 80049e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e6:	f7fd fa01 	bl	8001dec <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e10d      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80049f8:	f7ff facf 	bl	8003f9a <LL_RCC_HSI48_IsReady>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f1      	beq.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
 8004a02:	e013      	b.n	8004a2c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a04:	f7ff fab8 	bl	8003f78 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fd f9f0 	bl	8001dec <HAL_GetTick>
 8004a0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a10:	f7fd f9ec 	bl	8001dec <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e0f8      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a22:	f7ff faba 	bl	8003f9a <LL_RCC_HSI48_IsReady>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f1      	bne.n	8004a10 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80ee 	beq.w	8004c12 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a36:	f7ff fc18 	bl	800426a <LL_RCC_GetSysClkSource>
 8004a3a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	f040 80af 	bne.w	8004bac <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 0203 	and.w	r2, r3, #3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d123      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d11c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	0a1b      	lsrs	r3, r3, #8
 8004a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d114      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d10d      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d106      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d05d      	beq.n	8004b60 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b0c      	cmp	r3, #12
 8004aa8:	d058      	beq.n	8004b5c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0ab      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004abc:	f7ff fc73 	bl	80043a6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ac0:	f7fd f994 	bl	8001dec <HAL_GetTick>
 8004ac4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7fd f990 	bl	8001dec <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e09c      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1ef      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	4b3e      	ldr	r3, [pc, #248]	; (8004be8 <HAL_RCC_OscConfig+0x6e4>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004afa:	4311      	orrs	r1, r2
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b00:	0212      	lsls	r2, r2, #8
 8004b02:	4311      	orrs	r1, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b08:	4311      	orrs	r1, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b0e:	4311      	orrs	r1, r2
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b14:	430a      	orrs	r2, r1
 8004b16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b1e:	f7ff fc33 	bl	8004388 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b30:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b32:	f7fd f95b 	bl	8001dec <HAL_GetTick>
 8004b36:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fd f957 	bl	8001dec <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e063      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ef      	beq.n	8004b3a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b5a:	e05a      	b.n	8004c12 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e059      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d151      	bne.n	8004c12 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b6e:	f7ff fc0b 	bl	8004388 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b80:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b82:	f7fd f933 	bl	8001dec <HAL_GetTick>
 8004b86:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8a:	f7fd f92f 	bl	8001dec <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e03b      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0ef      	beq.n	8004b8a <HAL_RCC_OscConfig+0x686>
 8004baa:	e032      	b.n	8004c12 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2b0c      	cmp	r3, #12
 8004bb0:	d02d      	beq.n	8004c0e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb2:	f7ff fbf8 	bl	80043a6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc0:	f023 0303 	bic.w	r3, r3, #3
 8004bc4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bd0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bda:	f7fd f907 	bl	8001dec <HAL_GetTick>
 8004bde:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be0:	e00d      	b.n	8004bfe <HAL_RCC_OscConfig+0x6fa>
 8004be2:	bf00      	nop
 8004be4:	58000400 	.word	0x58000400
 8004be8:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fd f8fe 	bl	8001dec <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1ef      	bne.n	8004bec <HAL_RCC_OscConfig+0x6e8>
 8004c0c:	e001      	b.n	8004c12 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3734      	adds	r7, #52	; 0x34
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd90      	pop	{r4, r7, pc}

08004c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e12d      	b.n	8004e8c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c30:	4b98      	ldr	r3, [pc, #608]	; (8004e94 <HAL_RCC_ClockConfig+0x278>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d91b      	bls.n	8004c76 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b95      	ldr	r3, [pc, #596]	; (8004e94 <HAL_RCC_ClockConfig+0x278>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 0207 	bic.w	r2, r3, #7
 8004c46:	4993      	ldr	r1, [pc, #588]	; (8004e94 <HAL_RCC_ClockConfig+0x278>)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c4e:	f7fd f8cd 	bl	8001dec <HAL_GetTick>
 8004c52:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c56:	f7fd f8c9 	bl	8001dec <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e111      	b.n	8004e8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c68:	4b8a      	ldr	r3, [pc, #552]	; (8004e94 <HAL_RCC_ClockConfig+0x278>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d1ef      	bne.n	8004c56 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d016      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fafb 	bl	8004282 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c8c:	f7fd f8ae 	bl	8001dec <HAL_GetTick>
 8004c90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c94:	f7fd f8aa 	bl	8001dec <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e0f2      	b.n	8004e8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004ca6:	f7ff fbd0 	bl	800444a <LL_RCC_IsActiveFlag_HPRE>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f1      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d016      	beq.n	8004cea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff faf2 	bl	80042aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cc6:	f7fd f891 	bl	8001dec <HAL_GetTick>
 8004cca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cce:	f7fd f88d 	bl	8001dec <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e0d5      	b.n	8004e8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004ce0:	f7ff fbc5 	bl	800446e <LL_RCC_IsActiveFlag_C2HPRE>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f1      	beq.n	8004cce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d016      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff faeb 	bl	80042d6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d00:	f7fd f874 	bl	8001dec <HAL_GetTick>
 8004d04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d08:	f7fd f870 	bl	8001dec <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e0b8      	b.n	8004e8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d1a:	f7ff fbbb 	bl	8004494 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f1      	beq.n	8004d08 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d016      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fae5 	bl	8004304 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d3a:	f7fd f857 	bl	8001dec <HAL_GetTick>
 8004d3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d42:	f7fd f853 	bl	8001dec <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e09b      	b.n	8004e8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d54:	f7ff fbb1 	bl	80044ba <LL_RCC_IsActiveFlag_PPRE1>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f1      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d017      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fadb 	bl	800432c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d76:	f7fd f839 	bl	8001dec <HAL_GetTick>
 8004d7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d7e:	f7fd f835 	bl	8001dec <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e07d      	b.n	8004e8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d90:	f7ff fba5 	bl	80044de <LL_RCC_IsActiveFlag_PPRE2>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f1      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d043      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d106      	bne.n	8004dbc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004dae:	f7ff f87b 	bl	8003ea8 <LL_RCC_HSE_IsReady>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d11e      	bne.n	8004df6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e067      	b.n	8004e8c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d106      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004dc4:	f7ff fafe 	bl	80043c4 <LL_RCC_PLL_IsReady>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d113      	bne.n	8004df6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e05c      	b.n	8004e8c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004dda:	f7ff f9e3 	bl	80041a4 <LL_RCC_MSI_IsReady>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d108      	bne.n	8004df6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e051      	b.n	8004e8c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004de8:	f7ff f88e 	bl	8003f08 <LL_RCC_HSI_IsReady>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e04a      	b.n	8004e8c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fa21 	bl	8004242 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e00:	f7fc fff4 	bl	8001dec <HAL_GetTick>
 8004e04:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e06:	e00a      	b.n	8004e1e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e08:	f7fc fff0 	bl	8001dec <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e036      	b.n	8004e8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1e:	f7ff fa24 	bl	800426a <LL_RCC_GetSysClkSource>
 8004e22:	4602      	mov	r2, r0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d1ec      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e2e:	4b19      	ldr	r3, [pc, #100]	; (8004e94 <HAL_RCC_ClockConfig+0x278>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d21b      	bcs.n	8004e74 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3c:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <HAL_RCC_ClockConfig+0x278>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f023 0207 	bic.w	r2, r3, #7
 8004e44:	4913      	ldr	r1, [pc, #76]	; (8004e94 <HAL_RCC_ClockConfig+0x278>)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4c:	f7fc ffce 	bl	8001dec <HAL_GetTick>
 8004e50:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e54:	f7fc ffca 	bl	8001dec <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e012      	b.n	8004e8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <HAL_RCC_ClockConfig+0x278>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d1ef      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e74:	f000 f87e 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	4a07      	ldr	r2, [pc, #28]	; (8004e98 <HAL_RCC_ClockConfig+0x27c>)
 8004e7c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004e7e:	f7fc ffc1 	bl	8001e04 <HAL_GetTickPrio>
 8004e82:	4603      	mov	r3, r0
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fc ff63 	bl	8001d50 <HAL_InitTick>
 8004e8a:	4603      	mov	r3, r0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	58004000 	.word	0x58004000
 8004e98:	2000001c 	.word	0x2000001c

08004e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea2:	f7ff f9e2 	bl	800426a <LL_RCC_GetSysClkSource>
 8004ea6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004eae:	f7ff f99e 	bl	80041ee <LL_RCC_MSI_GetRange>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	4a2b      	ldr	r2, [pc, #172]	; (8004f68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	e04b      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d102      	bne.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eca:	4b28      	ldr	r3, [pc, #160]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	e045      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d10a      	bne.n	8004eec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ed6:	f7fe ffb7 	bl	8003e48 <LL_RCC_HSE_IsEnabledDiv2>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d102      	bne.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004ee0:	4b23      	ldr	r3, [pc, #140]	; (8004f70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e03a      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004ee6:	4b21      	ldr	r3, [pc, #132]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	e037      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004eec:	f7ff faa1 	bl	8004432 <LL_RCC_PLL_GetMainSource>
 8004ef0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d003      	beq.n	8004f00 <HAL_RCC_GetSysClockFreq+0x64>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d003      	beq.n	8004f06 <HAL_RCC_GetSysClockFreq+0x6a>
 8004efe:	e00d      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004f00:	4b1a      	ldr	r3, [pc, #104]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f02:	60bb      	str	r3, [r7, #8]
        break;
 8004f04:	e015      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f06:	f7fe ff9f 	bl	8003e48 <LL_RCC_HSE_IsEnabledDiv2>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d102      	bne.n	8004f16 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004f10:	4b17      	ldr	r3, [pc, #92]	; (8004f70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f12:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004f14:	e00d      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004f16:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f18:	60bb      	str	r3, [r7, #8]
        break;
 8004f1a:	e00a      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f1c:	f7ff f967 	bl	80041ee <LL_RCC_MSI_GetRange>
 8004f20:	4603      	mov	r3, r0
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	4a0f      	ldr	r2, [pc, #60]	; (8004f68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2e:	60bb      	str	r3, [r7, #8]
        break;
 8004f30:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004f32:	f7ff fa59 	bl	80043e8 <LL_RCC_PLL_GetN>
 8004f36:	4602      	mov	r2, r0
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	fb03 f402 	mul.w	r4, r3, r2
 8004f3e:	f7ff fa6c 	bl	800441a <LL_RCC_PLL_GetDivider>
 8004f42:	4603      	mov	r3, r0
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	3301      	adds	r3, #1
 8004f48:	fbb4 f4f3 	udiv	r4, r4, r3
 8004f4c:	f7ff fa59 	bl	8004402 <LL_RCC_PLL_GetR>
 8004f50:	4603      	mov	r3, r0
 8004f52:	0f5b      	lsrs	r3, r3, #29
 8004f54:	3301      	adds	r3, #1
 8004f56:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f5a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd90      	pop	{r4, r7, pc}
 8004f66:	bf00      	nop
 8004f68:	0800ac64 	.word	0x0800ac64
 8004f6c:	00f42400 	.word	0x00f42400
 8004f70:	007a1200 	.word	0x007a1200

08004f74 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f74:	b598      	push	{r3, r4, r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004f78:	f7ff ff90 	bl	8004e9c <HAL_RCC_GetSysClockFreq>
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	f7ff f9e9 	bl	8004354 <LL_RCC_GetAHBPrescaler>
 8004f82:	4603      	mov	r3, r0
 8004f84:	091b      	lsrs	r3, r3, #4
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	4a03      	ldr	r2, [pc, #12]	; (8004f98 <HAL_RCC_GetHCLKFreq+0x24>)
 8004f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f90:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	bd98      	pop	{r3, r4, r7, pc}
 8004f98:	0800ac24 	.word	0x0800ac24

08004f9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2bb0      	cmp	r3, #176	; 0xb0
 8004fa8:	d903      	bls.n	8004fb2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004faa:	4b15      	ldr	r3, [pc, #84]	; (8005000 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	e007      	b.n	8004fc2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	4a11      	ldr	r2, [pc, #68]	; (8005000 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004fc2:	f7ff f9d3 	bl	800436c <LL_RCC_GetAHB4Prescaler>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	091b      	lsrs	r3, r3, #4
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	4a0d      	ldr	r2, [pc, #52]	; (8005004 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe4:	0c9c      	lsrs	r4, r3, #18
 8004fe6:	f7fe ff11 	bl	8003e0c <HAL_PWREx_GetVoltageRange>
 8004fea:	4603      	mov	r3, r0
 8004fec:	4619      	mov	r1, r3
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f000 f80c 	bl	800500c <RCC_SetFlashLatency>
 8004ff4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd90      	pop	{r4, r7, pc}
 8004ffe:	bf00      	nop
 8005000:	0800ac64 	.word	0x0800ac64
 8005004:	0800ac24 	.word	0x0800ac24
 8005008:	431bde83 	.word	0x431bde83

0800500c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800500c:	b590      	push	{r4, r7, lr}
 800500e:	b093      	sub	sp, #76	; 0x4c
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005016:	4b39      	ldr	r3, [pc, #228]	; (80050fc <RCC_SetFlashLatency+0xf0>)
 8005018:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800501c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800501e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005022:	4a37      	ldr	r2, [pc, #220]	; (8005100 <RCC_SetFlashLatency+0xf4>)
 8005024:	f107 031c 	add.w	r3, r7, #28
 8005028:	ca07      	ldmia	r2, {r0, r1, r2}
 800502a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800502e:	4b35      	ldr	r3, [pc, #212]	; (8005104 <RCC_SetFlashLatency+0xf8>)
 8005030:	f107 040c 	add.w	r4, r7, #12
 8005034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005036:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800503a:	2300      	movs	r3, #0
 800503c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005044:	d11c      	bne.n	8005080 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005046:	2300      	movs	r3, #0
 8005048:	643b      	str	r3, [r7, #64]	; 0x40
 800504a:	e015      	b.n	8005078 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800504c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005054:	4413      	add	r3, r2
 8005056:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	d808      	bhi.n	8005072 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005068:	4413      	add	r3, r2
 800506a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800506e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005070:	e022      	b.n	80050b8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005074:	3301      	adds	r3, #1
 8005076:	643b      	str	r3, [r7, #64]	; 0x40
 8005078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800507a:	2b03      	cmp	r3, #3
 800507c:	d9e6      	bls.n	800504c <RCC_SetFlashLatency+0x40>
 800507e:	e01b      	b.n	80050b8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005080:	2300      	movs	r3, #0
 8005082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005084:	e015      	b.n	80050b2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800508e:	4413      	add	r3, r2
 8005090:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d808      	bhi.n	80050ac <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800509a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80050a2:	4413      	add	r3, r2
 80050a4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80050a8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80050aa:	e005      	b.n	80050b8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80050ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ae:	3301      	adds	r3, #1
 80050b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d9e6      	bls.n	8005086 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80050b8:	4b13      	ldr	r3, [pc, #76]	; (8005108 <RCC_SetFlashLatency+0xfc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f023 0207 	bic.w	r2, r3, #7
 80050c0:	4911      	ldr	r1, [pc, #68]	; (8005108 <RCC_SetFlashLatency+0xfc>)
 80050c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c4:	4313      	orrs	r3, r2
 80050c6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050c8:	f7fc fe90 	bl	8001dec <HAL_GetTick>
 80050cc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80050ce:	e008      	b.n	80050e2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050d0:	f7fc fe8c 	bl	8001dec <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e007      	b.n	80050f2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80050e2:	4b09      	ldr	r3, [pc, #36]	; (8005108 <RCC_SetFlashLatency+0xfc>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d1ef      	bne.n	80050d0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	374c      	adds	r7, #76	; 0x4c
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd90      	pop	{r4, r7, pc}
 80050fa:	bf00      	nop
 80050fc:	0800abb0 	.word	0x0800abb0
 8005100:	0800abc0 	.word	0x0800abc0
 8005104:	0800abcc 	.word	0x0800abcc
 8005108:	58004000 	.word	0x58004000

0800510c <LL_RCC_LSE_IsEnabled>:
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <LL_RCC_LSE_IsEnabled+0x18>
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <LL_RCC_LSE_IsEnabled+0x1a>
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <LL_RCC_LSE_IsReady>:
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b02      	cmp	r3, #2
 8005142:	d101      	bne.n	8005148 <LL_RCC_LSE_IsReady+0x18>
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <LL_RCC_LSE_IsReady+0x1a>
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <LL_RCC_MSI_EnablePLLMode>:
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005162:	f043 0304 	orr.w	r3, r3, #4
 8005166:	6013      	str	r3, [r2, #0]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <LL_RCC_SetRFWKPClockSource>:
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005182:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <LL_RCC_SetSMPSClockSource>:
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80051a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	f023 0203 	bic.w	r2, r3, #3
 80051b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <LL_RCC_SetSMPSPrescaler>:
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80051ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4313      	orrs	r3, r2
 80051e0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <LL_RCC_SetUSARTClockSource>:
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80051f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f023 0203 	bic.w	r2, r3, #3
 8005202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <LL_RCC_SetLPUARTClockSource>:
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800522e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <LL_RCC_SetI2CClockSource>:
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800524e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005252:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800525e:	43db      	mvns	r3, r3
 8005260:	401a      	ands	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800526a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <LL_RCC_SetLPTIMClockSource>:
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	0c1b      	lsrs	r3, r3, #16
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	43db      	mvns	r3, r3
 8005298:	401a      	ands	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <LL_RCC_SetSAIClockSource>:
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80052bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <LL_RCC_SetRNGClockSource>:
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80052e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80052f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <LL_RCC_SetCLK48ClockSource>:
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005320:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <LL_RCC_SetUSBClockSource>:
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff ffe3 	bl	800530c <LL_RCC_SetCLK48ClockSource>
}
 8005346:	bf00      	nop
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <LL_RCC_SetADCClockSource>:
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <LL_RCC_SetRTCClockSource>:
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800538e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <LL_RCC_GetRTCClockSource>:
{
 80053a6:	b480      	push	{r7}
 80053a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80053aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <LL_RCC_ForceBackupDomainReset>:
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80053c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053d8:	bf00      	nop
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80053e2:	b480      	push	{r7}
 80053e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80053e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053fa:	bf00      	nop
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <LL_RCC_PLLSAI1_Enable>:
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005412:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005416:	6013      	str	r3, [r2, #0]
}
 8005418:	bf00      	nop
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <LL_RCC_PLLSAI1_Disable>:
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005430:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005434:	6013      	str	r3, [r2, #0]
}
 8005436:	bf00      	nop
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <LL_RCC_PLLSAI1_IsReady>:
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800544e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005452:	d101      	bne.n	8005458 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800546c:	2300      	movs	r3, #0
 800546e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005470:	2300      	movs	r3, #0
 8005472:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d034      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005488:	d021      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800548a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800548e:	d81b      	bhi.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005490:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005494:	d01d      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005496:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800549a:	d815      	bhi.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80054a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054a4:	d110      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80054b6:	e00d      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 f94d 	bl	800575c <RCCEx_PLLSAI1_ConfigNP>
 80054c2:	4603      	mov	r3, r0
 80054c4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80054c6:	e005      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	77fb      	strb	r3, [r7, #31]
        break;
 80054cc:	e002      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80054ce:	bf00      	nop
 80054d0:	e000      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80054d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d4:	7ffb      	ldrb	r3, [r7, #31]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d105      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff fee8 	bl	80052b4 <LL_RCC_SetSAIClockSource>
 80054e4:	e001      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e6:	7ffb      	ldrb	r3, [r7, #31]
 80054e8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d046      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80054f6:	f7ff ff56 	bl	80053a6 <LL_RCC_GetRTCClockSource>
 80054fa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	429a      	cmp	r2, r3
 8005504:	d03c      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005506:	f7fe fc71 	bl	8003dec <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d105      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff ff30 	bl	800537a <LL_RCC_SetRTCClockSource>
 800551a:	e02e      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800551c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005526:	f7ff ff4b 	bl	80053c0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800552a:	f7ff ff5a 	bl	80053e2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800553c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005546:	f7ff fde1 	bl	800510c <LL_RCC_LSE_IsEnabled>
 800554a:	4603      	mov	r3, r0
 800554c:	2b01      	cmp	r3, #1
 800554e:	d114      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005550:	f7fc fc4c 	bl	8001dec <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005556:	e00b      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005558:	f7fc fc48 	bl	8001dec <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	; 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d902      	bls.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	77fb      	strb	r3, [r7, #31]
              break;
 800556e:	e004      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005570:	f7ff fdde 	bl	8005130 <LL_RCC_LSE_IsReady>
 8005574:	4603      	mov	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d1ee      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800557a:	7ffb      	ldrb	r3, [r7, #31]
 800557c:	77bb      	strb	r3, [r7, #30]
 800557e:	e001      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005580:	7ffb      	ldrb	r3, [r7, #31]
 8005582:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d004      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff fe2a 	bl	80051ee <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d004      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff fe35 	bl	800521a <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d004      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff fe5d 	bl	8005280 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d004      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff fe52 	bl	8005280 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d004      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fe2a 	bl	8005246 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d004      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff fe1f 	bl	8005246 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d022      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fe8d 	bl	8005338 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005626:	d107      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005636:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005640:	d10b      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3304      	adds	r3, #4
 8005646:	4618      	mov	r0, r3
 8005648:	f000 f8e3 	bl	8005812 <RCCEx_PLLSAI1_ConfigNQ>
 800564c:	4603      	mov	r3, r0
 800564e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005650:	7ffb      	ldrb	r3, [r7, #31]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005656:	7ffb      	ldrb	r3, [r7, #31]
 8005658:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005662:	2b00      	cmp	r3, #0
 8005664:	d02b      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566e:	d008      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005678:	d003      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	2b00      	cmp	r3, #0
 8005680:	d105      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff fe2a 	bl	80052e0 <LL_RCC_SetRNGClockSource>
 800568c:	e00a      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	2000      	movs	r0, #0
 800569a:	f7ff fe21 	bl	80052e0 <LL_RCC_SetRNGClockSource>
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f7ff fe34 	bl	800530c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80056ac:	d107      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80056ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d022      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff fe3d 	bl	800534e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056dc:	d107      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ec:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056f6:	d10b      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f8e3 	bl	80058c8 <RCCEx_PLLSAI1_ConfigNR>
 8005702:	4603      	mov	r3, r0
 8005704:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005706:	7ffb      	ldrb	r3, [r7, #31]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800570c:	7ffb      	ldrb	r3, [r7, #31]
 800570e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d004      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fd26 	bl	8005172 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff fd45 	bl	80051c6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff fd2c 	bl	800519e <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005746:	7fbb      	ldrb	r3, [r7, #30]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3720      	adds	r7, #32
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005754:	f7ff fcfe 	bl	8005154 <LL_RCC_MSI_EnablePLLMode>
}
 8005758:	bf00      	nop
 800575a:	bd80      	pop	{r7, pc}

0800575c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005768:	f7ff fe5b 	bl	8005422 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800576c:	f7fc fb3e 	bl	8001dec <HAL_GetTick>
 8005770:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005772:	e009      	b.n	8005788 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005774:	f7fc fb3a 	bl	8001dec <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d902      	bls.n	8005788 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	73fb      	strb	r3, [r7, #15]
      break;
 8005786:	e004      	b.n	8005792 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005788:	f7ff fe5a 	bl	8005440 <LL_RCC_PLLSAI1_IsReady>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d137      	bne.n	8005808 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ac:	4313      	orrs	r3, r2
 80057ae:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80057b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057c2:	4313      	orrs	r3, r2
 80057c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80057c6:	f7ff fe1d 	bl	8005404 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ca:	f7fc fb0f 	bl	8001dec <HAL_GetTick>
 80057ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057d0:	e009      	b.n	80057e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057d2:	f7fc fb0b 	bl	8001dec <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d902      	bls.n	80057e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	73fb      	strb	r3, [r7, #15]
        break;
 80057e4:	e004      	b.n	80057f0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057e6:	f7ff fe2b 	bl	8005440 <LL_RCC_PLLSAI1_IsReady>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d1f0      	bne.n	80057d2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d108      	bne.n	8005808 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80057f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005804:	4313      	orrs	r3, r2
 8005806:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800581e:	f7ff fe00 	bl	8005422 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005822:	f7fc fae3 	bl	8001dec <HAL_GetTick>
 8005826:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005828:	e009      	b.n	800583e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800582a:	f7fc fadf 	bl	8001dec <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d902      	bls.n	800583e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	73fb      	strb	r3, [r7, #15]
      break;
 800583c:	e004      	b.n	8005848 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800583e:	f7ff fdff 	bl	8005440 <LL_RCC_PLLSAI1_IsReady>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f0      	bne.n	800582a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d137      	bne.n	80058be <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800584e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005862:	4313      	orrs	r3, r2
 8005864:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005878:	4313      	orrs	r3, r2
 800587a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800587c:	f7ff fdc2 	bl	8005404 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005880:	f7fc fab4 	bl	8001dec <HAL_GetTick>
 8005884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005886:	e009      	b.n	800589c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005888:	f7fc fab0 	bl	8001dec <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d902      	bls.n	800589c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	73fb      	strb	r3, [r7, #15]
        break;
 800589a:	e004      	b.n	80058a6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800589c:	f7ff fdd0 	bl	8005440 <LL_RCC_PLLSAI1_IsReady>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d1f0      	bne.n	8005888 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d108      	bne.n	80058be <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80058ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058ba:	4313      	orrs	r3, r2
 80058bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80058d4:	f7ff fda5 	bl	8005422 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058d8:	f7fc fa88 	bl	8001dec <HAL_GetTick>
 80058dc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80058de:	e009      	b.n	80058f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058e0:	f7fc fa84 	bl	8001dec <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d902      	bls.n	80058f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	73fb      	strb	r3, [r7, #15]
      break;
 80058f2:	e004      	b.n	80058fe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80058f4:	f7ff fda4 	bl	8005440 <LL_RCC_PLLSAI1_IsReady>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f0      	bne.n	80058e0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d137      	bne.n	8005974 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005918:	4313      	orrs	r3, r2
 800591a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800591c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800592e:	4313      	orrs	r3, r2
 8005930:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005932:	f7ff fd67 	bl	8005404 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005936:	f7fc fa59 	bl	8001dec <HAL_GetTick>
 800593a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800593c:	e009      	b.n	8005952 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800593e:	f7fc fa55 	bl	8001dec <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d902      	bls.n	8005952 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	73fb      	strb	r3, [r7, #15]
        break;
 8005950:	e004      	b.n	800595c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005952:	f7ff fd75 	bl	8005440 <LL_RCC_PLLSAI1_IsReady>
 8005956:	4603      	mov	r3, r0
 8005958:	2b01      	cmp	r3, #1
 800595a:	d1f0      	bne.n	800593e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d108      	bne.n	8005974 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005970:	4313      	orrs	r3, r2
 8005972:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005974:	7bfb      	ldrb	r3, [r7, #15]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e095      	b.n	8005abc <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d108      	bne.n	80059aa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a0:	d009      	beq.n	80059b6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	61da      	str	r2, [r3, #28]
 80059a8:	e005      	b.n	80059b6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fb ffcf 	bl	8001974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ec:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059f6:	d902      	bls.n	80059fe <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	e002      	b.n	8005a04 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a02:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a0c:	d007      	beq.n	8005a1e <HAL_SPI_Init+0xa0>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a16:	d002      	beq.n	8005a1e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a60:	ea42 0103 	orr.w	r1, r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	0c1b      	lsrs	r3, r3, #16
 8005a7a:	f003 0204 	and.w	r2, r3, #4
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	f003 0310 	and.w	r3, r3, #16
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a9a:	ea42 0103 	orr.w	r1, r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_SPI_Transmit+0x22>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e158      	b.n	8005d98 <HAL_SPI_Transmit+0x2d4>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aee:	f7fc f97d 	bl	8001dec <HAL_GetTick>
 8005af2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005af4:	88fb      	ldrh	r3, [r7, #6]
 8005af6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d002      	beq.n	8005b0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b04:	2302      	movs	r3, #2
 8005b06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b08:	e13d      	b.n	8005d86 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_SPI_Transmit+0x52>
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b1a:	e134      	b.n	8005d86 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2203      	movs	r2, #3
 8005b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b66:	d10f      	bne.n	8005b88 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d007      	beq.n	8005ba6 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ba4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bae:	d94b      	bls.n	8005c48 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <HAL_SPI_Transmit+0xfa>
 8005bb8:	8afb      	ldrh	r3, [r7, #22]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d13e      	bne.n	8005c3c <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	881a      	ldrh	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	1c9a      	adds	r2, r3, #2
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005be2:	e02b      	b.n	8005c3c <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d112      	bne.n	8005c18 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	881a      	ldrh	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	1c9a      	adds	r2, r3, #2
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c16:	e011      	b.n	8005c3c <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c18:	f7fc f8e8 	bl	8001dec <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d803      	bhi.n	8005c30 <HAL_SPI_Transmit+0x16c>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2e:	d102      	bne.n	8005c36 <HAL_SPI_Transmit+0x172>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c3a:	e0a4      	b.n	8005d86 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1ce      	bne.n	8005be4 <HAL_SPI_Transmit+0x120>
 8005c46:	e07c      	b.n	8005d42 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <HAL_SPI_Transmit+0x192>
 8005c50:	8afb      	ldrh	r3, [r7, #22]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d170      	bne.n	8005d38 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d912      	bls.n	8005c86 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	881a      	ldrh	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	1c9a      	adds	r2, r3, #2
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b02      	subs	r3, #2
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c84:	e058      	b.n	8005d38 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	7812      	ldrb	r2, [r2, #0]
 8005c92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005cac:	e044      	b.n	8005d38 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d12b      	bne.n	8005d14 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d912      	bls.n	8005cec <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	881a      	ldrh	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	1c9a      	adds	r2, r3, #2
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b02      	subs	r3, #2
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cea:	e025      	b.n	8005d38 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	7812      	ldrb	r2, [r2, #0]
 8005cf8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d12:	e011      	b.n	8005d38 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d14:	f7fc f86a 	bl	8001dec <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d803      	bhi.n	8005d2c <HAL_SPI_Transmit+0x268>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2a:	d102      	bne.n	8005d32 <HAL_SPI_Transmit+0x26e>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d36:	e026      	b.n	8005d86 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1b5      	bne.n	8005cae <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fce4 	bl	8006714 <SPI_EndRxTxTransaction>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2220      	movs	r2, #32
 8005d56:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d60:	2300      	movs	r3, #0
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	613b      	str	r3, [r7, #16]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	77fb      	strb	r3, [r7, #31]
 8005d82:	e000      	b.n	8005d86 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005d84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d96:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dbc:	d112      	bne.n	8005de4 <HAL_SPI_Receive+0x44>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10e      	bne.n	8005de4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2204      	movs	r2, #4
 8005dca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005dce:	88fa      	ldrh	r2, [r7, #6]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 f910 	bl	8006000 <HAL_SPI_TransmitReceive>
 8005de0:	4603      	mov	r3, r0
 8005de2:	e109      	b.n	8005ff8 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_SPI_Receive+0x52>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e102      	b.n	8005ff8 <HAL_SPI_Receive+0x258>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dfa:	f7fb fff7 	bl	8001dec <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d002      	beq.n	8005e12 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e10:	e0e9      	b.n	8005fe6 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_SPI_Receive+0x7e>
 8005e18:	88fb      	ldrh	r3, [r7, #6]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d102      	bne.n	8005e24 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e22:	e0e0      	b.n	8005fe6 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2204      	movs	r2, #4
 8005e28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	88fa      	ldrh	r2, [r7, #6]
 8005e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	88fa      	ldrh	r2, [r7, #6]
 8005e44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e6e:	d908      	bls.n	8005e82 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	e007      	b.n	8005e92 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e90:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e9a:	d10f      	bne.n	8005ebc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005eba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec6:	2b40      	cmp	r3, #64	; 0x40
 8005ec8:	d007      	beq.n	8005eda <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ed8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ee2:	d867      	bhi.n	8005fb4 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ee4:	e030      	b.n	8005f48 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d117      	bne.n	8005f24 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f103 020c 	add.w	r2, r3, #12
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	7812      	ldrb	r2, [r2, #0]
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f22:	e011      	b.n	8005f48 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f24:	f7fb ff62 	bl	8001dec <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d803      	bhi.n	8005f3c <HAL_SPI_Receive+0x19c>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d102      	bne.n	8005f42 <HAL_SPI_Receive+0x1a2>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f46:	e04e      	b.n	8005fe6 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1c8      	bne.n	8005ee6 <HAL_SPI_Receive+0x146>
 8005f54:	e034      	b.n	8005fc0 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d115      	bne.n	8005f90 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	b292      	uxth	r2, r2
 8005f70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	1c9a      	adds	r2, r3, #2
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f8e:	e011      	b.n	8005fb4 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f90:	f7fb ff2c 	bl	8001dec <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d803      	bhi.n	8005fa8 <HAL_SPI_Receive+0x208>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa6:	d102      	bne.n	8005fae <HAL_SPI_Receive+0x20e>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d102      	bne.n	8005fb4 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005fb2:	e018      	b.n	8005fe6 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1ca      	bne.n	8005f56 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fb4d 	bl	8006664 <SPI_EndRxTransaction>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	75fb      	strb	r3, [r7, #23]
 8005fe2:	e000      	b.n	8005fe6 <HAL_SPI_Receive+0x246>
  }

error :
 8005fe4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	; 0x28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800600e:	2301      	movs	r3, #1
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x26>
 8006022:	2302      	movs	r3, #2
 8006024:	e1fb      	b.n	800641e <HAL_SPI_TransmitReceive+0x41e>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800602e:	f7fb fedd 	bl	8001dec <HAL_GetTick>
 8006032:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800603a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006042:	887b      	ldrh	r3, [r7, #2]
 8006044:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006046:	887b      	ldrh	r3, [r7, #2]
 8006048:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800604a:	7efb      	ldrb	r3, [r7, #27]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d00e      	beq.n	800606e <HAL_SPI_TransmitReceive+0x6e>
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006056:	d106      	bne.n	8006066 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d102      	bne.n	8006066 <HAL_SPI_TransmitReceive+0x66>
 8006060:	7efb      	ldrb	r3, [r7, #27]
 8006062:	2b04      	cmp	r3, #4
 8006064:	d003      	beq.n	800606e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006066:	2302      	movs	r3, #2
 8006068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800606c:	e1cd      	b.n	800640a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_SPI_TransmitReceive+0x80>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <HAL_SPI_TransmitReceive+0x80>
 800607a:	887b      	ldrh	r3, [r7, #2]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d103      	bne.n	8006088 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006086:	e1c0      	b.n	800640a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b04      	cmp	r3, #4
 8006092:	d003      	beq.n	800609c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2205      	movs	r2, #5
 8006098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	887a      	ldrh	r2, [r7, #2]
 80060ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	887a      	ldrh	r2, [r7, #2]
 80060b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	887a      	ldrh	r2, [r7, #2]
 80060c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	887a      	ldrh	r2, [r7, #2]
 80060c8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060de:	d802      	bhi.n	80060e6 <HAL_SPI_TransmitReceive+0xe6>
 80060e0:	8a3b      	ldrh	r3, [r7, #16]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d908      	bls.n	80060f8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060f4:	605a      	str	r2, [r3, #4]
 80060f6:	e007      	b.n	8006108 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006106:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d007      	beq.n	8006126 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006124:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800612e:	d97c      	bls.n	800622a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <HAL_SPI_TransmitReceive+0x13e>
 8006138:	8a7b      	ldrh	r3, [r7, #18]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d169      	bne.n	8006212 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	881a      	ldrh	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	1c9a      	adds	r2, r3, #2
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006162:	e056      	b.n	8006212 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d11b      	bne.n	80061aa <HAL_SPI_TransmitReceive+0x1aa>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d016      	beq.n	80061aa <HAL_SPI_TransmitReceive+0x1aa>
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	2b01      	cmp	r3, #1
 8006180:	d113      	bne.n	80061aa <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	881a      	ldrh	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	1c9a      	adds	r2, r3, #2
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d11c      	bne.n	80061f2 <HAL_SPI_TransmitReceive+0x1f2>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d016      	beq.n	80061f2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	b292      	uxth	r2, r2
 80061d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	1c9a      	adds	r2, r3, #2
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061ee:	2301      	movs	r3, #1
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061f2:	f7fb fdfb 	bl	8001dec <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fe:	429a      	cmp	r2, r3
 8006200:	d807      	bhi.n	8006212 <HAL_SPI_TransmitReceive+0x212>
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006208:	d003      	beq.n	8006212 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006210:	e0fb      	b.n	800640a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1a3      	bne.n	8006164 <HAL_SPI_TransmitReceive+0x164>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d19d      	bne.n	8006164 <HAL_SPI_TransmitReceive+0x164>
 8006228:	e0df      	b.n	80063ea <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_SPI_TransmitReceive+0x23a>
 8006232:	8a7b      	ldrh	r3, [r7, #18]
 8006234:	2b01      	cmp	r3, #1
 8006236:	f040 80cb 	bne.w	80063d0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800623e:	b29b      	uxth	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	d912      	bls.n	800626a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	881a      	ldrh	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006254:	1c9a      	adds	r2, r3, #2
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b02      	subs	r3, #2
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006268:	e0b2      	b.n	80063d0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	330c      	adds	r3, #12
 8006274:	7812      	ldrb	r2, [r2, #0]
 8006276:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006286:	b29b      	uxth	r3, r3
 8006288:	3b01      	subs	r3, #1
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006290:	e09e      	b.n	80063d0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b02      	cmp	r3, #2
 800629e:	d134      	bne.n	800630a <HAL_SPI_TransmitReceive+0x30a>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d02f      	beq.n	800630a <HAL_SPI_TransmitReceive+0x30a>
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d12c      	bne.n	800630a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d912      	bls.n	80062e0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	881a      	ldrh	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	1c9a      	adds	r2, r3, #2
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b02      	subs	r3, #2
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062de:	e012      	b.n	8006306 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330c      	adds	r3, #12
 80062ea:	7812      	ldrb	r2, [r2, #0]
 80062ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b01      	cmp	r3, #1
 8006316:	d148      	bne.n	80063aa <HAL_SPI_TransmitReceive+0x3aa>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800631e:	b29b      	uxth	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d042      	beq.n	80063aa <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	d923      	bls.n	8006378 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	b292      	uxth	r2, r2
 800633c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	1c9a      	adds	r2, r3, #2
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b02      	subs	r3, #2
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b01      	cmp	r3, #1
 8006364:	d81f      	bhi.n	80063a6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006374:	605a      	str	r2, [r3, #4]
 8006376:	e016      	b.n	80063a6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f103 020c 	add.w	r2, r3, #12
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	7812      	ldrb	r2, [r2, #0]
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063a6:	2301      	movs	r3, #1
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063aa:	f7fb fd1f 	bl	8001dec <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d803      	bhi.n	80063c2 <HAL_SPI_TransmitReceive+0x3c2>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c0:	d102      	bne.n	80063c8 <HAL_SPI_TransmitReceive+0x3c8>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d103      	bne.n	80063d0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80063ce:	e01c      	b.n	800640a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f47f af5b 	bne.w	8006292 <HAL_SPI_TransmitReceive+0x292>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f47f af54 	bne.w	8006292 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 f990 	bl	8006714 <SPI_EndRxTxTransaction>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d006      	beq.n	8006408 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	661a      	str	r2, [r3, #96]	; 0x60
 8006406:	e000      	b.n	800640a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006408:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800641a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800641e:	4618      	mov	r0, r3
 8006420:	3728      	adds	r7, #40	; 0x28
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b088      	sub	sp, #32
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	4613      	mov	r3, r2
 8006436:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006438:	f7fb fcd8 	bl	8001dec <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	4413      	add	r3, r2
 8006446:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006448:	f7fb fcd0 	bl	8001dec <HAL_GetTick>
 800644c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800644e:	4b39      	ldr	r3, [pc, #228]	; (8006534 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	015b      	lsls	r3, r3, #5
 8006454:	0d1b      	lsrs	r3, r3, #20
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	fb02 f303 	mul.w	r3, r2, r3
 800645c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800645e:	e054      	b.n	800650a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006466:	d050      	beq.n	800650a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006468:	f7fb fcc0 	bl	8001dec <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	429a      	cmp	r2, r3
 8006476:	d902      	bls.n	800647e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d13d      	bne.n	80064fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800648c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006496:	d111      	bne.n	80064bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064a0:	d004      	beq.n	80064ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064aa:	d107      	bne.n	80064bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c4:	d10f      	bne.n	80064e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e017      	b.n	800652a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	3b01      	subs	r3, #1
 8006508:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4013      	ands	r3, r2
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	429a      	cmp	r2, r3
 8006518:	bf0c      	ite	eq
 800651a:	2301      	moveq	r3, #1
 800651c:	2300      	movne	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	429a      	cmp	r2, r3
 8006526:	d19b      	bne.n	8006460 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3720      	adds	r7, #32
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	2000001c 	.word	0x2000001c

08006538 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08a      	sub	sp, #40	; 0x28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800654a:	f7fb fc4f 	bl	8001dec <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	4413      	add	r3, r2
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800655a:	f7fb fc47 	bl	8001dec <HAL_GetTick>
 800655e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	330c      	adds	r3, #12
 8006566:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006568:	4b3d      	ldr	r3, [pc, #244]	; (8006660 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	00da      	lsls	r2, r3, #3
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	0d1b      	lsrs	r3, r3, #20
 8006578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657a:	fb02 f303 	mul.w	r3, r2, r3
 800657e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006580:	e060      	b.n	8006644 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006588:	d107      	bne.n	800659a <SPI_WaitFifoStateUntilTimeout+0x62>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d104      	bne.n	800659a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006598:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d050      	beq.n	8006644 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065a2:	f7fb fc23 	bl	8001dec <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d902      	bls.n	80065b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d13d      	bne.n	8006634 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065d0:	d111      	bne.n	80065f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065da:	d004      	beq.n	80065e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e4:	d107      	bne.n	80065f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065fe:	d10f      	bne.n	8006620 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800661e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e010      	b.n	8006656 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	3b01      	subs	r3, #1
 8006642:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	4013      	ands	r3, r2
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	429a      	cmp	r2, r3
 8006652:	d196      	bne.n	8006582 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3728      	adds	r7, #40	; 0x28
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	2000001c 	.word	0x2000001c

08006664 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006678:	d111      	bne.n	800669e <SPI_EndRxTransaction+0x3a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006682:	d004      	beq.n	800668e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668c:	d107      	bne.n	800669e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800669c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2180      	movs	r1, #128	; 0x80
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f7ff febd 	bl	8006428 <SPI_WaitFlagStateUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d007      	beq.n	80066c4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b8:	f043 0220 	orr.w	r2, r3, #32
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e023      	b.n	800670c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066cc:	d11d      	bne.n	800670a <SPI_EndRxTransaction+0xa6>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d6:	d004      	beq.n	80066e2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e0:	d113      	bne.n	800670a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff ff22 	bl	8006538 <SPI_WaitFifoStateUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fe:	f043 0220 	orr.w	r2, r3, #32
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e000      	b.n	800670c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2200      	movs	r2, #0
 8006728:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f7ff ff03 	bl	8006538 <SPI_WaitFifoStateUntilTimeout>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673c:	f043 0220 	orr.w	r2, r3, #32
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e027      	b.n	8006798 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2200      	movs	r2, #0
 8006750:	2180      	movs	r1, #128	; 0x80
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff fe68 	bl	8006428 <SPI_WaitFlagStateUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006762:	f043 0220 	orr.w	r2, r3, #32
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e014      	b.n	8006798 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7ff fedc 	bl	8006538 <SPI_WaitFifoStateUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d007      	beq.n	8006796 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800678a:	f043 0220 	orr.w	r2, r3, #32
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e000      	b.n	8006798 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e097      	b.n	80068e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d106      	bne.n	80067ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7fb fa39 	bl	8001c40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80067e4:	f023 0307 	bic.w	r3, r3, #7
 80067e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	3304      	adds	r3, #4
 80067f2:	4619      	mov	r1, r3
 80067f4:	4610      	mov	r0, r2
 80067f6:	f000 f907 	bl	8006a08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4313      	orrs	r3, r2
 800681a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006822:	f023 0303 	bic.w	r3, r3, #3
 8006826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	4313      	orrs	r3, r2
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006840:	f023 030c 	bic.w	r3, r3, #12
 8006844:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800684c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	021b      	lsls	r3, r3, #8
 800685c:	4313      	orrs	r3, r2
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	011a      	lsls	r2, r3, #4
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	031b      	lsls	r3, r3, #12
 8006870:	4313      	orrs	r3, r2
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800687e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006886:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	4313      	orrs	r3, r2
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006904:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800690c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006914:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d110      	bne.n	800693e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d102      	bne.n	8006928 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006922:	7b7b      	ldrb	r3, [r7, #13]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d001      	beq.n	800692c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e069      	b.n	8006a00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800693c:	e031      	b.n	80069a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b04      	cmp	r3, #4
 8006942:	d110      	bne.n	8006966 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006944:	7bbb      	ldrb	r3, [r7, #14]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d102      	bne.n	8006950 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800694a:	7b3b      	ldrb	r3, [r7, #12]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d001      	beq.n	8006954 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e055      	b.n	8006a00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006964:	e01d      	b.n	80069a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d108      	bne.n	800697e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d105      	bne.n	800697e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006972:	7b7b      	ldrb	r3, [r7, #13]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d102      	bne.n	800697e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006978:	7b3b      	ldrb	r3, [r7, #12]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d001      	beq.n	8006982 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e03e      	b.n	8006a00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2202      	movs	r2, #2
 8006986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2202      	movs	r2, #2
 800698e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2202      	movs	r2, #2
 8006996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2202      	movs	r2, #2
 800699e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <HAL_TIM_Encoder_Start+0xc4>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d008      	beq.n	80069c0 <HAL_TIM_Encoder_Start+0xd4>
 80069ae:	e00f      	b.n	80069d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2201      	movs	r2, #1
 80069b6:	2100      	movs	r1, #0
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 f889 	bl	8006ad0 <TIM_CCxChannelCmd>
      break;
 80069be:	e016      	b.n	80069ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2201      	movs	r2, #1
 80069c6:	2104      	movs	r1, #4
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 f881 	bl	8006ad0 <TIM_CCxChannelCmd>
      break;
 80069ce:	e00e      	b.n	80069ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2201      	movs	r2, #1
 80069d6:	2100      	movs	r1, #0
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 f879 	bl	8006ad0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2201      	movs	r2, #1
 80069e4:	2104      	movs	r1, #4
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f872 	bl	8006ad0 <TIM_CCxChannelCmd>
      break;
 80069ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0201 	orr.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a2a      	ldr	r2, [pc, #168]	; (8006ac4 <TIM_Base_SetConfig+0xbc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d003      	beq.n	8006a28 <TIM_Base_SetConfig+0x20>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a26:	d108      	bne.n	8006a3a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a21      	ldr	r2, [pc, #132]	; (8006ac4 <TIM_Base_SetConfig+0xbc>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00b      	beq.n	8006a5a <TIM_Base_SetConfig+0x52>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a48:	d007      	beq.n	8006a5a <TIM_Base_SetConfig+0x52>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a1e      	ldr	r2, [pc, #120]	; (8006ac8 <TIM_Base_SetConfig+0xc0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_Base_SetConfig+0x52>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a1d      	ldr	r2, [pc, #116]	; (8006acc <TIM_Base_SetConfig+0xc4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d108      	bne.n	8006a6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a0c      	ldr	r2, [pc, #48]	; (8006ac4 <TIM_Base_SetConfig+0xbc>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d007      	beq.n	8006aa8 <TIM_Base_SetConfig+0xa0>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a0b      	ldr	r2, [pc, #44]	; (8006ac8 <TIM_Base_SetConfig+0xc0>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d003      	beq.n	8006aa8 <TIM_Base_SetConfig+0xa0>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <TIM_Base_SetConfig+0xc4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d103      	bne.n	8006ab0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	615a      	str	r2, [r3, #20]
}
 8006ab6:	bf00      	nop
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40014400 	.word	0x40014400
 8006acc:	40014800 	.word	0x40014800

08006ad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f003 031f 	and.w	r3, r3, #31
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a1a      	ldr	r2, [r3, #32]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	43db      	mvns	r3, r3
 8006af2:	401a      	ands	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a1a      	ldr	r2, [r3, #32]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f003 031f 	and.w	r3, r3, #31
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	fa01 f303 	lsl.w	r3, r1, r3
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	621a      	str	r2, [r3, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
	...

08006b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e04a      	b.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1f      	ldr	r2, [pc, #124]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d108      	bne.n	8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a12      	ldr	r2, [pc, #72]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d004      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9c:	d10c      	bne.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40012c00 	.word	0x40012c00

08006bdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006bf0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c12:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006c16:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	43db      	mvns	r3, r3
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	4013      	ands	r3, r2
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c40:	b084      	sub	sp, #16
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	f107 0014 	add.w	r0, r7, #20
 8006c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	b004      	add	sp, #16
 8006c80:	4770      	bx	lr
	...

08006c84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b09d      	sub	sp, #116	; 0x74
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006caa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	78db      	ldrb	r3, [r3, #3]
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d81f      	bhi.n	8006cf6 <USB_ActivateEndpoint+0x72>
 8006cb6:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <USB_ActivateEndpoint+0x38>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006ccd 	.word	0x08006ccd
 8006cc0:	08006ce9 	.word	0x08006ce9
 8006cc4:	08006cff 	.word	0x08006cff
 8006cc8:	08006cdb 	.word	0x08006cdb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006ccc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006cd8:	e012      	b.n	8006d00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006cda:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006cde:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006ce2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006ce6:	e00b      	b.n	8006d00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006ce8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006cec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cf0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006cf4:	e004      	b.n	8006d00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006cfc:	e000      	b.n	8006d00 <USB_ActivateEndpoint+0x7c>
      break;
 8006cfe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	b21b      	sxth	r3, r3
 8006d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3a:	b21a      	sxth	r2, r3
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	b21b      	sxth	r3, r3
 8006d42:	4313      	orrs	r3, r2
 8006d44:	b21b      	sxth	r3, r3
 8006d46:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	441a      	add	r2, r3
 8006d54:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	7b1b      	ldrb	r3, [r3, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 8149 	bne.w	8007008 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	785b      	ldrb	r3, [r3, #1]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 8084 	beq.w	8006e88 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	61bb      	str	r3, [r7, #24]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	4413      	add	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	00da      	lsls	r2, r3, #3
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	88db      	ldrh	r3, [r3, #6]
 8006da8:	085b      	lsrs	r3, r3, #1
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	827b      	strh	r3, [r7, #18]
 8006dc2:	8a7b      	ldrh	r3, [r7, #18]
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01b      	beq.n	8006e04 <USB_ActivateEndpoint+0x180>
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	823b      	strh	r3, [r7, #16]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	441a      	add	r2, r3
 8006dee:	8a3b      	ldrh	r3, [r7, #16]
 8006df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	78db      	ldrb	r3, [r3, #3]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d020      	beq.n	8006e4e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e22:	81bb      	strh	r3, [r7, #12]
 8006e24:	89bb      	ldrh	r3, [r7, #12]
 8006e26:	f083 0320 	eor.w	r3, r3, #32
 8006e2a:	81bb      	strh	r3, [r7, #12]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	441a      	add	r2, r3
 8006e36:	89bb      	ldrh	r3, [r7, #12]
 8006e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	8013      	strh	r3, [r2, #0]
 8006e4c:	e2a6      	b.n	800739c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e64:	81fb      	strh	r3, [r7, #14]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	441a      	add	r2, r3
 8006e70:	89fb      	ldrh	r3, [r7, #14]
 8006e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	8013      	strh	r3, [r2, #0]
 8006e86:	e289      	b.n	800739c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	4413      	add	r3, r2
 8006e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	00da      	lsls	r2, r3, #3
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	88db      	ldrh	r3, [r3, #6]
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	4413      	add	r3, r2
 8006ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	00da      	lsls	r2, r3, #3
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	4413      	add	r3, r2
 8006eda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ee6:	d918      	bls.n	8006f1a <USB_ActivateEndpoint+0x296>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <USB_ActivateEndpoint+0x27e>
 8006efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006efe:	3b01      	subs	r3, #1
 8006f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	029b      	lsls	r3, r3, #10
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	e029      	b.n	8006f6e <USB_ActivateEndpoint+0x2ea>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d112      	bne.n	8006f48 <USB_ActivateEndpoint+0x2c4>
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	801a      	strh	r2, [r3, #0]
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	e012      	b.n	8006f6e <USB_ActivateEndpoint+0x2ea>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <USB_ActivateEndpoint+0x2de>
 8006f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f5e:	3301      	adds	r3, #1
 8006f60:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	029b      	lsls	r3, r3, #10
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01b      	beq.n	8006fbe <USB_ActivateEndpoint+0x33a>
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9c:	843b      	strh	r3, [r7, #32]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	8c3b      	ldrh	r3, [r7, #32]
 8006faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd4:	83fb      	strh	r3, [r7, #30]
 8006fd6:	8bfb      	ldrh	r3, [r7, #30]
 8006fd8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fdc:	83fb      	strh	r3, [r7, #30]
 8006fde:	8bfb      	ldrh	r3, [r7, #30]
 8006fe0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fe4:	83fb      	strh	r3, [r7, #30]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	441a      	add	r2, r3
 8006ff0:	8bfb      	ldrh	r3, [r7, #30]
 8006ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007002:	b29b      	uxth	r3, r3
 8007004:	8013      	strh	r3, [r2, #0]
 8007006:	e1c9      	b.n	800739c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	78db      	ldrb	r3, [r3, #3]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d11e      	bne.n	800704e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007026:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	441a      	add	r2, r3
 8007034:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800703c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007040:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007048:	b29b      	uxth	r3, r3
 800704a:	8013      	strh	r3, [r2, #0]
 800704c:	e01d      	b.n	800708a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007064:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	441a      	add	r2, r3
 8007072:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800707a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800707e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007086:	b29b      	uxth	r3, r3
 8007088:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007094:	b29b      	uxth	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800709a:	4413      	add	r3, r2
 800709c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	00da      	lsls	r2, r3, #3
 80070a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	891b      	ldrh	r3, [r3, #8]
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	657b      	str	r3, [r7, #84]	; 0x54
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	461a      	mov	r2, r3
 80070cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ce:	4413      	add	r3, r2
 80070d0:	657b      	str	r3, [r7, #84]	; 0x54
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	00da      	lsls	r2, r3, #3
 80070d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070da:	4413      	add	r3, r2
 80070dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070e0:	653b      	str	r3, [r7, #80]	; 0x50
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	895b      	ldrh	r3, [r3, #10]
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070f0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	785b      	ldrb	r3, [r3, #1]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f040 8093 	bne.w	8007222 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800710c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01b      	beq.n	8007150 <USB_ActivateEndpoint+0x4cc>
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	441a      	add	r2, r3
 800713a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800713c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714c:	b29b      	uxth	r3, r3
 800714e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800715e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007164:	2b00      	cmp	r3, #0
 8007166:	d01b      	beq.n	80071a0 <USB_ActivateEndpoint+0x51c>
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	b29b      	uxth	r3, r3
 8007176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	441a      	add	r2, r3
 800718a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800718c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007198:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800719c:	b29b      	uxth	r3, r3
 800719e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80071b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80071ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071be:	873b      	strh	r3, [r7, #56]	; 0x38
 80071c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80071c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071c6:	873b      	strh	r3, [r7, #56]	; 0x38
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	441a      	add	r2, r3
 80071d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80071d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	441a      	add	r2, r3
 800720a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800720c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721c:	b29b      	uxth	r3, r3
 800721e:	8013      	strh	r3, [r2, #0]
 8007220:	e0bc      	b.n	800739c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007232:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d01d      	beq.n	800727a <USB_ActivateEndpoint+0x5f6>
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29b      	uxth	r3, r3
 800724c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007254:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	441a      	add	r2, r3
 8007262:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007276:	b29b      	uxth	r3, r3
 8007278:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800728a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800728e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d01d      	beq.n	80072d2 <USB_ActivateEndpoint+0x64e>
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	441a      	add	r2, r3
 80072ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80072be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	78db      	ldrb	r3, [r3, #3]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d024      	beq.n	8007324 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80072f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072f8:	f083 0320 	eor.w	r3, r3, #32
 80072fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	441a      	add	r2, r3
 800730a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800730e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800731a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800731e:	b29b      	uxth	r3, r3
 8007320:	8013      	strh	r3, [r2, #0]
 8007322:	e01d      	b.n	8007360 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800733a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	441a      	add	r2, r3
 8007348:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800734c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800735c:	b29b      	uxth	r3, r3
 800735e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29b      	uxth	r3, r3
 800736e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007376:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	441a      	add	r2, r3
 8007384:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800738c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007398:	b29b      	uxth	r3, r3
 800739a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800739c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3774      	adds	r7, #116	; 0x74
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b08d      	sub	sp, #52	; 0x34
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	7b1b      	ldrb	r3, [r3, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 808e 	bne.w	80074dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	785b      	ldrb	r3, [r3, #1]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d044      	beq.n	8007452 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	81bb      	strh	r3, [r7, #12]
 80073d6:	89bb      	ldrh	r3, [r7, #12]
 80073d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01b      	beq.n	8007418 <USB_DeactivateEndpoint+0x6c>
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f6:	817b      	strh	r3, [r7, #10]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	441a      	add	r2, r3
 8007402:	897b      	ldrh	r3, [r7, #10]
 8007404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007410:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007414:	b29b      	uxth	r3, r3
 8007416:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800742e:	813b      	strh	r3, [r7, #8]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	441a      	add	r2, r3
 800743a:	893b      	ldrh	r3, [r7, #8]
 800743c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744c:	b29b      	uxth	r3, r3
 800744e:	8013      	strh	r3, [r2, #0]
 8007450:	e192      	b.n	8007778 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	827b      	strh	r3, [r7, #18]
 8007460:	8a7b      	ldrh	r3, [r7, #18]
 8007462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01b      	beq.n	80074a2 <USB_DeactivateEndpoint+0xf6>
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	b29b      	uxth	r3, r3
 8007478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007480:	823b      	strh	r3, [r7, #16]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	441a      	add	r2, r3
 800748c:	8a3b      	ldrh	r3, [r7, #16]
 800748e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007496:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800749a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749e:	b29b      	uxth	r3, r3
 80074a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b8:	81fb      	strh	r3, [r7, #14]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	441a      	add	r2, r3
 80074c4:	89fb      	ldrh	r3, [r7, #14]
 80074c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	8013      	strh	r3, [r2, #0]
 80074da:	e14d      	b.n	8007778 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	785b      	ldrb	r3, [r3, #1]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f040 80a5 	bne.w	8007630 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	843b      	strh	r3, [r7, #32]
 80074f4:	8c3b      	ldrh	r3, [r7, #32]
 80074f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d01b      	beq.n	8007536 <USB_DeactivateEndpoint+0x18a>
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007514:	83fb      	strh	r3, [r7, #30]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	441a      	add	r2, r3
 8007520:	8bfb      	ldrh	r3, [r7, #30]
 8007522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800752e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007532:	b29b      	uxth	r3, r3
 8007534:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	83bb      	strh	r3, [r7, #28]
 8007544:	8bbb      	ldrh	r3, [r7, #28]
 8007546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d01b      	beq.n	8007586 <USB_DeactivateEndpoint+0x1da>
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007564:	837b      	strh	r3, [r7, #26]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	441a      	add	r2, r3
 8007570:	8b7b      	ldrh	r3, [r7, #26]
 8007572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800757e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007582:	b29b      	uxth	r3, r3
 8007584:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759c:	833b      	strh	r3, [r7, #24]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	441a      	add	r2, r3
 80075a8:	8b3b      	ldrh	r3, [r7, #24]
 80075aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d4:	82fb      	strh	r3, [r7, #22]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	441a      	add	r2, r3
 80075e0:	8afb      	ldrh	r3, [r7, #22]
 80075e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760c:	82bb      	strh	r3, [r7, #20]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	441a      	add	r2, r3
 8007618:	8abb      	ldrh	r3, [r7, #20]
 800761a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800761e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800762a:	b29b      	uxth	r3, r3
 800762c:	8013      	strh	r3, [r2, #0]
 800762e:	e0a3      	b.n	8007778 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800763e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01b      	beq.n	8007680 <USB_DeactivateEndpoint+0x2d4>
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	441a      	add	r2, r3
 800766a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800766c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800767c:	b29b      	uxth	r3, r3
 800767e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800768e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d01b      	beq.n	80076d0 <USB_DeactivateEndpoint+0x324>
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	853b      	strh	r3, [r7, #40]	; 0x28
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	441a      	add	r2, r3
 80076ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80076bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	441a      	add	r2, r3
 80076f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007704:	b29b      	uxth	r3, r3
 8007706:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800771a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	441a      	add	r2, r3
 800772a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800772c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800773c:	b29b      	uxth	r3, r3
 800773e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	b29b      	uxth	r3, r3
 800774e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007756:	847b      	strh	r3, [r7, #34]	; 0x22
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	441a      	add	r2, r3
 8007762:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007774:	b29b      	uxth	r3, r3
 8007776:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3734      	adds	r7, #52	; 0x34
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b0c2      	sub	sp, #264	; 0x108
 800778a:	af00      	add	r7, sp, #0
 800778c:	1d3b      	adds	r3, r7, #4
 800778e:	6018      	str	r0, [r3, #0]
 8007790:	463b      	mov	r3, r7
 8007792:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007794:	463b      	mov	r3, r7
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	785b      	ldrb	r3, [r3, #1]
 800779a:	2b01      	cmp	r3, #1
 800779c:	f040 8509 	bne.w	80081b2 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80077a0:	463b      	mov	r3, r7
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	463b      	mov	r3, r7
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d905      	bls.n	80077bc <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80077b0:	463b      	mov	r3, r7
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80077ba:	e004      	b.n	80077c6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80077bc:	463b      	mov	r3, r7
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80077c6:	463b      	mov	r3, r7
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	7b1b      	ldrb	r3, [r3, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d128      	bne.n	8007822 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80077d0:	463b      	mov	r3, r7
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6959      	ldr	r1, [r3, #20]
 80077d6:	463b      	mov	r3, r7
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	88da      	ldrh	r2, [r3, #6]
 80077dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	1d38      	adds	r0, r7, #4
 80077e4:	6800      	ldr	r0, [r0, #0]
 80077e6:	f001 f9da 	bl	8008b9e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077ea:	1d3b      	adds	r3, r7, #4
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	613b      	str	r3, [r7, #16]
 80077f0:	1d3b      	adds	r3, r7, #4
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	461a      	mov	r2, r3
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	4413      	add	r3, r2
 8007800:	613b      	str	r3, [r7, #16]
 8007802:	463b      	mov	r3, r7
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	00da      	lsls	r2, r3, #3
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	4413      	add	r3, r2
 800780e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007818:	b29a      	uxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	801a      	strh	r2, [r3, #0]
 800781e:	f000 bc9f 	b.w	8008160 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007822:	463b      	mov	r3, r7
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	78db      	ldrb	r3, [r3, #3]
 8007828:	2b02      	cmp	r3, #2
 800782a:	f040 8347 	bne.w	8007ebc <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800782e:	463b      	mov	r3, r7
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6a1a      	ldr	r2, [r3, #32]
 8007834:	463b      	mov	r3, r7
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	429a      	cmp	r2, r3
 800783c:	f240 82eb 	bls.w	8007e16 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007840:	1d3b      	adds	r3, r7, #4
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	463b      	mov	r3, r7
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800785e:	1d3b      	adds	r3, r7, #4
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	463b      	mov	r3, r7
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	441a      	add	r2, r3
 800786c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007878:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800787c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007880:	b29b      	uxth	r3, r3
 8007882:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007884:	463b      	mov	r3, r7
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	463b      	mov	r3, r7
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007896:	1d3b      	adds	r3, r7, #4
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	463b      	mov	r3, r7
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 8159 	beq.w	8007b64 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078b2:	1d3b      	adds	r3, r7, #4
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	633b      	str	r3, [r7, #48]	; 0x30
 80078b8:	463b      	mov	r3, r7
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	785b      	ldrb	r3, [r3, #1]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d164      	bne.n	800798c <USB_EPStartXfer+0x206>
 80078c2:	1d3b      	adds	r3, r7, #4
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078c8:	1d3b      	adds	r3, r7, #4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	461a      	mov	r2, r3
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	4413      	add	r3, r2
 80078d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80078da:	463b      	mov	r3, r7
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	00da      	lsls	r2, r3, #3
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	4413      	add	r3, r2
 80078e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24
 80078ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f0:	2b3e      	cmp	r3, #62	; 0x3e
 80078f2:	d91c      	bls.n	800792e <USB_EPStartXfer+0x1a8>
 80078f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f8:	095b      	lsrs	r3, r3, #5
 80078fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80078fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007902:	f003 031f 	and.w	r3, r3, #31
 8007906:	2b00      	cmp	r3, #0
 8007908:	d104      	bne.n	8007914 <USB_EPStartXfer+0x18e>
 800790a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800790e:	3b01      	subs	r3, #1
 8007910:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007914:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007918:	b29b      	uxth	r3, r3
 800791a:	029b      	lsls	r3, r3, #10
 800791c:	b29b      	uxth	r3, r3
 800791e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007926:	b29a      	uxth	r2, r3
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	801a      	strh	r2, [r3, #0]
 800792c:	e04a      	b.n	80079c4 <USB_EPStartXfer+0x23e>
 800792e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007932:	2b00      	cmp	r3, #0
 8007934:	d112      	bne.n	800795c <USB_EPStartXfer+0x1d6>
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007940:	b29a      	uxth	r2, r3
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	801a      	strh	r2, [r3, #0]
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	b29b      	uxth	r3, r3
 800794c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007954:	b29a      	uxth	r2, r3
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	801a      	strh	r2, [r3, #0]
 800795a:	e033      	b.n	80079c4 <USB_EPStartXfer+0x23e>
 800795c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007960:	085b      	lsrs	r3, r3, #1
 8007962:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d004      	beq.n	800797c <USB_EPStartXfer+0x1f6>
 8007972:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007976:	3301      	adds	r3, #1
 8007978:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800797c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007980:	b29b      	uxth	r3, r3
 8007982:	029b      	lsls	r3, r3, #10
 8007984:	b29a      	uxth	r2, r3
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	801a      	strh	r2, [r3, #0]
 800798a:	e01b      	b.n	80079c4 <USB_EPStartXfer+0x23e>
 800798c:	463b      	mov	r3, r7
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	785b      	ldrb	r3, [r3, #1]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d116      	bne.n	80079c4 <USB_EPStartXfer+0x23e>
 8007996:	1d3b      	adds	r3, r7, #4
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800799e:	b29b      	uxth	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	4413      	add	r3, r2
 80079a6:	633b      	str	r3, [r7, #48]	; 0x30
 80079a8:	463b      	mov	r3, r7
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	00da      	lsls	r2, r3, #3
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	4413      	add	r3, r2
 80079b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079be:	b29a      	uxth	r2, r3
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079c4:	463b      	mov	r3, r7
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	895b      	ldrh	r3, [r3, #10]
 80079ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079ce:	463b      	mov	r3, r7
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6959      	ldr	r1, [r3, #20]
 80079d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d8:	b29b      	uxth	r3, r3
 80079da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80079de:	1d38      	adds	r0, r7, #4
 80079e0:	6800      	ldr	r0, [r0, #0]
 80079e2:	f001 f8dc 	bl	8008b9e <USB_WritePMA>
            ep->xfer_buff += len;
 80079e6:	463b      	mov	r3, r7
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695a      	ldr	r2, [r3, #20]
 80079ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f0:	441a      	add	r2, r3
 80079f2:	463b      	mov	r3, r7
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80079f8:	463b      	mov	r3, r7
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6a1a      	ldr	r2, [r3, #32]
 80079fe:	463b      	mov	r3, r7
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d909      	bls.n	8007a1c <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8007a08:	463b      	mov	r3, r7
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6a1a      	ldr	r2, [r3, #32]
 8007a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a12:	1ad2      	subs	r2, r2, r3
 8007a14:	463b      	mov	r3, r7
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	621a      	str	r2, [r3, #32]
 8007a1a:	e008      	b.n	8007a2e <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007a26:	463b      	mov	r3, r7
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a2e:	463b      	mov	r3, r7
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	785b      	ldrb	r3, [r3, #1]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d164      	bne.n	8007b02 <USB_EPStartXfer+0x37c>
 8007a38:	1d3b      	adds	r3, r7, #4
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	61bb      	str	r3, [r7, #24]
 8007a3e:	1d3b      	adds	r3, r7, #4
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	61bb      	str	r3, [r7, #24]
 8007a50:	463b      	mov	r3, r7
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	00da      	lsls	r2, r3, #3
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a60:	617b      	str	r3, [r7, #20]
 8007a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a66:	2b3e      	cmp	r3, #62	; 0x3e
 8007a68:	d91c      	bls.n	8007aa4 <USB_EPStartXfer+0x31e>
 8007a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d104      	bne.n	8007a8a <USB_EPStartXfer+0x304>
 8007a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a84:	3b01      	subs	r3, #1
 8007a86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	029b      	lsls	r3, r3, #10
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	801a      	strh	r2, [r3, #0]
 8007aa2:	e04d      	b.n	8007b40 <USB_EPStartXfer+0x3ba>
 8007aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d112      	bne.n	8007ad2 <USB_EPStartXfer+0x34c>
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	801a      	strh	r2, [r3, #0]
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	801a      	strh	r2, [r3, #0]
 8007ad0:	e036      	b.n	8007b40 <USB_EPStartXfer+0x3ba>
 8007ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad6:	085b      	lsrs	r3, r3, #1
 8007ad8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d004      	beq.n	8007af2 <USB_EPStartXfer+0x36c>
 8007ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aec:	3301      	adds	r3, #1
 8007aee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	029b      	lsls	r3, r3, #10
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	801a      	strh	r2, [r3, #0]
 8007b00:	e01e      	b.n	8007b40 <USB_EPStartXfer+0x3ba>
 8007b02:	463b      	mov	r3, r7
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	785b      	ldrb	r3, [r3, #1]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d119      	bne.n	8007b40 <USB_EPStartXfer+0x3ba>
 8007b0c:	1d3b      	adds	r3, r7, #4
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	623b      	str	r3, [r7, #32]
 8007b12:	1d3b      	adds	r3, r7, #4
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	4413      	add	r3, r2
 8007b22:	623b      	str	r3, [r7, #32]
 8007b24:	463b      	mov	r3, r7
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	00da      	lsls	r2, r3, #3
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b34:	61fb      	str	r3, [r7, #28]
 8007b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b40:	463b      	mov	r3, r7
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	891b      	ldrh	r3, [r3, #8]
 8007b46:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b4a:	463b      	mov	r3, r7
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6959      	ldr	r1, [r3, #20]
 8007b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b5a:	1d38      	adds	r0, r7, #4
 8007b5c:	6800      	ldr	r0, [r0, #0]
 8007b5e:	f001 f81e 	bl	8008b9e <USB_WritePMA>
 8007b62:	e2fd      	b.n	8008160 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b64:	463b      	mov	r3, r7
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	785b      	ldrb	r3, [r3, #1]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d164      	bne.n	8007c38 <USB_EPStartXfer+0x4b2>
 8007b6e:	1d3b      	adds	r3, r7, #4
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b74:	1d3b      	adds	r3, r7, #4
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	461a      	mov	r2, r3
 8007b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b82:	4413      	add	r3, r2
 8007b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b86:	463b      	mov	r3, r7
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	00da      	lsls	r2, r3, #3
 8007b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b90:	4413      	add	r3, r2
 8007b92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b96:	647b      	str	r3, [r7, #68]	; 0x44
 8007b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8007b9e:	d91c      	bls.n	8007bda <USB_EPStartXfer+0x454>
 8007ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba4:	095b      	lsrs	r3, r3, #5
 8007ba6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bae:	f003 031f 	and.w	r3, r3, #31
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <USB_EPStartXfer+0x43a>
 8007bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	029b      	lsls	r3, r3, #10
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bd6:	801a      	strh	r2, [r3, #0]
 8007bd8:	e04d      	b.n	8007c76 <USB_EPStartXfer+0x4f0>
 8007bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d112      	bne.n	8007c08 <USB_EPStartXfer+0x482>
 8007be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c04:	801a      	strh	r2, [r3, #0]
 8007c06:	e036      	b.n	8007c76 <USB_EPStartXfer+0x4f0>
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c0c:	085b      	lsrs	r3, r3, #1
 8007c0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d004      	beq.n	8007c28 <USB_EPStartXfer+0x4a2>
 8007c1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c22:	3301      	adds	r3, #1
 8007c24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	029b      	lsls	r3, r3, #10
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c34:	801a      	strh	r2, [r3, #0]
 8007c36:	e01e      	b.n	8007c76 <USB_EPStartXfer+0x4f0>
 8007c38:	463b      	mov	r3, r7
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	785b      	ldrb	r3, [r3, #1]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d119      	bne.n	8007c76 <USB_EPStartXfer+0x4f0>
 8007c42:	1d3b      	adds	r3, r7, #4
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	653b      	str	r3, [r7, #80]	; 0x50
 8007c48:	1d3b      	adds	r3, r7, #4
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	461a      	mov	r2, r3
 8007c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c56:	4413      	add	r3, r2
 8007c58:	653b      	str	r3, [r7, #80]	; 0x50
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	00da      	lsls	r2, r3, #3
 8007c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c64:	4413      	add	r3, r2
 8007c66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c76:	463b      	mov	r3, r7
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	891b      	ldrh	r3, [r3, #8]
 8007c7c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c80:	463b      	mov	r3, r7
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6959      	ldr	r1, [r3, #20]
 8007c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c90:	1d38      	adds	r0, r7, #4
 8007c92:	6800      	ldr	r0, [r0, #0]
 8007c94:	f000 ff83 	bl	8008b9e <USB_WritePMA>
            ep->xfer_buff += len;
 8007c98:	463b      	mov	r3, r7
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	695a      	ldr	r2, [r3, #20]
 8007c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ca2:	441a      	add	r2, r3
 8007ca4:	463b      	mov	r3, r7
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007caa:	463b      	mov	r3, r7
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6a1a      	ldr	r2, [r3, #32]
 8007cb0:	463b      	mov	r3, r7
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d909      	bls.n	8007cce <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8007cba:	463b      	mov	r3, r7
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6a1a      	ldr	r2, [r3, #32]
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc4:	1ad2      	subs	r2, r2, r3
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	621a      	str	r2, [r3, #32]
 8007ccc:	e008      	b.n	8007ce0 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007cce:	463b      	mov	r3, r7
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007cd8:	463b      	mov	r3, r7
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ce0:	1d3b      	adds	r3, r7, #4
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	785b      	ldrb	r3, [r3, #1]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d164      	bne.n	8007dba <USB_EPStartXfer+0x634>
 8007cf0:	1d3b      	adds	r3, r7, #4
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cf6:	1d3b      	adds	r3, r7, #4
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	461a      	mov	r2, r3
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	4413      	add	r3, r2
 8007d06:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d08:	463b      	mov	r3, r7
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	00da      	lsls	r2, r3, #3
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	4413      	add	r3, r2
 8007d14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d18:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d20:	d91c      	bls.n	8007d5c <USB_EPStartXfer+0x5d6>
 8007d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d26:	095b      	lsrs	r3, r3, #5
 8007d28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d30:	f003 031f 	and.w	r3, r3, #31
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <USB_EPStartXfer+0x5bc>
 8007d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	029b      	lsls	r3, r3, #10
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d58:	801a      	strh	r2, [r3, #0]
 8007d5a:	e04a      	b.n	8007df2 <USB_EPStartXfer+0x66c>
 8007d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d112      	bne.n	8007d8a <USB_EPStartXfer+0x604>
 8007d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d72:	801a      	strh	r2, [r3, #0]
 8007d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d86:	801a      	strh	r2, [r3, #0]
 8007d88:	e033      	b.n	8007df2 <USB_EPStartXfer+0x66c>
 8007d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d8e:	085b      	lsrs	r3, r3, #1
 8007d90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d004      	beq.n	8007daa <USB_EPStartXfer+0x624>
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da4:	3301      	adds	r3, #1
 8007da6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	029b      	lsls	r3, r3, #10
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db6:	801a      	strh	r2, [r3, #0]
 8007db8:	e01b      	b.n	8007df2 <USB_EPStartXfer+0x66c>
 8007dba:	463b      	mov	r3, r7
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	785b      	ldrb	r3, [r3, #1]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d116      	bne.n	8007df2 <USB_EPStartXfer+0x66c>
 8007dc4:	1d3b      	adds	r3, r7, #4
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd2:	4413      	add	r3, r2
 8007dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8007dd6:	463b      	mov	r3, r7
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	00da      	lsls	r2, r3, #3
 8007dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de0:	4413      	add	r3, r2
 8007de2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007df2:	463b      	mov	r3, r7
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	895b      	ldrh	r3, [r3, #10]
 8007df8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dfc:	463b      	mov	r3, r7
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6959      	ldr	r1, [r3, #20]
 8007e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e0c:	1d38      	adds	r0, r7, #4
 8007e0e:	6800      	ldr	r0, [r0, #0]
 8007e10:	f000 fec5 	bl	8008b9e <USB_WritePMA>
 8007e14:	e1a4      	b.n	8008160 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e16:	463b      	mov	r3, r7
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007e20:	1d3b      	adds	r3, r7, #4
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	463b      	mov	r3, r7
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	881b      	ldrh	r3, [r3, #0]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007e3e:	1d3b      	adds	r3, r7, #4
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	463b      	mov	r3, r7
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	441a      	add	r2, r3
 8007e4c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e64:	1d3b      	adds	r3, r7, #4
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e6a:	1d3b      	adds	r3, r7, #4
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e78:	4413      	add	r3, r2
 8007e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	00da      	lsls	r2, r3, #3
 8007e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e86:	4413      	add	r3, r2
 8007e88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e98:	463b      	mov	r3, r7
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	891b      	ldrh	r3, [r3, #8]
 8007e9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6959      	ldr	r1, [r3, #20]
 8007ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007eb2:	1d38      	adds	r0, r7, #4
 8007eb4:	6800      	ldr	r0, [r0, #0]
 8007eb6:	f000 fe72 	bl	8008b9e <USB_WritePMA>
 8007eba:	e151      	b.n	8008160 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007ebc:	463b      	mov	r3, r7
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6a1a      	ldr	r2, [r3, #32]
 8007ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec6:	1ad2      	subs	r2, r2, r3
 8007ec8:	463b      	mov	r3, r7
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007ece:	1d3b      	adds	r3, r7, #4
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	463b      	mov	r3, r7
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 809b 	beq.w	8008020 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007eea:	1d3b      	adds	r3, r7, #4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	673b      	str	r3, [r7, #112]	; 0x70
 8007ef0:	463b      	mov	r3, r7
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	785b      	ldrb	r3, [r3, #1]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d164      	bne.n	8007fc4 <USB_EPStartXfer+0x83e>
 8007efa:	1d3b      	adds	r3, r7, #4
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f00:	1d3b      	adds	r3, r7, #4
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f0e:	4413      	add	r3, r2
 8007f10:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f12:	463b      	mov	r3, r7
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	00da      	lsls	r2, r3, #3
 8007f1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f22:	667b      	str	r3, [r7, #100]	; 0x64
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f28:	2b3e      	cmp	r3, #62	; 0x3e
 8007f2a:	d91c      	bls.n	8007f66 <USB_EPStartXfer+0x7e0>
 8007f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f30:	095b      	lsrs	r3, r3, #5
 8007f32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f3a:	f003 031f 	and.w	r3, r3, #31
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d104      	bne.n	8007f4c <USB_EPStartXfer+0x7c6>
 8007f42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007f46:	3b01      	subs	r3, #1
 8007f48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	029b      	lsls	r3, r3, #10
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f62:	801a      	strh	r2, [r3, #0]
 8007f64:	e04a      	b.n	8007ffc <USB_EPStartXfer+0x876>
 8007f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d112      	bne.n	8007f94 <USB_EPStartXfer+0x80e>
 8007f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f7c:	801a      	strh	r2, [r3, #0]
 8007f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f90:	801a      	strh	r2, [r3, #0]
 8007f92:	e033      	b.n	8007ffc <USB_EPStartXfer+0x876>
 8007f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f98:	085b      	lsrs	r3, r3, #1
 8007f9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d004      	beq.n	8007fb4 <USB_EPStartXfer+0x82e>
 8007faa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fae:	3301      	adds	r3, #1
 8007fb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007fb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	029b      	lsls	r3, r3, #10
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc0:	801a      	strh	r2, [r3, #0]
 8007fc2:	e01b      	b.n	8007ffc <USB_EPStartXfer+0x876>
 8007fc4:	463b      	mov	r3, r7
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d116      	bne.n	8007ffc <USB_EPStartXfer+0x876>
 8007fce:	1d3b      	adds	r3, r7, #4
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	461a      	mov	r2, r3
 8007fda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fdc:	4413      	add	r3, r2
 8007fde:	673b      	str	r3, [r7, #112]	; 0x70
 8007fe0:	463b      	mov	r3, r7
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	00da      	lsls	r2, r3, #3
 8007fe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fea:	4413      	add	r3, r2
 8007fec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ff0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ffa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ffc:	463b      	mov	r3, r7
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	895b      	ldrh	r3, [r3, #10]
 8008002:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008006:	463b      	mov	r3, r7
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6959      	ldr	r1, [r3, #20]
 800800c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008010:	b29b      	uxth	r3, r3
 8008012:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008016:	1d38      	adds	r0, r7, #4
 8008018:	6800      	ldr	r0, [r0, #0]
 800801a:	f000 fdc0 	bl	8008b9e <USB_WritePMA>
 800801e:	e09f      	b.n	8008160 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008020:	463b      	mov	r3, r7
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	785b      	ldrb	r3, [r3, #1]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d164      	bne.n	80080f4 <USB_EPStartXfer+0x96e>
 800802a:	1d3b      	adds	r3, r7, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008030:	1d3b      	adds	r3, r7, #4
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008038:	b29b      	uxth	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800803e:	4413      	add	r3, r2
 8008040:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008042:	463b      	mov	r3, r7
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	00da      	lsls	r2, r3, #3
 800804a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800804c:	4413      	add	r3, r2
 800804e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008052:	67bb      	str	r3, [r7, #120]	; 0x78
 8008054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008058:	2b3e      	cmp	r3, #62	; 0x3e
 800805a:	d91c      	bls.n	8008096 <USB_EPStartXfer+0x910>
 800805c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008060:	095b      	lsrs	r3, r3, #5
 8008062:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800806a:	f003 031f 	and.w	r3, r3, #31
 800806e:	2b00      	cmp	r3, #0
 8008070:	d104      	bne.n	800807c <USB_EPStartXfer+0x8f6>
 8008072:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008076:	3b01      	subs	r3, #1
 8008078:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800807c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008080:	b29b      	uxth	r3, r3
 8008082:	029b      	lsls	r3, r3, #10
 8008084:	b29b      	uxth	r3, r3
 8008086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800808e:	b29a      	uxth	r2, r3
 8008090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008092:	801a      	strh	r2, [r3, #0]
 8008094:	e053      	b.n	800813e <USB_EPStartXfer+0x9b8>
 8008096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809a:	2b00      	cmp	r3, #0
 800809c:	d112      	bne.n	80080c4 <USB_EPStartXfer+0x93e>
 800809e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ac:	801a      	strh	r2, [r3, #0]
 80080ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080bc:	b29a      	uxth	r2, r3
 80080be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080c0:	801a      	strh	r2, [r3, #0]
 80080c2:	e03c      	b.n	800813e <USB_EPStartXfer+0x9b8>
 80080c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c8:	085b      	lsrs	r3, r3, #1
 80080ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80080ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d004      	beq.n	80080e4 <USB_EPStartXfer+0x95e>
 80080da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80080de:	3301      	adds	r3, #1
 80080e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80080e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	029b      	lsls	r3, r3, #10
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080f0:	801a      	strh	r2, [r3, #0]
 80080f2:	e024      	b.n	800813e <USB_EPStartXfer+0x9b8>
 80080f4:	463b      	mov	r3, r7
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	785b      	ldrb	r3, [r3, #1]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d11f      	bne.n	800813e <USB_EPStartXfer+0x9b8>
 80080fe:	1d3b      	adds	r3, r7, #4
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008106:	1d3b      	adds	r3, r7, #4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800810e:	b29b      	uxth	r3, r3
 8008110:	461a      	mov	r2, r3
 8008112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008116:	4413      	add	r3, r2
 8008118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800811c:	463b      	mov	r3, r7
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	00da      	lsls	r2, r3, #3
 8008124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008128:	4413      	add	r3, r2
 800812a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800812e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008136:	b29a      	uxth	r2, r3
 8008138:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800813c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800813e:	463b      	mov	r3, r7
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	891b      	ldrh	r3, [r3, #8]
 8008144:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008148:	463b      	mov	r3, r7
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6959      	ldr	r1, [r3, #20]
 800814e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008152:	b29b      	uxth	r3, r3
 8008154:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008158:	1d38      	adds	r0, r7, #4
 800815a:	6800      	ldr	r0, [r0, #0]
 800815c:	f000 fd1f 	bl	8008b9e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008160:	1d3b      	adds	r3, r7, #4
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	463b      	mov	r3, r7
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	b29b      	uxth	r3, r3
 8008172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800817a:	817b      	strh	r3, [r7, #10]
 800817c:	897b      	ldrh	r3, [r7, #10]
 800817e:	f083 0310 	eor.w	r3, r3, #16
 8008182:	817b      	strh	r3, [r7, #10]
 8008184:	897b      	ldrh	r3, [r7, #10]
 8008186:	f083 0320 	eor.w	r3, r3, #32
 800818a:	817b      	strh	r3, [r7, #10]
 800818c:	1d3b      	adds	r3, r7, #4
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	463b      	mov	r3, r7
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	441a      	add	r2, r3
 800819a:	897b      	ldrh	r3, [r7, #10]
 800819c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	8013      	strh	r3, [r2, #0]
 80081b0:	e3b5      	b.n	800891e <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081b2:	463b      	mov	r3, r7
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	7b1b      	ldrb	r3, [r3, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f040 8090 	bne.w	80082de <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081be:	463b      	mov	r3, r7
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	463b      	mov	r3, r7
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d90e      	bls.n	80081ec <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 80081ce:	463b      	mov	r3, r7
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80081d8:	463b      	mov	r3, r7
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e2:	1ad2      	subs	r2, r2, r3
 80081e4:	463b      	mov	r3, r7
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	619a      	str	r2, [r3, #24]
 80081ea:	e008      	b.n	80081fe <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 80081ec:	463b      	mov	r3, r7
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80081f6:	463b      	mov	r3, r7
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2200      	movs	r2, #0
 80081fc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80081fe:	1d3b      	adds	r3, r7, #4
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008206:	1d3b      	adds	r3, r7, #4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800820e:	b29b      	uxth	r3, r3
 8008210:	461a      	mov	r2, r3
 8008212:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008216:	4413      	add	r3, r2
 8008218:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800821c:	463b      	mov	r3, r7
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	00da      	lsls	r2, r3, #3
 8008224:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008228:	4413      	add	r3, r2
 800822a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800822e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008236:	2b3e      	cmp	r3, #62	; 0x3e
 8008238:	d91d      	bls.n	8008276 <USB_EPStartXfer+0xaf0>
 800823a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008248:	f003 031f 	and.w	r3, r3, #31
 800824c:	2b00      	cmp	r3, #0
 800824e:	d104      	bne.n	800825a <USB_EPStartXfer+0xad4>
 8008250:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008254:	3b01      	subs	r3, #1
 8008256:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800825a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800825e:	b29b      	uxth	r3, r3
 8008260:	029b      	lsls	r3, r3, #10
 8008262:	b29b      	uxth	r3, r3
 8008264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800826c:	b29a      	uxth	r2, r3
 800826e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008272:	801a      	strh	r2, [r3, #0]
 8008274:	e325      	b.n	80088c2 <USB_EPStartXfer+0x113c>
 8008276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800827a:	2b00      	cmp	r3, #0
 800827c:	d116      	bne.n	80082ac <USB_EPStartXfer+0xb26>
 800827e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	b29b      	uxth	r3, r3
 8008286:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800828a:	b29a      	uxth	r2, r3
 800828c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008290:	801a      	strh	r2, [r3, #0]
 8008292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	b29b      	uxth	r3, r3
 800829a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800829e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082a8:	801a      	strh	r2, [r3, #0]
 80082aa:	e30a      	b.n	80088c2 <USB_EPStartXfer+0x113c>
 80082ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082b0:	085b      	lsrs	r3, r3, #1
 80082b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d004      	beq.n	80082cc <USB_EPStartXfer+0xb46>
 80082c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082c6:	3301      	adds	r3, #1
 80082c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	029b      	lsls	r3, r3, #10
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082da:	801a      	strh	r2, [r3, #0]
 80082dc:	e2f1      	b.n	80088c2 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80082de:	463b      	mov	r3, r7
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	78db      	ldrb	r3, [r3, #3]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	f040 818f 	bne.w	8008608 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80082ea:	463b      	mov	r3, r7
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	785b      	ldrb	r3, [r3, #1]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d175      	bne.n	80083e0 <USB_EPStartXfer+0xc5a>
 80082f4:	1d3b      	adds	r3, r7, #4
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082fc:	1d3b      	adds	r3, r7, #4
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008304:	b29b      	uxth	r3, r3
 8008306:	461a      	mov	r2, r3
 8008308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800830c:	4413      	add	r3, r2
 800830e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008312:	463b      	mov	r3, r7
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	00da      	lsls	r2, r3, #3
 800831a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800831e:	4413      	add	r3, r2
 8008320:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008328:	463b      	mov	r3, r7
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	2b3e      	cmp	r3, #62	; 0x3e
 8008330:	d91f      	bls.n	8008372 <USB_EPStartXfer+0xbec>
 8008332:	463b      	mov	r3, r7
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	095b      	lsrs	r3, r3, #5
 800833a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800833e:	463b      	mov	r3, r7
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	f003 031f 	and.w	r3, r3, #31
 8008348:	2b00      	cmp	r3, #0
 800834a:	d104      	bne.n	8008356 <USB_EPStartXfer+0xbd0>
 800834c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008350:	3b01      	subs	r3, #1
 8008352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800835a:	b29b      	uxth	r3, r3
 800835c:	029b      	lsls	r3, r3, #10
 800835e:	b29b      	uxth	r3, r3
 8008360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008368:	b29a      	uxth	r2, r3
 800836a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800836e:	801a      	strh	r2, [r3, #0]
 8008370:	e05c      	b.n	800842c <USB_EPStartXfer+0xca6>
 8008372:	463b      	mov	r3, r7
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d116      	bne.n	80083aa <USB_EPStartXfer+0xc24>
 800837c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	b29b      	uxth	r3, r3
 8008384:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008388:	b29a      	uxth	r2, r3
 800838a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800838e:	801a      	strh	r2, [r3, #0]
 8008390:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800839c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083a6:	801a      	strh	r2, [r3, #0]
 80083a8:	e040      	b.n	800842c <USB_EPStartXfer+0xca6>
 80083aa:	463b      	mov	r3, r7
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	085b      	lsrs	r3, r3, #1
 80083b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083b6:	463b      	mov	r3, r7
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d004      	beq.n	80083ce <USB_EPStartXfer+0xc48>
 80083c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c8:	3301      	adds	r3, #1
 80083ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	029b      	lsls	r3, r3, #10
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083dc:	801a      	strh	r2, [r3, #0]
 80083de:	e025      	b.n	800842c <USB_EPStartXfer+0xca6>
 80083e0:	463b      	mov	r3, r7
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	785b      	ldrb	r3, [r3, #1]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d120      	bne.n	800842c <USB_EPStartXfer+0xca6>
 80083ea:	1d3b      	adds	r3, r7, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083f2:	1d3b      	adds	r3, r7, #4
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	461a      	mov	r2, r3
 80083fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008402:	4413      	add	r3, r2
 8008404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008408:	463b      	mov	r3, r7
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	00da      	lsls	r2, r3, #3
 8008410:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008414:	4413      	add	r3, r2
 8008416:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800841a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800841e:	463b      	mov	r3, r7
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	b29a      	uxth	r2, r3
 8008426:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800842a:	801a      	strh	r2, [r3, #0]
 800842c:	1d3b      	adds	r3, r7, #4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008434:	463b      	mov	r3, r7
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d175      	bne.n	800852a <USB_EPStartXfer+0xda4>
 800843e:	1d3b      	adds	r3, r7, #4
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008446:	1d3b      	adds	r3, r7, #4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800844e:	b29b      	uxth	r3, r3
 8008450:	461a      	mov	r2, r3
 8008452:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008456:	4413      	add	r3, r2
 8008458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800845c:	463b      	mov	r3, r7
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	00da      	lsls	r2, r3, #3
 8008464:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008468:	4413      	add	r3, r2
 800846a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800846e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008472:	463b      	mov	r3, r7
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	2b3e      	cmp	r3, #62	; 0x3e
 800847a:	d91f      	bls.n	80084bc <USB_EPStartXfer+0xd36>
 800847c:	463b      	mov	r3, r7
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008488:	463b      	mov	r3, r7
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f003 031f 	and.w	r3, r3, #31
 8008492:	2b00      	cmp	r3, #0
 8008494:	d104      	bne.n	80084a0 <USB_EPStartXfer+0xd1a>
 8008496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800849a:	3b01      	subs	r3, #1
 800849c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	029b      	lsls	r3, r3, #10
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084b8:	801a      	strh	r2, [r3, #0]
 80084ba:	e058      	b.n	800856e <USB_EPStartXfer+0xde8>
 80084bc:	463b      	mov	r3, r7
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d116      	bne.n	80084f4 <USB_EPStartXfer+0xd6e>
 80084c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084f0:	801a      	strh	r2, [r3, #0]
 80084f2:	e03c      	b.n	800856e <USB_EPStartXfer+0xde8>
 80084f4:	463b      	mov	r3, r7
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	085b      	lsrs	r3, r3, #1
 80084fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008500:	463b      	mov	r3, r7
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	d004      	beq.n	8008518 <USB_EPStartXfer+0xd92>
 800850e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008512:	3301      	adds	r3, #1
 8008514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800851c:	b29b      	uxth	r3, r3
 800851e:	029b      	lsls	r3, r3, #10
 8008520:	b29a      	uxth	r2, r3
 8008522:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008526:	801a      	strh	r2, [r3, #0]
 8008528:	e021      	b.n	800856e <USB_EPStartXfer+0xde8>
 800852a:	463b      	mov	r3, r7
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	785b      	ldrb	r3, [r3, #1]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d11c      	bne.n	800856e <USB_EPStartXfer+0xde8>
 8008534:	1d3b      	adds	r3, r7, #4
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800853c:	b29b      	uxth	r3, r3
 800853e:	461a      	mov	r2, r3
 8008540:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008544:	4413      	add	r3, r2
 8008546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800854a:	463b      	mov	r3, r7
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	00da      	lsls	r2, r3, #3
 8008552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008556:	4413      	add	r3, r2
 8008558:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800855c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008560:	463b      	mov	r3, r7
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	b29a      	uxth	r2, r3
 8008568:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800856c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800856e:	463b      	mov	r3, r7
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 81a4 	beq.w	80088c2 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800857a:	1d3b      	adds	r3, r7, #4
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	463b      	mov	r3, r7
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800858e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d005      	beq.n	80085a6 <USB_EPStartXfer+0xe20>
 800859a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800859e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10d      	bne.n	80085c2 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80085aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f040 8187 	bne.w	80088c2 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80085b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f040 8180 	bne.w	80088c2 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80085c2:	1d3b      	adds	r3, r7, #4
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	463b      	mov	r3, r7
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085dc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80085e0:	1d3b      	adds	r3, r7, #4
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	463b      	mov	r3, r7
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	441a      	add	r2, r3
 80085ee:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80085f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008602:	b29b      	uxth	r3, r3
 8008604:	8013      	strh	r3, [r2, #0]
 8008606:	e15c      	b.n	80088c2 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008608:	463b      	mov	r3, r7
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	78db      	ldrb	r3, [r3, #3]
 800860e:	2b01      	cmp	r3, #1
 8008610:	f040 8155 	bne.w	80088be <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008614:	463b      	mov	r3, r7
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	699a      	ldr	r2, [r3, #24]
 800861a:	463b      	mov	r3, r7
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	429a      	cmp	r2, r3
 8008622:	d90e      	bls.n	8008642 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8008624:	463b      	mov	r3, r7
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800862e:	463b      	mov	r3, r7
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	699a      	ldr	r2, [r3, #24]
 8008634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008638:	1ad2      	subs	r2, r2, r3
 800863a:	463b      	mov	r3, r7
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	619a      	str	r2, [r3, #24]
 8008640:	e008      	b.n	8008654 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8008642:	463b      	mov	r3, r7
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800864c:	463b      	mov	r3, r7
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2200      	movs	r2, #0
 8008652:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008654:	463b      	mov	r3, r7
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	785b      	ldrb	r3, [r3, #1]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d16f      	bne.n	800873e <USB_EPStartXfer+0xfb8>
 800865e:	1d3b      	adds	r3, r7, #4
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008666:	1d3b      	adds	r3, r7, #4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800866e:	b29b      	uxth	r3, r3
 8008670:	461a      	mov	r2, r3
 8008672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008676:	4413      	add	r3, r2
 8008678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800867c:	463b      	mov	r3, r7
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	00da      	lsls	r2, r3, #3
 8008684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008688:	4413      	add	r3, r2
 800868a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800868e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008696:	2b3e      	cmp	r3, #62	; 0x3e
 8008698:	d91d      	bls.n	80086d6 <USB_EPStartXfer+0xf50>
 800869a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800869e:	095b      	lsrs	r3, r3, #5
 80086a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a8:	f003 031f 	and.w	r3, r3, #31
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d104      	bne.n	80086ba <USB_EPStartXfer+0xf34>
 80086b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086b4:	3b01      	subs	r3, #1
 80086b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086be:	b29b      	uxth	r3, r3
 80086c0:	029b      	lsls	r3, r3, #10
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	e058      	b.n	8008788 <USB_EPStartXfer+0x1002>
 80086d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d116      	bne.n	800870c <USB_EPStartXfer+0xf86>
 80086de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086f0:	801a      	strh	r2, [r3, #0]
 80086f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008702:	b29a      	uxth	r2, r3
 8008704:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008708:	801a      	strh	r2, [r3, #0]
 800870a:	e03d      	b.n	8008788 <USB_EPStartXfer+0x1002>
 800870c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008710:	085b      	lsrs	r3, r3, #1
 8008712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d004      	beq.n	800872c <USB_EPStartXfer+0xfa6>
 8008722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008726:	3301      	adds	r3, #1
 8008728:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800872c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008730:	b29b      	uxth	r3, r3
 8008732:	029b      	lsls	r3, r3, #10
 8008734:	b29a      	uxth	r2, r3
 8008736:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800873a:	801a      	strh	r2, [r3, #0]
 800873c:	e024      	b.n	8008788 <USB_EPStartXfer+0x1002>
 800873e:	463b      	mov	r3, r7
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	785b      	ldrb	r3, [r3, #1]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d11f      	bne.n	8008788 <USB_EPStartXfer+0x1002>
 8008748:	1d3b      	adds	r3, r7, #4
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008750:	1d3b      	adds	r3, r7, #4
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008758:	b29b      	uxth	r3, r3
 800875a:	461a      	mov	r2, r3
 800875c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008760:	4413      	add	r3, r2
 8008762:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008766:	463b      	mov	r3, r7
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	00da      	lsls	r2, r3, #3
 800876e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008772:	4413      	add	r3, r2
 8008774:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800877c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008780:	b29a      	uxth	r2, r3
 8008782:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008786:	801a      	strh	r2, [r3, #0]
 8008788:	1d3b      	adds	r3, r7, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008790:	463b      	mov	r3, r7
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d16f      	bne.n	800887a <USB_EPStartXfer+0x10f4>
 800879a:	1d3b      	adds	r3, r7, #4
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80087a2:	1d3b      	adds	r3, r7, #4
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	461a      	mov	r2, r3
 80087ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087b2:	4413      	add	r3, r2
 80087b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80087b8:	463b      	mov	r3, r7
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	00da      	lsls	r2, r3, #3
 80087c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087c4:	4413      	add	r3, r2
 80087c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087d2:	2b3e      	cmp	r3, #62	; 0x3e
 80087d4:	d91d      	bls.n	8008812 <USB_EPStartXfer+0x108c>
 80087d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087da:	095b      	lsrs	r3, r3, #5
 80087dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087e4:	f003 031f 	and.w	r3, r3, #31
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d104      	bne.n	80087f6 <USB_EPStartXfer+0x1070>
 80087ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087f0:	3b01      	subs	r3, #1
 80087f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	029b      	lsls	r3, r3, #10
 80087fe:	b29b      	uxth	r3, r3
 8008800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008808:	b29a      	uxth	r2, r3
 800880a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800880e:	801a      	strh	r2, [r3, #0]
 8008810:	e057      	b.n	80088c2 <USB_EPStartXfer+0x113c>
 8008812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008816:	2b00      	cmp	r3, #0
 8008818:	d116      	bne.n	8008848 <USB_EPStartXfer+0x10c2>
 800881a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	b29b      	uxth	r3, r3
 8008822:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008826:	b29a      	uxth	r2, r3
 8008828:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800882c:	801a      	strh	r2, [r3, #0]
 800882e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	b29b      	uxth	r3, r3
 8008836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800883a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800883e:	b29a      	uxth	r2, r3
 8008840:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008844:	801a      	strh	r2, [r3, #0]
 8008846:	e03c      	b.n	80088c2 <USB_EPStartXfer+0x113c>
 8008848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800884c:	085b      	lsrs	r3, r3, #1
 800884e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	d004      	beq.n	8008868 <USB_EPStartXfer+0x10e2>
 800885e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008862:	3301      	adds	r3, #1
 8008864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008868:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800886c:	b29b      	uxth	r3, r3
 800886e:	029b      	lsls	r3, r3, #10
 8008870:	b29a      	uxth	r2, r3
 8008872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008876:	801a      	strh	r2, [r3, #0]
 8008878:	e023      	b.n	80088c2 <USB_EPStartXfer+0x113c>
 800887a:	463b      	mov	r3, r7
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	785b      	ldrb	r3, [r3, #1]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d11e      	bne.n	80088c2 <USB_EPStartXfer+0x113c>
 8008884:	1d3b      	adds	r3, r7, #4
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800888c:	b29b      	uxth	r3, r3
 800888e:	461a      	mov	r2, r3
 8008890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008894:	4413      	add	r3, r2
 8008896:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800889a:	463b      	mov	r3, r7
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	00da      	lsls	r2, r3, #3
 80088a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80088a6:	4413      	add	r3, r2
 80088a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80088ba:	801a      	strh	r2, [r3, #0]
 80088bc:	e001      	b.n	80088c2 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e02e      	b.n	8008920 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088c2:	1d3b      	adds	r3, r7, #4
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	463b      	mov	r3, r7
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088dc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80088e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80088e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088e8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80088ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80088f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80088f8:	1d3b      	adds	r3, r7, #4
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	463b      	mov	r3, r7
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	441a      	add	r2, r3
 8008906:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800890a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800890e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800891a:	b29b      	uxth	r3, r3
 800891c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800892a:	b480      	push	{r7}
 800892c:	b085      	sub	sp, #20
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	785b      	ldrb	r3, [r3, #1]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d020      	beq.n	800897e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	b29b      	uxth	r3, r3
 800894a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800894e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008952:	81bb      	strh	r3, [r7, #12]
 8008954:	89bb      	ldrh	r3, [r7, #12]
 8008956:	f083 0310 	eor.w	r3, r3, #16
 800895a:	81bb      	strh	r3, [r7, #12]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	441a      	add	r2, r3
 8008966:	89bb      	ldrh	r3, [r7, #12]
 8008968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800896c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008978:	b29b      	uxth	r3, r3
 800897a:	8013      	strh	r3, [r2, #0]
 800897c:	e01f      	b.n	80089be <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	b29b      	uxth	r3, r3
 800898c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008994:	81fb      	strh	r3, [r7, #14]
 8008996:	89fb      	ldrh	r3, [r7, #14]
 8008998:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800899c:	81fb      	strh	r3, [r7, #14]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	441a      	add	r2, r3
 80089a8:	89fb      	ldrh	r3, [r7, #14]
 80089aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	7b1b      	ldrb	r3, [r3, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f040 809d 	bne.w	8008b1a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	785b      	ldrb	r3, [r3, #1]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d04c      	beq.n	8008a82 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	823b      	strh	r3, [r7, #16]
 80089f6:	8a3b      	ldrh	r3, [r7, #16]
 80089f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d01b      	beq.n	8008a38 <USB_EPClearStall+0x6c>
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	881b      	ldrh	r3, [r3, #0]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a16:	81fb      	strh	r3, [r7, #14]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	441a      	add	r2, r3
 8008a22:	89fb      	ldrh	r3, [r7, #14]
 8008a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	78db      	ldrb	r3, [r3, #3]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d06c      	beq.n	8008b1a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a56:	81bb      	strh	r3, [r7, #12]
 8008a58:	89bb      	ldrh	r3, [r7, #12]
 8008a5a:	f083 0320 	eor.w	r3, r3, #32
 8008a5e:	81bb      	strh	r3, [r7, #12]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	441a      	add	r2, r3
 8008a6a:	89bb      	ldrh	r3, [r7, #12]
 8008a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	8013      	strh	r3, [r2, #0]
 8008a80:	e04b      	b.n	8008b1a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	82fb      	strh	r3, [r7, #22]
 8008a90:	8afb      	ldrh	r3, [r7, #22]
 8008a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d01b      	beq.n	8008ad2 <USB_EPClearStall+0x106>
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab0:	82bb      	strh	r3, [r7, #20]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	441a      	add	r2, r3
 8008abc:	8abb      	ldrh	r3, [r7, #20]
 8008abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae8:	827b      	strh	r3, [r7, #18]
 8008aea:	8a7b      	ldrh	r3, [r7, #18]
 8008aec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008af0:	827b      	strh	r3, [r7, #18]
 8008af2:	8a7b      	ldrh	r3, [r7, #18]
 8008af4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008af8:	827b      	strh	r3, [r7, #18]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	441a      	add	r2, r3
 8008b04:	8a7b      	ldrh	r3, [r7, #18]
 8008b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	371c      	adds	r7, #28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d103      	bne.n	8008b42 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2280      	movs	r2, #128	; 0x80
 8008b3e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b90:	68fb      	ldr	r3, [r7, #12]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b08d      	sub	sp, #52	; 0x34
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	4611      	mov	r1, r2
 8008baa:	461a      	mov	r2, r3
 8008bac:	460b      	mov	r3, r1
 8008bae:	80fb      	strh	r3, [r7, #6]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008bb4:	88bb      	ldrh	r3, [r7, #4]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	085b      	lsrs	r3, r3, #1
 8008bba:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bc4:	88fa      	ldrh	r2, [r7, #6]
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bce:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008bd0:	6a3b      	ldr	r3, [r7, #32]
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd4:	e01b      	b.n	8008c0e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	3301      	adds	r3, #1
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	021b      	lsls	r3, r3, #8
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	461a      	mov	r2, r3
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	3302      	adds	r3, #2
 8008c00:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	3301      	adds	r3, #1
 8008c06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e0      	bne.n	8008bd6 <USB_WritePMA+0x38>
  }
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	3734      	adds	r7, #52	; 0x34
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b08b      	sub	sp, #44	; 0x2c
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	461a      	mov	r2, r3
 8008c30:	460b      	mov	r3, r1
 8008c32:	80fb      	strh	r3, [r7, #6]
 8008c34:	4613      	mov	r3, r2
 8008c36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c38:	88bb      	ldrh	r3, [r7, #4]
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c48:	88fa      	ldrh	r2, [r7, #6]
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c52:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
 8008c58:	e018      	b.n	8008c8c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	3302      	adds	r3, #2
 8008c66:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	3301      	adds	r3, #1
 8008c74:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	0a1b      	lsrs	r3, r3, #8
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	3301      	adds	r3, #1
 8008c84:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e3      	bne.n	8008c5a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008c92:	88bb      	ldrh	r3, [r7, #4]
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d007      	beq.n	8008cae <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	701a      	strb	r2, [r3, #0]
  }
}
 8008cae:	bf00      	nop
 8008cb0:	372c      	adds	r7, #44	; 0x2c
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008cc6:	2010      	movs	r0, #16
 8008cc8:	f001 fef0 	bl	800aaac <USBD_static_malloc>
 8008ccc:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d105      	bne.n	8008ce0 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008cdc:	2302      	movs	r3, #2
 8008cde:	e01b      	b.n	8008d18 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	7c1b      	ldrb	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d103      	bne.n	8008cf8 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2207      	movs	r2, #7
 8008cf4:	875a      	strh	r2, [r3, #58]	; 0x3a
 8008cf6:	e002      	b.n	8008cfe <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	220a      	movs	r2, #10
 8008cfc:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008cfe:	2304      	movs	r3, #4
 8008d00:	2203      	movs	r2, #3
 8008d02:	2181      	movs	r1, #129	; 0x81
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 fd8a 	bl	800a81e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008d2c:	2181      	movs	r1, #129	; 0x81
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 fd9b 	bl	800a86a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d009      	beq.n	8008d5e <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d50:	4618      	mov	r0, r3
 8008d52:	f001 feb9 	bl	800aac8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d78:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e0e8      	b.n	8008f5e <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d046      	beq.n	8008e26 <USBD_HID_Setup+0xbe>
 8008d98:	2b20      	cmp	r3, #32
 8008d9a:	f040 80d8 	bne.w	8008f4e <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	3b02      	subs	r3, #2
 8008da4:	2b09      	cmp	r3, #9
 8008da6:	d836      	bhi.n	8008e16 <USBD_HID_Setup+0xae>
 8008da8:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <USBD_HID_Setup+0x48>)
 8008daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dae:	bf00      	nop
 8008db0:	08008e07 	.word	0x08008e07
 8008db4:	08008de7 	.word	0x08008de7
 8008db8:	08008e17 	.word	0x08008e17
 8008dbc:	08008e17 	.word	0x08008e17
 8008dc0:	08008e17 	.word	0x08008e17
 8008dc4:	08008e17 	.word	0x08008e17
 8008dc8:	08008e17 	.word	0x08008e17
 8008dcc:	08008e17 	.word	0x08008e17
 8008dd0:	08008df5 	.word	0x08008df5
 8008dd4:	08008dd9 	.word	0x08008dd9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	885b      	ldrh	r3, [r3, #2]
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	461a      	mov	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	601a      	str	r2, [r3, #0]
          break;
 8008de4:	e01e      	b.n	8008e24 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2201      	movs	r2, #1
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 f9d8 	bl	800a1a2 <USBD_CtlSendData>
          break;
 8008df2:	e017      	b.n	8008e24 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	885b      	ldrh	r3, [r3, #2]
 8008df8:	0a1b      	lsrs	r3, r3, #8
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	461a      	mov	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	605a      	str	r2, [r3, #4]
          break;
 8008e04:	e00e      	b.n	8008e24 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	3304      	adds	r3, #4
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f001 f9c7 	bl	800a1a2 <USBD_CtlSendData>
          break;
 8008e14:	e006      	b.n	8008e24 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 f951 	bl	800a0c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	75fb      	strb	r3, [r7, #23]
          break;
 8008e22:	bf00      	nop
      }
      break;
 8008e24:	e09a      	b.n	8008f5c <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	785b      	ldrb	r3, [r3, #1]
 8008e2a:	2b0b      	cmp	r3, #11
 8008e2c:	f200 8086 	bhi.w	8008f3c <USBD_HID_Setup+0x1d4>
 8008e30:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <USBD_HID_Setup+0xd0>)
 8008e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e36:	bf00      	nop
 8008e38:	08008e69 	.word	0x08008e69
 8008e3c:	08008f4b 	.word	0x08008f4b
 8008e40:	08008f3d 	.word	0x08008f3d
 8008e44:	08008f3d 	.word	0x08008f3d
 8008e48:	08008f3d 	.word	0x08008f3d
 8008e4c:	08008f3d 	.word	0x08008f3d
 8008e50:	08008e93 	.word	0x08008e93
 8008e54:	08008f3d 	.word	0x08008f3d
 8008e58:	08008f3d 	.word	0x08008f3d
 8008e5c:	08008f3d 	.word	0x08008f3d
 8008e60:	08008eeb 	.word	0x08008eeb
 8008e64:	08008f15 	.word	0x08008f15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d107      	bne.n	8008e84 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e74:	f107 030a 	add.w	r3, r7, #10
 8008e78:	2202      	movs	r2, #2
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 f990 	bl	800a1a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e82:	e063      	b.n	8008f4c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f001 f91a 	bl	800a0c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	75fb      	strb	r3, [r7, #23]
          break;
 8008e90:	e05c      	b.n	8008f4c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	885b      	ldrh	r3, [r3, #2]
 8008e96:	0a1b      	lsrs	r3, r3, #8
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	2b22      	cmp	r3, #34	; 0x22
 8008e9c:	d108      	bne.n	8008eb0 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	88db      	ldrh	r3, [r3, #6]
 8008ea2:	2b4a      	cmp	r3, #74	; 0x4a
 8008ea4:	bf28      	it	cs
 8008ea6:	234a      	movcs	r3, #74	; 0x4a
 8008ea8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008eaa:	4b2f      	ldr	r3, [pc, #188]	; (8008f68 <USBD_HID_Setup+0x200>)
 8008eac:	613b      	str	r3, [r7, #16]
 8008eae:	e015      	b.n	8008edc <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	885b      	ldrh	r3, [r3, #2]
 8008eb4:	0a1b      	lsrs	r3, r3, #8
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	2b21      	cmp	r3, #33	; 0x21
 8008eba:	d108      	bne.n	8008ece <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8008ebc:	4b2b      	ldr	r3, [pc, #172]	; (8008f6c <USBD_HID_Setup+0x204>)
 8008ebe:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	88db      	ldrh	r3, [r3, #6]
 8008ec4:	2b09      	cmp	r3, #9
 8008ec6:	bf28      	it	cs
 8008ec8:	2309      	movcs	r3, #9
 8008eca:	82bb      	strh	r3, [r7, #20]
 8008ecc:	e006      	b.n	8008edc <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 f8f5 	bl	800a0c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	75fb      	strb	r3, [r7, #23]
            break;
 8008eda:	e037      	b.n	8008f4c <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008edc:	8abb      	ldrh	r3, [r7, #20]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	6939      	ldr	r1, [r7, #16]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f001 f95d 	bl	800a1a2 <USBD_CtlSendData>
          break;
 8008ee8:	e030      	b.n	8008f4c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d107      	bne.n	8008f06 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3308      	adds	r3, #8
 8008efa:	2201      	movs	r2, #1
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f001 f94f 	bl	800a1a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f04:	e022      	b.n	8008f4c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f001 f8d9 	bl	800a0c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	75fb      	strb	r3, [r7, #23]
          break;
 8008f12:	e01b      	b.n	8008f4c <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	2b03      	cmp	r3, #3
 8008f1e:	d106      	bne.n	8008f2e <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	885b      	ldrh	r3, [r3, #2]
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	461a      	mov	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f2c:	e00e      	b.n	8008f4c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 f8c5 	bl	800a0c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f36:	2303      	movs	r3, #3
 8008f38:	75fb      	strb	r3, [r7, #23]
          break;
 8008f3a:	e007      	b.n	8008f4c <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f001 f8be 	bl	800a0c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f44:	2303      	movs	r3, #3
 8008f46:	75fb      	strb	r3, [r7, #23]
          break;
 8008f48:	e000      	b.n	8008f4c <USBD_HID_Setup+0x1e4>
          break;
 8008f4a:	bf00      	nop
      }
      break;
 8008f4c:	e006      	b.n	8008f5c <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 f8b5 	bl	800a0c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f56:	2303      	movs	r3, #3
 8008f58:	75fb      	strb	r3, [r7, #23]
      break;
 8008f5a:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	200000e4 	.word	0x200000e4
 8008f6c:	200000cc 	.word	0x200000cc

08008f70 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f84:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e013      	b.n	8008fb8 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d10c      	bne.n	8008fb6 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	7b1b      	ldrb	r3, [r3, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d108      	bne.n	8008fb6 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008faa:	88fb      	ldrh	r3, [r7, #6]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	2181      	movs	r1, #129	; 0x81
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f001 fd03 	bl	800a9bc <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2222      	movs	r2, #34	; 0x22
 8008fcc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008fce:	4b03      	ldr	r3, [pc, #12]	; (8008fdc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	20000060 	.word	0x20000060

08008fe0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2222      	movs	r2, #34	; 0x22
 8008fec:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8008fee:	4b03      	ldr	r3, [pc, #12]	; (8008ffc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	20000084 	.word	0x20000084

08009000 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2222      	movs	r2, #34	; 0x22
 800900c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800900e:	4b03      	ldr	r3, [pc, #12]	; (800901c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009010:	4618      	mov	r0, r3
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	200000a8 	.word	0x200000a8

08009020 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009032:	2200      	movs	r2, #0
 8009034:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	220a      	movs	r2, #10
 8009050:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8009052:	4b03      	ldr	r3, [pc, #12]	; (8009060 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009054:	4618      	mov	r0, r3
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	200000d8 	.word	0x200000d8

08009064 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	4613      	mov	r3, r2
 8009070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009078:	2303      	movs	r3, #3
 800907a:	e01f      	b.n	80090bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	79fa      	ldrb	r2, [r7, #7]
 80090ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f001 fb49 	bl	800a748 <USBD_LL_Init>
 80090b6:	4603      	mov	r3, r0
 80090b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80090d8:	2303      	movs	r3, #3
 80090da:	e016      	b.n	800910a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00b      	beq.n	8009108 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	f107 020e 	add.w	r2, r7, #14
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
 8009100:	4602      	mov	r2, r0
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f001 fb64 	bl	800a7e8 <USBD_LL_Start>
 8009120:	4603      	mov	r3, r0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800912a:	b480      	push	{r7}
 800912c:	b083      	sub	sp, #12
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800914c:	2303      	movs	r3, #3
 800914e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009156:	2b00      	cmp	r3, #0
 8009158:	d009      	beq.n	800916e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	78fa      	ldrb	r2, [r7, #3]
 8009164:	4611      	mov	r1, r2
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	4798      	blx	r3
 800916a:	4603      	mov	r3, r0
 800916c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800916e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800918a:	2b00      	cmp	r3, #0
 800918c:	d007      	beq.n	800919e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	78fa      	ldrb	r2, [r7, #3]
 8009198:	4611      	mov	r1, r2
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	4798      	blx	r3
  }

  return USBD_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 ff46 	bl	800a04c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80091ce:	461a      	mov	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091dc:	f003 031f 	and.w	r3, r3, #31
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d01a      	beq.n	800921a <USBD_LL_SetupStage+0x72>
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d822      	bhi.n	800922e <USBD_LL_SetupStage+0x86>
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <USBD_LL_SetupStage+0x4a>
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d00a      	beq.n	8009206 <USBD_LL_SetupStage+0x5e>
 80091f0:	e01d      	b.n	800922e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f9ee 	bl	80095dc <USBD_StdDevReq>
 8009200:	4603      	mov	r3, r0
 8009202:	73fb      	strb	r3, [r7, #15]
      break;
 8009204:	e020      	b.n	8009248 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fa52 	bl	80096b8 <USBD_StdItfReq>
 8009214:	4603      	mov	r3, r0
 8009216:	73fb      	strb	r3, [r7, #15]
      break;
 8009218:	e016      	b.n	8009248 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa91 	bl	800974a <USBD_StdEPReq>
 8009228:	4603      	mov	r3, r0
 800922a:	73fb      	strb	r3, [r7, #15]
      break;
 800922c:	e00c      	b.n	8009248 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009234:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009238:	b2db      	uxtb	r3, r3
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 fb33 	bl	800a8a8 <USBD_LL_StallEP>
 8009242:	4603      	mov	r3, r0
 8009244:	73fb      	strb	r3, [r7, #15]
      break;
 8009246:	bf00      	nop
  }

  return ret;
 8009248:	7bfb      	ldrb	r3, [r7, #15]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b086      	sub	sp, #24
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	460b      	mov	r3, r1
 800925c:	607a      	str	r2, [r7, #4]
 800925e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009260:	7afb      	ldrb	r3, [r7, #11]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d138      	bne.n	80092d8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800926c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009274:	2b03      	cmp	r3, #3
 8009276:	d14a      	bne.n	800930e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	429a      	cmp	r2, r3
 8009282:	d913      	bls.n	80092ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	1ad2      	subs	r2, r2, r3
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	68da      	ldr	r2, [r3, #12]
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	4293      	cmp	r3, r2
 800929c:	bf28      	it	cs
 800929e:	4613      	movcs	r3, r2
 80092a0:	461a      	mov	r2, r3
 80092a2:	6879      	ldr	r1, [r7, #4]
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 ffa8 	bl	800a1fa <USBD_CtlContinueRx>
 80092aa:	e030      	b.n	800930e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	d10b      	bne.n	80092d0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d005      	beq.n	80092d0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f000 ffa3 	bl	800a21c <USBD_CtlSendStatus>
 80092d6:	e01a      	b.n	800930e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d114      	bne.n	800930e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00e      	beq.n	800930e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	7afa      	ldrb	r2, [r7, #11]
 80092fa:	4611      	mov	r1, r2
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	4798      	blx	r3
 8009300:	4603      	mov	r3, r0
 8009302:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009304:	7dfb      	ldrb	r3, [r7, #23]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	e000      	b.n	8009310 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	460b      	mov	r3, r1
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009326:	7afb      	ldrb	r3, [r7, #11]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d16b      	bne.n	8009404 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3314      	adds	r3, #20
 8009330:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009338:	2b02      	cmp	r3, #2
 800933a:	d156      	bne.n	80093ea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	429a      	cmp	r2, r3
 8009346:	d914      	bls.n	8009372 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	689a      	ldr	r2, [r3, #8]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	1ad2      	subs	r2, r2, r3
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	461a      	mov	r2, r3
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f000 ff3a 	bl	800a1d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009364:	2300      	movs	r3, #0
 8009366:	2200      	movs	r2, #0
 8009368:	2100      	movs	r1, #0
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f001 fb47 	bl	800a9fe <USBD_LL_PrepareReceive>
 8009370:	e03b      	b.n	80093ea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	429a      	cmp	r2, r3
 800937c:	d11c      	bne.n	80093b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009386:	429a      	cmp	r2, r3
 8009388:	d316      	bcc.n	80093b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009394:	429a      	cmp	r2, r3
 8009396:	d20f      	bcs.n	80093b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009398:	2200      	movs	r2, #0
 800939a:	2100      	movs	r1, #0
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 ff1b 	bl	800a1d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093aa:	2300      	movs	r3, #0
 80093ac:	2200      	movs	r2, #0
 80093ae:	2100      	movs	r1, #0
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f001 fb24 	bl	800a9fe <USBD_LL_PrepareReceive>
 80093b6:	e018      	b.n	80093ea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d10b      	bne.n	80093dc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d005      	beq.n	80093dc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80093dc:	2180      	movs	r1, #128	; 0x80
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f001 fa62 	bl	800a8a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 ff2c 	bl	800a242 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d122      	bne.n	800943a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f7ff fe98 	bl	800912a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009402:	e01a      	b.n	800943a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b03      	cmp	r3, #3
 800940e:	d114      	bne.n	800943a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00e      	beq.n	800943a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	7afa      	ldrb	r2, [r7, #11]
 8009426:	4611      	mov	r1, r2
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	4798      	blx	r3
 800942c:	4603      	mov	r3, r0
 800942e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	e000      	b.n	800943c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009474:	2303      	movs	r3, #3
 8009476:	e02f      	b.n	80094d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00f      	beq.n	80094a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d009      	beq.n	80094a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	6852      	ldr	r2, [r2, #4]
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	4611      	mov	r1, r2
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094a2:	2340      	movs	r3, #64	; 0x40
 80094a4:	2200      	movs	r2, #0
 80094a6:	2100      	movs	r1, #0
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 f9b8 	bl	800a81e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2240      	movs	r2, #64	; 0x40
 80094ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094be:	2340      	movs	r3, #64	; 0x40
 80094c0:	2200      	movs	r2, #0
 80094c2:	2180      	movs	r1, #128	; 0x80
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f001 f9aa 	bl	800a81e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2240      	movs	r2, #64	; 0x40
 80094d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	78fa      	ldrb	r2, [r7, #3]
 80094f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800950e:	b2da      	uxtb	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2204      	movs	r2, #4
 800951a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800953a:	b2db      	uxtb	r3, r3
 800953c:	2b04      	cmp	r3, #4
 800953e:	d106      	bne.n	800954e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009546:	b2da      	uxtb	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800956e:	2303      	movs	r3, #3
 8009570:	e012      	b.n	8009598 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b03      	cmp	r3, #3
 800957c:	d10b      	bne.n	8009596 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d005      	beq.n	8009596 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009590:	69db      	ldr	r3, [r3, #28]
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	3301      	adds	r3, #1
 80095b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80095be:	8a3b      	ldrh	r3, [r7, #16]
 80095c0:	021b      	lsls	r3, r3, #8
 80095c2:	b21a      	sxth	r2, r3
 80095c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	b21b      	sxth	r3, r3
 80095cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80095ce:	89fb      	ldrh	r3, [r7, #14]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	371c      	adds	r7, #28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095f2:	2b40      	cmp	r3, #64	; 0x40
 80095f4:	d005      	beq.n	8009602 <USBD_StdDevReq+0x26>
 80095f6:	2b40      	cmp	r3, #64	; 0x40
 80095f8:	d853      	bhi.n	80096a2 <USBD_StdDevReq+0xc6>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00b      	beq.n	8009616 <USBD_StdDevReq+0x3a>
 80095fe:	2b20      	cmp	r3, #32
 8009600:	d14f      	bne.n	80096a2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	4798      	blx	r3
 8009610:	4603      	mov	r3, r0
 8009612:	73fb      	strb	r3, [r7, #15]
      break;
 8009614:	e04a      	b.n	80096ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	785b      	ldrb	r3, [r3, #1]
 800961a:	2b09      	cmp	r3, #9
 800961c:	d83b      	bhi.n	8009696 <USBD_StdDevReq+0xba>
 800961e:	a201      	add	r2, pc, #4	; (adr r2, 8009624 <USBD_StdDevReq+0x48>)
 8009620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009624:	08009679 	.word	0x08009679
 8009628:	0800968d 	.word	0x0800968d
 800962c:	08009697 	.word	0x08009697
 8009630:	08009683 	.word	0x08009683
 8009634:	08009697 	.word	0x08009697
 8009638:	08009657 	.word	0x08009657
 800963c:	0800964d 	.word	0x0800964d
 8009640:	08009697 	.word	0x08009697
 8009644:	0800966f 	.word	0x0800966f
 8009648:	08009661 	.word	0x08009661
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f9de 	bl	8009a10 <USBD_GetDescriptor>
          break;
 8009654:	e024      	b.n	80096a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fb6d 	bl	8009d38 <USBD_SetAddress>
          break;
 800965e:	e01f      	b.n	80096a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fbac 	bl	8009dc0 <USBD_SetConfig>
 8009668:	4603      	mov	r3, r0
 800966a:	73fb      	strb	r3, [r7, #15]
          break;
 800966c:	e018      	b.n	80096a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fc4b 	bl	8009f0c <USBD_GetConfig>
          break;
 8009676:	e013      	b.n	80096a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fc7c 	bl	8009f78 <USBD_GetStatus>
          break;
 8009680:	e00e      	b.n	80096a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fcab 	bl	8009fe0 <USBD_SetFeature>
          break;
 800968a:	e009      	b.n	80096a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fcba 	bl	800a008 <USBD_ClrFeature>
          break;
 8009694:	e004      	b.n	80096a0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fd11 	bl	800a0c0 <USBD_CtlError>
          break;
 800969e:	bf00      	nop
      }
      break;
 80096a0:	e004      	b.n	80096ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fd0b 	bl	800a0c0 <USBD_CtlError>
      break;
 80096aa:	bf00      	nop
  }

  return ret;
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop

080096b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096ce:	2b40      	cmp	r3, #64	; 0x40
 80096d0:	d005      	beq.n	80096de <USBD_StdItfReq+0x26>
 80096d2:	2b40      	cmp	r3, #64	; 0x40
 80096d4:	d82f      	bhi.n	8009736 <USBD_StdItfReq+0x7e>
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <USBD_StdItfReq+0x26>
 80096da:	2b20      	cmp	r3, #32
 80096dc:	d12b      	bne.n	8009736 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	3b01      	subs	r3, #1
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d81d      	bhi.n	8009728 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	889b      	ldrh	r3, [r3, #4]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d813      	bhi.n	800971e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	4798      	blx	r3
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	88db      	ldrh	r3, [r3, #6]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d110      	bne.n	8009732 <USBD_StdItfReq+0x7a>
 8009710:	7bfb      	ldrb	r3, [r7, #15]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10d      	bne.n	8009732 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fd80 	bl	800a21c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800971c:	e009      	b.n	8009732 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fccd 	bl	800a0c0 <USBD_CtlError>
          break;
 8009726:	e004      	b.n	8009732 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fcc8 	bl	800a0c0 <USBD_CtlError>
          break;
 8009730:	e000      	b.n	8009734 <USBD_StdItfReq+0x7c>
          break;
 8009732:	bf00      	nop
      }
      break;
 8009734:	e004      	b.n	8009740 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fcc1 	bl	800a0c0 <USBD_CtlError>
      break;
 800973e:	bf00      	nop
  }

  return ret;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b084      	sub	sp, #16
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	889b      	ldrh	r3, [r3, #4]
 800975c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009766:	2b40      	cmp	r3, #64	; 0x40
 8009768:	d007      	beq.n	800977a <USBD_StdEPReq+0x30>
 800976a:	2b40      	cmp	r3, #64	; 0x40
 800976c:	f200 8145 	bhi.w	80099fa <USBD_StdEPReq+0x2b0>
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00c      	beq.n	800978e <USBD_StdEPReq+0x44>
 8009774:	2b20      	cmp	r3, #32
 8009776:	f040 8140 	bne.w	80099fa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	4798      	blx	r3
 8009788:	4603      	mov	r3, r0
 800978a:	73fb      	strb	r3, [r7, #15]
      break;
 800978c:	e13a      	b.n	8009a04 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	785b      	ldrb	r3, [r3, #1]
 8009792:	2b03      	cmp	r3, #3
 8009794:	d007      	beq.n	80097a6 <USBD_StdEPReq+0x5c>
 8009796:	2b03      	cmp	r3, #3
 8009798:	f300 8129 	bgt.w	80099ee <USBD_StdEPReq+0x2a4>
 800979c:	2b00      	cmp	r3, #0
 800979e:	d07f      	beq.n	80098a0 <USBD_StdEPReq+0x156>
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d03c      	beq.n	800981e <USBD_StdEPReq+0xd4>
 80097a4:	e123      	b.n	80099ee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d002      	beq.n	80097b8 <USBD_StdEPReq+0x6e>
 80097b2:	2b03      	cmp	r3, #3
 80097b4:	d016      	beq.n	80097e4 <USBD_StdEPReq+0x9a>
 80097b6:	e02c      	b.n	8009812 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00d      	beq.n	80097da <USBD_StdEPReq+0x90>
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	2b80      	cmp	r3, #128	; 0x80
 80097c2:	d00a      	beq.n	80097da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
 80097c6:	4619      	mov	r1, r3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f001 f86d 	bl	800a8a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80097ce:	2180      	movs	r1, #128	; 0x80
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 f869 	bl	800a8a8 <USBD_LL_StallEP>
 80097d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097d8:	e020      	b.n	800981c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fc6f 	bl	800a0c0 <USBD_CtlError>
              break;
 80097e2:	e01b      	b.n	800981c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	885b      	ldrh	r3, [r3, #2]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10e      	bne.n	800980a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00b      	beq.n	800980a <USBD_StdEPReq+0xc0>
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	2b80      	cmp	r3, #128	; 0x80
 80097f6:	d008      	beq.n	800980a <USBD_StdEPReq+0xc0>
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	88db      	ldrh	r3, [r3, #6]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d104      	bne.n	800980a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009800:	7bbb      	ldrb	r3, [r7, #14]
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f001 f84f 	bl	800a8a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fd06 	bl	800a21c <USBD_CtlSendStatus>

              break;
 8009810:	e004      	b.n	800981c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fc53 	bl	800a0c0 <USBD_CtlError>
              break;
 800981a:	bf00      	nop
          }
          break;
 800981c:	e0ec      	b.n	80099f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b02      	cmp	r3, #2
 8009828:	d002      	beq.n	8009830 <USBD_StdEPReq+0xe6>
 800982a:	2b03      	cmp	r3, #3
 800982c:	d016      	beq.n	800985c <USBD_StdEPReq+0x112>
 800982e:	e030      	b.n	8009892 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009830:	7bbb      	ldrb	r3, [r7, #14]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00d      	beq.n	8009852 <USBD_StdEPReq+0x108>
 8009836:	7bbb      	ldrb	r3, [r7, #14]
 8009838:	2b80      	cmp	r3, #128	; 0x80
 800983a:	d00a      	beq.n	8009852 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f001 f831 	bl	800a8a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009846:	2180      	movs	r1, #128	; 0x80
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f001 f82d 	bl	800a8a8 <USBD_LL_StallEP>
 800984e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009850:	e025      	b.n	800989e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fc33 	bl	800a0c0 <USBD_CtlError>
              break;
 800985a:	e020      	b.n	800989e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	885b      	ldrh	r3, [r3, #2]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d11b      	bne.n	800989c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009864:	7bbb      	ldrb	r3, [r7, #14]
 8009866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800986a:	2b00      	cmp	r3, #0
 800986c:	d004      	beq.n	8009878 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800986e:	7bbb      	ldrb	r3, [r7, #14]
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f001 f837 	bl	800a8e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fccf 	bl	800a21c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	4798      	blx	r3
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009890:	e004      	b.n	800989c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fc13 	bl	800a0c0 <USBD_CtlError>
              break;
 800989a:	e000      	b.n	800989e <USBD_StdEPReq+0x154>
              break;
 800989c:	bf00      	nop
          }
          break;
 800989e:	e0ab      	b.n	80099f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d002      	beq.n	80098b2 <USBD_StdEPReq+0x168>
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	d032      	beq.n	8009916 <USBD_StdEPReq+0x1cc>
 80098b0:	e097      	b.n	80099e2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d007      	beq.n	80098c8 <USBD_StdEPReq+0x17e>
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	2b80      	cmp	r3, #128	; 0x80
 80098bc:	d004      	beq.n	80098c8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fbfd 	bl	800a0c0 <USBD_CtlError>
                break;
 80098c6:	e091      	b.n	80099ec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	da0b      	bge.n	80098e8 <USBD_StdEPReq+0x19e>
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098d6:	4613      	mov	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	3310      	adds	r3, #16
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	4413      	add	r3, r2
 80098e4:	3304      	adds	r3, #4
 80098e6:	e00b      	b.n	8009900 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098e8:	7bbb      	ldrb	r3, [r7, #14]
 80098ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098ee:	4613      	mov	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	4413      	add	r3, r2
 80098fe:	3304      	adds	r3, #4
 8009900:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2200      	movs	r2, #0
 8009906:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2202      	movs	r2, #2
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fc47 	bl	800a1a2 <USBD_CtlSendData>
              break;
 8009914:	e06a      	b.n	80099ec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009916:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800991a:	2b00      	cmp	r3, #0
 800991c:	da11      	bge.n	8009942 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	f003 020f 	and.w	r2, r3, #15
 8009924:	6879      	ldr	r1, [r7, #4]
 8009926:	4613      	mov	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	440b      	add	r3, r1
 8009930:	3324      	adds	r3, #36	; 0x24
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d117      	bne.n	8009968 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009938:	6839      	ldr	r1, [r7, #0]
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fbc0 	bl	800a0c0 <USBD_CtlError>
                  break;
 8009940:	e054      	b.n	80099ec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009942:	7bbb      	ldrb	r3, [r7, #14]
 8009944:	f003 020f 	and.w	r2, r3, #15
 8009948:	6879      	ldr	r1, [r7, #4]
 800994a:	4613      	mov	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	440b      	add	r3, r1
 8009954:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d104      	bne.n	8009968 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fbad 	bl	800a0c0 <USBD_CtlError>
                  break;
 8009966:	e041      	b.n	80099ec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800996c:	2b00      	cmp	r3, #0
 800996e:	da0b      	bge.n	8009988 <USBD_StdEPReq+0x23e>
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	3310      	adds	r3, #16
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	4413      	add	r3, r2
 8009984:	3304      	adds	r3, #4
 8009986:	e00b      	b.n	80099a0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009988:	7bbb      	ldrb	r3, [r7, #14]
 800998a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800998e:	4613      	mov	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	4413      	add	r3, r2
 800999e:	3304      	adds	r3, #4
 80099a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <USBD_StdEPReq+0x264>
 80099a8:	7bbb      	ldrb	r3, [r7, #14]
 80099aa:	2b80      	cmp	r3, #128	; 0x80
 80099ac:	d103      	bne.n	80099b6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2200      	movs	r2, #0
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	e00e      	b.n	80099d4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80099b6:	7bbb      	ldrb	r3, [r7, #14]
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 ffb2 	bl	800a924 <USBD_LL_IsStallEP>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2201      	movs	r2, #1
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	e002      	b.n	80099d4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2200      	movs	r2, #0
 80099d2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2202      	movs	r2, #2
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fbe1 	bl	800a1a2 <USBD_CtlSendData>
              break;
 80099e0:	e004      	b.n	80099ec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fb6b 	bl	800a0c0 <USBD_CtlError>
              break;
 80099ea:	bf00      	nop
          }
          break;
 80099ec:	e004      	b.n	80099f8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fb65 	bl	800a0c0 <USBD_CtlError>
          break;
 80099f6:	bf00      	nop
      }
      break;
 80099f8:	e004      	b.n	8009a04 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fb5f 	bl	800a0c0 <USBD_CtlError>
      break;
 8009a02:	bf00      	nop
  }

  return ret;
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
	...

08009a10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a22:	2300      	movs	r3, #0
 8009a24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	885b      	ldrh	r3, [r3, #2]
 8009a2a:	0a1b      	lsrs	r3, r3, #8
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	2b0e      	cmp	r3, #14
 8009a32:	f200 8152 	bhi.w	8009cda <USBD_GetDescriptor+0x2ca>
 8009a36:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <USBD_GetDescriptor+0x2c>)
 8009a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3c:	08009aad 	.word	0x08009aad
 8009a40:	08009ac5 	.word	0x08009ac5
 8009a44:	08009b05 	.word	0x08009b05
 8009a48:	08009cdb 	.word	0x08009cdb
 8009a4c:	08009cdb 	.word	0x08009cdb
 8009a50:	08009c7b 	.word	0x08009c7b
 8009a54:	08009ca7 	.word	0x08009ca7
 8009a58:	08009cdb 	.word	0x08009cdb
 8009a5c:	08009cdb 	.word	0x08009cdb
 8009a60:	08009cdb 	.word	0x08009cdb
 8009a64:	08009cdb 	.word	0x08009cdb
 8009a68:	08009cdb 	.word	0x08009cdb
 8009a6c:	08009cdb 	.word	0x08009cdb
 8009a70:	08009cdb 	.word	0x08009cdb
 8009a74:	08009a79 	.word	0x08009a79
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7e:	69db      	ldr	r3, [r3, #28]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00b      	beq.n	8009a9c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8a:	69db      	ldr	r3, [r3, #28]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	7c12      	ldrb	r2, [r2, #16]
 8009a90:	f107 0108 	add.w	r1, r7, #8
 8009a94:	4610      	mov	r0, r2
 8009a96:	4798      	blx	r3
 8009a98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a9a:	e126      	b.n	8009cea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fb0e 	bl	800a0c0 <USBD_CtlError>
        err++;
 8009aa4:	7afb      	ldrb	r3, [r7, #11]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	72fb      	strb	r3, [r7, #11]
      break;
 8009aaa:	e11e      	b.n	8009cea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	7c12      	ldrb	r2, [r2, #16]
 8009ab8:	f107 0108 	add.w	r1, r7, #8
 8009abc:	4610      	mov	r0, r2
 8009abe:	4798      	blx	r3
 8009ac0:	60f8      	str	r0, [r7, #12]
      break;
 8009ac2:	e112      	b.n	8009cea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	7c1b      	ldrb	r3, [r3, #16]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10d      	bne.n	8009ae8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad4:	f107 0208 	add.w	r2, r7, #8
 8009ad8:	4610      	mov	r0, r2
 8009ada:	4798      	blx	r3
 8009adc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ae6:	e100      	b.n	8009cea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af0:	f107 0208 	add.w	r2, r7, #8
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
 8009af8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3301      	adds	r3, #1
 8009afe:	2202      	movs	r2, #2
 8009b00:	701a      	strb	r2, [r3, #0]
      break;
 8009b02:	e0f2      	b.n	8009cea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	885b      	ldrh	r3, [r3, #2]
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b05      	cmp	r3, #5
 8009b0c:	f200 80ac 	bhi.w	8009c68 <USBD_GetDescriptor+0x258>
 8009b10:	a201      	add	r2, pc, #4	; (adr r2, 8009b18 <USBD_GetDescriptor+0x108>)
 8009b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b16:	bf00      	nop
 8009b18:	08009b31 	.word	0x08009b31
 8009b1c:	08009b65 	.word	0x08009b65
 8009b20:	08009b99 	.word	0x08009b99
 8009b24:	08009bcd 	.word	0x08009bcd
 8009b28:	08009c01 	.word	0x08009c01
 8009b2c:	08009c35 	.word	0x08009c35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00b      	beq.n	8009b54 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	7c12      	ldrb	r2, [r2, #16]
 8009b48:	f107 0108 	add.w	r1, r7, #8
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4798      	blx	r3
 8009b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b52:	e091      	b.n	8009c78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fab2 	bl	800a0c0 <USBD_CtlError>
            err++;
 8009b5c:	7afb      	ldrb	r3, [r7, #11]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	72fb      	strb	r3, [r7, #11]
          break;
 8009b62:	e089      	b.n	8009c78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	7c12      	ldrb	r2, [r2, #16]
 8009b7c:	f107 0108 	add.w	r1, r7, #8
 8009b80:	4610      	mov	r0, r2
 8009b82:	4798      	blx	r3
 8009b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b86:	e077      	b.n	8009c78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fa98 	bl	800a0c0 <USBD_CtlError>
            err++;
 8009b90:	7afb      	ldrb	r3, [r7, #11]
 8009b92:	3301      	adds	r3, #1
 8009b94:	72fb      	strb	r3, [r7, #11]
          break;
 8009b96:	e06f      	b.n	8009c78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00b      	beq.n	8009bbc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	7c12      	ldrb	r2, [r2, #16]
 8009bb0:	f107 0108 	add.w	r1, r7, #8
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	4798      	blx	r3
 8009bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bba:	e05d      	b.n	8009c78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fa7e 	bl	800a0c0 <USBD_CtlError>
            err++;
 8009bc4:	7afb      	ldrb	r3, [r7, #11]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bca:	e055      	b.n	8009c78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00b      	beq.n	8009bf0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	7c12      	ldrb	r2, [r2, #16]
 8009be4:	f107 0108 	add.w	r1, r7, #8
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bee:	e043      	b.n	8009c78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fa64 	bl	800a0c0 <USBD_CtlError>
            err++;
 8009bf8:	7afb      	ldrb	r3, [r7, #11]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bfe:	e03b      	b.n	8009c78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00b      	beq.n	8009c24 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	7c12      	ldrb	r2, [r2, #16]
 8009c18:	f107 0108 	add.w	r1, r7, #8
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4798      	blx	r3
 8009c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c22:	e029      	b.n	8009c78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa4a 	bl	800a0c0 <USBD_CtlError>
            err++;
 8009c2c:	7afb      	ldrb	r3, [r7, #11]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	72fb      	strb	r3, [r7, #11]
          break;
 8009c32:	e021      	b.n	8009c78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00b      	beq.n	8009c58 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	7c12      	ldrb	r2, [r2, #16]
 8009c4c:	f107 0108 	add.w	r1, r7, #8
 8009c50:	4610      	mov	r0, r2
 8009c52:	4798      	blx	r3
 8009c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c56:	e00f      	b.n	8009c78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fa30 	bl	800a0c0 <USBD_CtlError>
            err++;
 8009c60:	7afb      	ldrb	r3, [r7, #11]
 8009c62:	3301      	adds	r3, #1
 8009c64:	72fb      	strb	r3, [r7, #11]
          break;
 8009c66:	e007      	b.n	8009c78 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fa28 	bl	800a0c0 <USBD_CtlError>
          err++;
 8009c70:	7afb      	ldrb	r3, [r7, #11]
 8009c72:	3301      	adds	r3, #1
 8009c74:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009c76:	bf00      	nop
      }
      break;
 8009c78:	e037      	b.n	8009cea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	7c1b      	ldrb	r3, [r3, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d109      	bne.n	8009c96 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8a:	f107 0208 	add.w	r2, r7, #8
 8009c8e:	4610      	mov	r0, r2
 8009c90:	4798      	blx	r3
 8009c92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c94:	e029      	b.n	8009cea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fa11 	bl	800a0c0 <USBD_CtlError>
        err++;
 8009c9e:	7afb      	ldrb	r3, [r7, #11]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ca4:	e021      	b.n	8009cea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	7c1b      	ldrb	r3, [r3, #16]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10d      	bne.n	8009cca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb6:	f107 0208 	add.w	r2, r7, #8
 8009cba:	4610      	mov	r0, r2
 8009cbc:	4798      	blx	r3
 8009cbe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	2207      	movs	r2, #7
 8009cc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cc8:	e00f      	b.n	8009cea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f9f7 	bl	800a0c0 <USBD_CtlError>
        err++;
 8009cd2:	7afb      	ldrb	r3, [r7, #11]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	72fb      	strb	r3, [r7, #11]
      break;
 8009cd8:	e007      	b.n	8009cea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f9ef 	bl	800a0c0 <USBD_CtlError>
      err++;
 8009ce2:	7afb      	ldrb	r3, [r7, #11]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ce8:	bf00      	nop
  }

  if (err != 0U)
 8009cea:	7afb      	ldrb	r3, [r7, #11]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d11e      	bne.n	8009d2e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	88db      	ldrh	r3, [r3, #6]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d016      	beq.n	8009d26 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009cf8:	893b      	ldrh	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00e      	beq.n	8009d1c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	88da      	ldrh	r2, [r3, #6]
 8009d02:	893b      	ldrh	r3, [r7, #8]
 8009d04:	4293      	cmp	r3, r2
 8009d06:	bf28      	it	cs
 8009d08:	4613      	movcs	r3, r2
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d0e:	893b      	ldrh	r3, [r7, #8]
 8009d10:	461a      	mov	r2, r3
 8009d12:	68f9      	ldr	r1, [r7, #12]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fa44 	bl	800a1a2 <USBD_CtlSendData>
 8009d1a:	e009      	b.n	8009d30 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f9ce 	bl	800a0c0 <USBD_CtlError>
 8009d24:	e004      	b.n	8009d30 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fa78 	bl	800a21c <USBD_CtlSendStatus>
 8009d2c:	e000      	b.n	8009d30 <USBD_GetDescriptor+0x320>
    return;
 8009d2e:	bf00      	nop
  }
}
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop

08009d38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	889b      	ldrh	r3, [r3, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d131      	bne.n	8009dae <USBD_SetAddress+0x76>
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	88db      	ldrh	r3, [r3, #6]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d12d      	bne.n	8009dae <USBD_SetAddress+0x76>
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	885b      	ldrh	r3, [r3, #2]
 8009d56:	2b7f      	cmp	r3, #127	; 0x7f
 8009d58:	d829      	bhi.n	8009dae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	885b      	ldrh	r3, [r3, #2]
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d104      	bne.n	8009d7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f9a3 	bl	800a0c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d7a:	e01d      	b.n	8009db8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	7bfa      	ldrb	r2, [r7, #15]
 8009d80:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fdf8 	bl	800a97e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fa44 	bl	800a21c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d004      	beq.n	8009da4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da2:	e009      	b.n	8009db8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dac:	e004      	b.n	8009db8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f985 	bl	800a0c0 <USBD_CtlError>
  }
}
 8009db6:	bf00      	nop
 8009db8:	bf00      	nop
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	885b      	ldrh	r3, [r3, #2]
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	4b4c      	ldr	r3, [pc, #304]	; (8009f08 <USBD_SetConfig+0x148>)
 8009dd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009dd8:	4b4b      	ldr	r3, [pc, #300]	; (8009f08 <USBD_SetConfig+0x148>)
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d905      	bls.n	8009dec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009de0:	6839      	ldr	r1, [r7, #0]
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f96c 	bl	800a0c0 <USBD_CtlError>
    return USBD_FAIL;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e088      	b.n	8009efe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d002      	beq.n	8009dfe <USBD_SetConfig+0x3e>
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	d025      	beq.n	8009e48 <USBD_SetConfig+0x88>
 8009dfc:	e071      	b.n	8009ee2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009dfe:	4b42      	ldr	r3, [pc, #264]	; (8009f08 <USBD_SetConfig+0x148>)
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01c      	beq.n	8009e40 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009e06:	4b40      	ldr	r3, [pc, #256]	; (8009f08 <USBD_SetConfig+0x148>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e10:	4b3d      	ldr	r3, [pc, #244]	; (8009f08 <USBD_SetConfig+0x148>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	4619      	mov	r1, r3
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7ff f992 	bl	8009140 <USBD_SetClassConfig>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d004      	beq.n	8009e30 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f949 	bl	800a0c0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e2e:	e065      	b.n	8009efc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f9f3 	bl	800a21c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2203      	movs	r2, #3
 8009e3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e3e:	e05d      	b.n	8009efc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f9eb 	bl	800a21c <USBD_CtlSendStatus>
      break;
 8009e46:	e059      	b.n	8009efc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e48:	4b2f      	ldr	r3, [pc, #188]	; (8009f08 <USBD_SetConfig+0x148>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d112      	bne.n	8009e76 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2202      	movs	r2, #2
 8009e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009e58:	4b2b      	ldr	r3, [pc, #172]	; (8009f08 <USBD_SetConfig+0x148>)
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e62:	4b29      	ldr	r3, [pc, #164]	; (8009f08 <USBD_SetConfig+0x148>)
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7ff f985 	bl	8009178 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f9d4 	bl	800a21c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e74:	e042      	b.n	8009efc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009e76:	4b24      	ldr	r3, [pc, #144]	; (8009f08 <USBD_SetConfig+0x148>)
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d02a      	beq.n	8009eda <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7ff f973 	bl	8009178 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e92:	4b1d      	ldr	r3, [pc, #116]	; (8009f08 <USBD_SetConfig+0x148>)
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	461a      	mov	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e9c:	4b1a      	ldr	r3, [pc, #104]	; (8009f08 <USBD_SetConfig+0x148>)
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7ff f94c 	bl	8009140 <USBD_SetClassConfig>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009eac:	7bfb      	ldrb	r3, [r7, #15]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00f      	beq.n	8009ed2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f903 	bl	800a0c0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff f958 	bl	8009178 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2202      	movs	r2, #2
 8009ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ed0:	e014      	b.n	8009efc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f9a2 	bl	800a21c <USBD_CtlSendStatus>
      break;
 8009ed8:	e010      	b.n	8009efc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f99e 	bl	800a21c <USBD_CtlSendStatus>
      break;
 8009ee0:	e00c      	b.n	8009efc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f8eb 	bl	800a0c0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009eea:	4b07      	ldr	r3, [pc, #28]	; (8009f08 <USBD_SetConfig+0x148>)
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7ff f941 	bl	8009178 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8009efa:	bf00      	nop
  }

  return ret;
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	20000220 	.word	0x20000220

08009f0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	88db      	ldrh	r3, [r3, #6]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d004      	beq.n	8009f28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f8cd 	bl	800a0c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f26:	e023      	b.n	8009f70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	dc02      	bgt.n	8009f3a <USBD_GetConfig+0x2e>
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	dc03      	bgt.n	8009f40 <USBD_GetConfig+0x34>
 8009f38:	e015      	b.n	8009f66 <USBD_GetConfig+0x5a>
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d00b      	beq.n	8009f56 <USBD_GetConfig+0x4a>
 8009f3e:	e012      	b.n	8009f66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3308      	adds	r3, #8
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f927 	bl	800a1a2 <USBD_CtlSendData>
        break;
 8009f54:	e00c      	b.n	8009f70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	3304      	adds	r3, #4
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f91f 	bl	800a1a2 <USBD_CtlSendData>
        break;
 8009f64:	e004      	b.n	8009f70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f8a9 	bl	800a0c0 <USBD_CtlError>
        break;
 8009f6e:	bf00      	nop
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d81e      	bhi.n	8009fce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	88db      	ldrh	r3, [r3, #6]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d004      	beq.n	8009fa2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f890 	bl	800a0c0 <USBD_CtlError>
        break;
 8009fa0:	e01a      	b.n	8009fd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d005      	beq.n	8009fbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	f043 0202 	orr.w	r2, r3, #2
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	330c      	adds	r3, #12
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f8eb 	bl	800a1a2 <USBD_CtlSendData>
      break;
 8009fcc:	e004      	b.n	8009fd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f875 	bl	800a0c0 <USBD_CtlError>
      break;
 8009fd6:	bf00      	nop
  }
}
 8009fd8:	bf00      	nop
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	885b      	ldrh	r3, [r3, #2]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d106      	bne.n	800a000 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f90e 	bl	800a21c <USBD_CtlSendStatus>
  }
}
 800a000:	bf00      	nop
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	3b01      	subs	r3, #1
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d80b      	bhi.n	800a038 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	885b      	ldrh	r3, [r3, #2]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d10c      	bne.n	800a042 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f8f3 	bl	800a21c <USBD_CtlSendStatus>
      }
      break;
 800a036:	e004      	b.n	800a042 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f840 	bl	800a0c0 <USBD_CtlError>
      break;
 800a040:	e000      	b.n	800a044 <USBD_ClrFeature+0x3c>
      break;
 800a042:	bf00      	nop
  }
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	781a      	ldrb	r2, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3301      	adds	r3, #1
 800a066:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	781a      	ldrb	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	3301      	adds	r3, #1
 800a074:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f7ff fa92 	bl	80095a0 <SWAPBYTE>
 800a07c:	4603      	mov	r3, r0
 800a07e:	461a      	mov	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	3301      	adds	r3, #1
 800a088:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3301      	adds	r3, #1
 800a08e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f7ff fa85 	bl	80095a0 <SWAPBYTE>
 800a096:	4603      	mov	r3, r0
 800a098:	461a      	mov	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f7ff fa78 	bl	80095a0 <SWAPBYTE>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	80da      	strh	r2, [r3, #6]
}
 800a0b8:	bf00      	nop
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0ca:	2180      	movs	r1, #128	; 0x80
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fbeb 	bl	800a8a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fbe7 	bl	800a8a8 <USBD_LL_StallEP>
}
 800a0da:	bf00      	nop
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b086      	sub	sp, #24
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d036      	beq.n	800a166 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a0fc:	6938      	ldr	r0, [r7, #16]
 800a0fe:	f000 f836 	bl	800a16e <USBD_GetLen>
 800a102:	4603      	mov	r3, r0
 800a104:	3301      	adds	r3, #1
 800a106:	b29b      	uxth	r3, r3
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	4413      	add	r3, r2
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	7812      	ldrb	r2, [r2, #0]
 800a11a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
 800a11e:	3301      	adds	r3, #1
 800a120:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a122:	7dfb      	ldrb	r3, [r7, #23]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	4413      	add	r3, r2
 800a128:	2203      	movs	r2, #3
 800a12a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a12c:	7dfb      	ldrb	r3, [r7, #23]
 800a12e:	3301      	adds	r3, #1
 800a130:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a132:	e013      	b.n	800a15c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	4413      	add	r3, r2
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	7812      	ldrb	r2, [r2, #0]
 800a13e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	3301      	adds	r3, #1
 800a144:	613b      	str	r3, [r7, #16]
    idx++;
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	3301      	adds	r3, #1
 800a14a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a14c:	7dfb      	ldrb	r3, [r7, #23]
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	4413      	add	r3, r2
 800a152:	2200      	movs	r2, #0
 800a154:	701a      	strb	r2, [r3, #0]
    idx++;
 800a156:	7dfb      	ldrb	r3, [r7, #23]
 800a158:	3301      	adds	r3, #1
 800a15a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1e7      	bne.n	800a134 <USBD_GetString+0x52>
 800a164:	e000      	b.n	800a168 <USBD_GetString+0x86>
    return;
 800a166:	bf00      	nop
  }
}
 800a168:	3718      	adds	r7, #24
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a16e:	b480      	push	{r7}
 800a170:	b085      	sub	sp, #20
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a17e:	e005      	b.n	800a18c <USBD_GetLen+0x1e>
  {
    len++;
 800a180:	7bfb      	ldrb	r3, [r7, #15]
 800a182:	3301      	adds	r3, #1
 800a184:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	3301      	adds	r3, #1
 800a18a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1f5      	bne.n	800a180 <USBD_GetLen+0x12>
  }

  return len;
 800a194:	7bfb      	ldrb	r3, [r7, #15]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	60f8      	str	r0, [r7, #12]
 800a1aa:	60b9      	str	r1, [r7, #8]
 800a1ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 fbf7 	bl	800a9bc <USBD_LL_Transmit>

  return USBD_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 fbe6 	bl	800a9bc <USBD_LL_Transmit>

  return USBD_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b084      	sub	sp, #16
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	60f8      	str	r0, [r7, #12]
 800a202:	60b9      	str	r1, [r7, #8]
 800a204:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	2100      	movs	r1, #0
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f000 fbf6 	bl	800a9fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2204      	movs	r2, #4
 800a228:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a22c:	2300      	movs	r3, #0
 800a22e:	2200      	movs	r2, #0
 800a230:	2100      	movs	r1, #0
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fbc2 	bl	800a9bc <USBD_LL_Transmit>

  return USBD_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b082      	sub	sp, #8
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2205      	movs	r2, #5
 800a24e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a252:	2300      	movs	r3, #0
 800a254:	2200      	movs	r2, #0
 800a256:	2100      	movs	r1, #0
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 fbd0 	bl	800a9fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800a26c:	2200      	movs	r2, #0
 800a26e:	490e      	ldr	r1, [pc, #56]	; (800a2a8 <MX_USB_Device_Init+0x40>)
 800a270:	480e      	ldr	r0, [pc, #56]	; (800a2ac <MX_USB_Device_Init+0x44>)
 800a272:	f7fe fef7 	bl	8009064 <USBD_Init>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d001      	beq.n	800a280 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a27c:	f7f7 fb05 	bl	800188a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800a280:	490b      	ldr	r1, [pc, #44]	; (800a2b0 <MX_USB_Device_Init+0x48>)
 800a282:	480a      	ldr	r0, [pc, #40]	; (800a2ac <MX_USB_Device_Init+0x44>)
 800a284:	f7fe ff1e 	bl	80090c4 <USBD_RegisterClass>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d001      	beq.n	800a292 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a28e:	f7f7 fafc 	bl	800188a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a292:	4806      	ldr	r0, [pc, #24]	; (800a2ac <MX_USB_Device_Init+0x44>)
 800a294:	f7fe ff3d 	bl	8009112 <USBD_Start>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800a29e:	f7f7 faf4 	bl	800188a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a2a2:	bf00      	nop
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	20000130 	.word	0x20000130
 800a2ac:	200002f8 	.word	0x200002f8
 800a2b0:	20000028 	.word	0x20000028

0800a2b4 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	6039      	str	r1, [r7, #0]
 800a2be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	2212      	movs	r2, #18
 800a2c4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800a2c6:	4b03      	ldr	r3, [pc, #12]	; (800a2d4 <USBD_HID_DeviceDescriptor+0x20>)
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	20000150 	.word	0x20000150

0800a2d8 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	6039      	str	r1, [r7, #0]
 800a2e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	2204      	movs	r2, #4
 800a2e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2ea:	4b03      	ldr	r3, [pc, #12]	; (800a2f8 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	20000164 	.word	0x20000164

0800a2fc <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	4603      	mov	r3, r0
 800a304:	6039      	str	r1, [r7, #0]
 800a306:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d105      	bne.n	800a31a <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	4907      	ldr	r1, [pc, #28]	; (800a330 <USBD_HID_ProductStrDescriptor+0x34>)
 800a312:	4808      	ldr	r0, [pc, #32]	; (800a334 <USBD_HID_ProductStrDescriptor+0x38>)
 800a314:	f7ff fee5 	bl	800a0e2 <USBD_GetString>
 800a318:	e004      	b.n	800a324 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	4904      	ldr	r1, [pc, #16]	; (800a330 <USBD_HID_ProductStrDescriptor+0x34>)
 800a31e:	4805      	ldr	r0, [pc, #20]	; (800a334 <USBD_HID_ProductStrDescriptor+0x38>)
 800a320:	f7ff fedf 	bl	800a0e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a324:	4b02      	ldr	r3, [pc, #8]	; (800a330 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800a326:	4618      	mov	r0, r3
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	200005c8 	.word	0x200005c8
 800a334:	0800abdc 	.word	0x0800abdc

0800a338 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	6039      	str	r1, [r7, #0]
 800a342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	4904      	ldr	r1, [pc, #16]	; (800a358 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800a348:	4804      	ldr	r0, [pc, #16]	; (800a35c <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800a34a:	f7ff feca 	bl	800a0e2 <USBD_GetString>
  return USBD_StrDesc;
 800a34e:	4b02      	ldr	r3, [pc, #8]	; (800a358 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800a350:	4618      	mov	r0, r3
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	200005c8 	.word	0x200005c8
 800a35c:	0800abf4 	.word	0x0800abf4

0800a360 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	6039      	str	r1, [r7, #0]
 800a36a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	221a      	movs	r2, #26
 800a370:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a372:	f000 f843 	bl	800a3fc <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a376:	4b02      	ldr	r3, [pc, #8]	; (800a380 <USBD_HID_SerialStrDescriptor+0x20>)
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	20000168 	.word	0x20000168

0800a384 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	4603      	mov	r3, r0
 800a38c:	6039      	str	r1, [r7, #0]
 800a38e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a390:	79fb      	ldrb	r3, [r7, #7]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d105      	bne.n	800a3a2 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	4907      	ldr	r1, [pc, #28]	; (800a3b8 <USBD_HID_ConfigStrDescriptor+0x34>)
 800a39a:	4808      	ldr	r0, [pc, #32]	; (800a3bc <USBD_HID_ConfigStrDescriptor+0x38>)
 800a39c:	f7ff fea1 	bl	800a0e2 <USBD_GetString>
 800a3a0:	e004      	b.n	800a3ac <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	4904      	ldr	r1, [pc, #16]	; (800a3b8 <USBD_HID_ConfigStrDescriptor+0x34>)
 800a3a6:	4805      	ldr	r0, [pc, #20]	; (800a3bc <USBD_HID_ConfigStrDescriptor+0x38>)
 800a3a8:	f7ff fe9b 	bl	800a0e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3ac:	4b02      	ldr	r3, [pc, #8]	; (800a3b8 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	200005c8 	.word	0x200005c8
 800a3bc:	0800ac08 	.word	0x0800ac08

0800a3c0 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	6039      	str	r1, [r7, #0]
 800a3ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3cc:	79fb      	ldrb	r3, [r7, #7]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d105      	bne.n	800a3de <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	4907      	ldr	r1, [pc, #28]	; (800a3f4 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800a3d6:	4808      	ldr	r0, [pc, #32]	; (800a3f8 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800a3d8:	f7ff fe83 	bl	800a0e2 <USBD_GetString>
 800a3dc:	e004      	b.n	800a3e8 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	4904      	ldr	r1, [pc, #16]	; (800a3f4 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800a3e2:	4805      	ldr	r0, [pc, #20]	; (800a3f8 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800a3e4:	f7ff fe7d 	bl	800a0e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e8:	4b02      	ldr	r3, [pc, #8]	; (800a3f4 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	200005c8 	.word	0x200005c8
 800a3f8:	0800ac14 	.word	0x0800ac14

0800a3fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a402:	4b0f      	ldr	r3, [pc, #60]	; (800a440 <Get_SerialNum+0x44>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a408:	4b0e      	ldr	r3, [pc, #56]	; (800a444 <Get_SerialNum+0x48>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a40e:	4b0e      	ldr	r3, [pc, #56]	; (800a448 <Get_SerialNum+0x4c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4413      	add	r3, r2
 800a41a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d009      	beq.n	800a436 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a422:	2208      	movs	r2, #8
 800a424:	4909      	ldr	r1, [pc, #36]	; (800a44c <Get_SerialNum+0x50>)
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f000 f814 	bl	800a454 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a42c:	2204      	movs	r2, #4
 800a42e:	4908      	ldr	r1, [pc, #32]	; (800a450 <Get_SerialNum+0x54>)
 800a430:	68b8      	ldr	r0, [r7, #8]
 800a432:	f000 f80f 	bl	800a454 <IntToUnicode>
  }
}
 800a436:	bf00      	nop
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	1fff7590 	.word	0x1fff7590
 800a444:	1fff7594 	.word	0x1fff7594
 800a448:	1fff7598 	.word	0x1fff7598
 800a44c:	2000016a 	.word	0x2000016a
 800a450:	2000017a 	.word	0x2000017a

0800a454 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a454:	b480      	push	{r7}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	4613      	mov	r3, r2
 800a460:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a466:	2300      	movs	r3, #0
 800a468:	75fb      	strb	r3, [r7, #23]
 800a46a:	e027      	b.n	800a4bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	0f1b      	lsrs	r3, r3, #28
 800a470:	2b09      	cmp	r3, #9
 800a472:	d80b      	bhi.n	800a48c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	0f1b      	lsrs	r3, r3, #28
 800a478:	b2da      	uxtb	r2, r3
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
 800a47c:	005b      	lsls	r3, r3, #1
 800a47e:	4619      	mov	r1, r3
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	440b      	add	r3, r1
 800a484:	3230      	adds	r2, #48	; 0x30
 800a486:	b2d2      	uxtb	r2, r2
 800a488:	701a      	strb	r2, [r3, #0]
 800a48a:	e00a      	b.n	800a4a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	0f1b      	lsrs	r3, r3, #28
 800a490:	b2da      	uxtb	r2, r3
 800a492:	7dfb      	ldrb	r3, [r7, #23]
 800a494:	005b      	lsls	r3, r3, #1
 800a496:	4619      	mov	r1, r3
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	440b      	add	r3, r1
 800a49c:	3237      	adds	r2, #55	; 0x37
 800a49e:	b2d2      	uxtb	r2, r2
 800a4a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	011b      	lsls	r3, r3, #4
 800a4a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4a8:	7dfb      	ldrb	r3, [r7, #23]
 800a4aa:	005b      	lsls	r3, r3, #1
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	75fb      	strb	r3, [r7, #23]
 800a4bc:	7dfa      	ldrb	r2, [r7, #23]
 800a4be:	79fb      	ldrb	r3, [r7, #7]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d3d3      	bcc.n	800a46c <IntToUnicode+0x18>
  }
}
 800a4c4:	bf00      	nop
 800a4c6:	bf00      	nop
 800a4c8:	371c      	adds	r7, #28
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <LL_AHB2_GRP1_EnableClock>:
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b085      	sub	sp, #20
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a4da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a4ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
}
 800a4f8:	bf00      	nop
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <LL_APB1_GRP1_EnableClock>:
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a50c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a510:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4313      	orrs	r3, r2
 800a51a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a51c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a520:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4013      	ands	r3, r2
 800a526:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a528:	68fb      	ldr	r3, [r7, #12]
}
 800a52a:	bf00      	nop
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
	...

0800a538 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b09c      	sub	sp, #112	; 0x70
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a540:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]
 800a548:	605a      	str	r2, [r3, #4]
 800a54a:	609a      	str	r2, [r3, #8]
 800a54c:	60da      	str	r2, [r3, #12]
 800a54e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a550:	f107 030c 	add.w	r3, r7, #12
 800a554:	2250      	movs	r2, #80	; 0x50
 800a556:	2100      	movs	r1, #0
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 fb15 	bl	800ab88 <memset>
  if(pcdHandle->Instance==USB)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a23      	ldr	r2, [pc, #140]	; (800a5f0 <HAL_PCD_MspInit+0xb8>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d13e      	bne.n	800a5e6 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a56c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800a56e:	2318      	movs	r3, #24
 800a570:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800a572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a576:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800a578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a57c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800a57e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a582:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800a584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a588:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a58a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a58e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a590:	f107 030c 	add.w	r3, r7, #12
 800a594:	4618      	mov	r0, r3
 800a596:	f7fa ff65 	bl	8005464 <HAL_RCCEx_PeriphCLKConfig>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800a5a0:	f7f7 f973 	bl	800188a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5a4:	2001      	movs	r0, #1
 800a5a6:	f7ff ff94 	bl	800a4d2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a5aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a5ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a5bc:	230a      	movs	r3, #10
 800a5be:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5ca:	f7f7 fd5b 	bl	8002084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a5ce:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a5d2:	f7ff ff97 	bl	800a504 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	2100      	movs	r1, #0
 800a5da:	2014      	movs	r0, #20
 800a5dc:	f7f7 fd1d 	bl	800201a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a5e0:	2014      	movs	r0, #20
 800a5e2:	f7f7 fd34 	bl	800204e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a5e6:	bf00      	nop
 800a5e8:	3770      	adds	r7, #112	; 0x70
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	40006800 	.word	0x40006800

0800a5f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a608:	4619      	mov	r1, r3
 800a60a:	4610      	mov	r0, r2
 800a60c:	f7fe fdcc 	bl	80091a8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a610:	bf00      	nop
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	460b      	mov	r3, r1
 800a622:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a62a:	78fa      	ldrb	r2, [r7, #3]
 800a62c:	6879      	ldr	r1, [r7, #4]
 800a62e:	4613      	mov	r3, r2
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	4413      	add	r3, r2
 800a634:	00db      	lsls	r3, r3, #3
 800a636:	440b      	add	r3, r1
 800a638:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	78fb      	ldrb	r3, [r7, #3]
 800a640:	4619      	mov	r1, r3
 800a642:	f7fe fe06 	bl	8009252 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a646:	bf00      	nop
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b082      	sub	sp, #8
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	460b      	mov	r3, r1
 800a658:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a660:	78fa      	ldrb	r2, [r7, #3]
 800a662:	6879      	ldr	r1, [r7, #4]
 800a664:	4613      	mov	r3, r2
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4413      	add	r3, r2
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	440b      	add	r3, r1
 800a66e:	333c      	adds	r3, #60	; 0x3c
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	78fb      	ldrb	r3, [r7, #3]
 800a674:	4619      	mov	r1, r3
 800a676:	f7fe fe4f 	bl	8009318 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a67a:	bf00      	nop
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b082      	sub	sp, #8
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a690:	4618      	mov	r0, r3
 800a692:	f7fe ff63 	bl	800955c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a696:	bf00      	nop
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b084      	sub	sp, #16
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d001      	beq.n	800a6b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a6b2:	f7f7 f8ea 	bl	800188a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a6bc:	7bfa      	ldrb	r2, [r7, #15]
 800a6be:	4611      	mov	r1, r2
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fe ff0d 	bl	80094e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fe feb9 	bl	8009444 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a6d2:	bf00      	nop
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
	...

0800a6dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fe ff08 	bl	8009500 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d005      	beq.n	800a704 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6f8:	4b04      	ldr	r3, [pc, #16]	; (800a70c <HAL_PCD_SuspendCallback+0x30>)
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	4a03      	ldr	r2, [pc, #12]	; (800a70c <HAL_PCD_SuspendCallback+0x30>)
 800a6fe:	f043 0306 	orr.w	r3, r3, #6
 800a702:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a704:	bf00      	nop
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	e000ed00 	.word	0xe000ed00

0800a710 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d007      	beq.n	800a730 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a720:	4b08      	ldr	r3, [pc, #32]	; (800a744 <HAL_PCD_ResumeCallback+0x34>)
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	4a07      	ldr	r2, [pc, #28]	; (800a744 <HAL_PCD_ResumeCallback+0x34>)
 800a726:	f023 0306 	bic.w	r3, r3, #6
 800a72a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a72c:	f000 f9d6 	bl	800aadc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a736:	4618      	mov	r0, r3
 800a738:	f7fe fef8 	bl	800952c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a73c:	bf00      	nop
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	e000ed00 	.word	0xe000ed00

0800a748 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a750:	4a23      	ldr	r2, [pc, #140]	; (800a7e0 <USBD_LL_Init+0x98>)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a21      	ldr	r2, [pc, #132]	; (800a7e0 <USBD_LL_Init+0x98>)
 800a75c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800a760:	f7f9 fb62 	bl	8003e28 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800a764:	4b1e      	ldr	r3, [pc, #120]	; (800a7e0 <USBD_LL_Init+0x98>)
 800a766:	4a1f      	ldr	r2, [pc, #124]	; (800a7e4 <USBD_LL_Init+0x9c>)
 800a768:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a76a:	4b1d      	ldr	r3, [pc, #116]	; (800a7e0 <USBD_LL_Init+0x98>)
 800a76c:	2208      	movs	r2, #8
 800a76e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a770:	4b1b      	ldr	r3, [pc, #108]	; (800a7e0 <USBD_LL_Init+0x98>)
 800a772:	2202      	movs	r2, #2
 800a774:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a776:	4b1a      	ldr	r3, [pc, #104]	; (800a7e0 <USBD_LL_Init+0x98>)
 800a778:	2202      	movs	r2, #2
 800a77a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a77c:	4b18      	ldr	r3, [pc, #96]	; (800a7e0 <USBD_LL_Init+0x98>)
 800a77e:	2200      	movs	r2, #0
 800a780:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a782:	4b17      	ldr	r3, [pc, #92]	; (800a7e0 <USBD_LL_Init+0x98>)
 800a784:	2200      	movs	r2, #0
 800a786:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a788:	4b15      	ldr	r3, [pc, #84]	; (800a7e0 <USBD_LL_Init+0x98>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a78e:	4b14      	ldr	r3, [pc, #80]	; (800a7e0 <USBD_LL_Init+0x98>)
 800a790:	2200      	movs	r2, #0
 800a792:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a794:	4812      	ldr	r0, [pc, #72]	; (800a7e0 <USBD_LL_Init+0x98>)
 800a796:	f7f7 fe0d 	bl	80023b4 <HAL_PCD_Init>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800a7a0:	f7f7 f873 	bl	800188a <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a7aa:	2318      	movs	r3, #24
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	f7f9 faae 	bl	8003d10 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a7ba:	2358      	movs	r3, #88	; 0x58
 800a7bc:	2200      	movs	r2, #0
 800a7be:	2180      	movs	r1, #128	; 0x80
 800a7c0:	f7f9 faa6 	bl	8003d10 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a7ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2181      	movs	r1, #129	; 0x81
 800a7d2:	f7f9 fa9d 	bl	8003d10 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	200007c8 	.word	0x200007c8
 800a7e4:	40006800 	.word	0x40006800

0800a7e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7f7 febd 	bl	800257e <HAL_PCD_Start>
 800a804:	4603      	mov	r3, r0
 800a806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 f96c 	bl	800aae8 <USBD_Get_USB_Status>
 800a810:	4603      	mov	r3, r0
 800a812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a814:	7bbb      	ldrb	r3, [r7, #14]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b084      	sub	sp, #16
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	4608      	mov	r0, r1
 800a828:	4611      	mov	r1, r2
 800a82a:	461a      	mov	r2, r3
 800a82c:	4603      	mov	r3, r0
 800a82e:	70fb      	strb	r3, [r7, #3]
 800a830:	460b      	mov	r3, r1
 800a832:	70bb      	strb	r3, [r7, #2]
 800a834:	4613      	mov	r3, r2
 800a836:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a846:	78bb      	ldrb	r3, [r7, #2]
 800a848:	883a      	ldrh	r2, [r7, #0]
 800a84a:	78f9      	ldrb	r1, [r7, #3]
 800a84c:	f7f8 f805 	bl	800285a <HAL_PCD_EP_Open>
 800a850:	4603      	mov	r3, r0
 800a852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a854:	7bfb      	ldrb	r3, [r7, #15]
 800a856:	4618      	mov	r0, r3
 800a858:	f000 f946 	bl	800aae8 <USBD_Get_USB_Status>
 800a85c:	4603      	mov	r3, r0
 800a85e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a860:	7bbb      	ldrb	r3, [r7, #14]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b084      	sub	sp, #16
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	460b      	mov	r3, r1
 800a874:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a884:	78fa      	ldrb	r2, [r7, #3]
 800a886:	4611      	mov	r1, r2
 800a888:	4618      	mov	r0, r3
 800a88a:	f7f8 f84c 	bl	8002926 <HAL_PCD_EP_Close>
 800a88e:	4603      	mov	r3, r0
 800a890:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	4618      	mov	r0, r3
 800a896:	f000 f927 	bl	800aae8 <USBD_Get_USB_Status>
 800a89a:	4603      	mov	r3, r0
 800a89c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8c2:	78fa      	ldrb	r2, [r7, #3]
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f8 f8f5 	bl	8002ab6 <HAL_PCD_EP_SetStall>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 f908 	bl	800aae8 <USBD_Get_USB_Status>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b084      	sub	sp, #16
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a900:	78fa      	ldrb	r2, [r7, #3]
 800a902:	4611      	mov	r1, r2
 800a904:	4618      	mov	r0, r3
 800a906:	f7f8 f928 	bl	8002b5a <HAL_PCD_EP_ClrStall>
 800a90a:	4603      	mov	r3, r0
 800a90c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	4618      	mov	r0, r3
 800a912:	f000 f8e9 	bl	800aae8 <USBD_Get_USB_Status>
 800a916:	4603      	mov	r3, r0
 800a918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a91a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a936:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	da0c      	bge.n	800a95a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a940:	78fb      	ldrb	r3, [r7, #3]
 800a942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a946:	68f9      	ldr	r1, [r7, #12]
 800a948:	1c5a      	adds	r2, r3, #1
 800a94a:	4613      	mov	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4413      	add	r3, r2
 800a950:	00db      	lsls	r3, r3, #3
 800a952:	440b      	add	r3, r1
 800a954:	3302      	adds	r3, #2
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	e00b      	b.n	800a972 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a95a:	78fb      	ldrb	r3, [r7, #3]
 800a95c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a960:	68f9      	ldr	r1, [r7, #12]
 800a962:	4613      	mov	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4413      	add	r3, r2
 800a968:	00db      	lsls	r3, r3, #3
 800a96a:	440b      	add	r3, r1
 800a96c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a970:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a972:	4618      	mov	r0, r3
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	460b      	mov	r3, r1
 800a988:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a998:	78fa      	ldrb	r2, [r7, #3]
 800a99a:	4611      	mov	r1, r2
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7f7 ff37 	bl	8002810 <HAL_PCD_SetAddress>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 f89d 	bl	800aae8 <USBD_Get_USB_Status>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	607a      	str	r2, [r7, #4]
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9da:	7af9      	ldrb	r1, [r7, #11]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	f7f8 f826 	bl	8002a30 <HAL_PCD_EP_Transmit>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 f87c 	bl	800aae8 <USBD_Get_USB_Status>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3718      	adds	r7, #24
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b086      	sub	sp, #24
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	60f8      	str	r0, [r7, #12]
 800aa06:	607a      	str	r2, [r7, #4]
 800aa08:	603b      	str	r3, [r7, #0]
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa1c:	7af9      	ldrb	r1, [r7, #11]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	f7f7 ffc8 	bl	80029b6 <HAL_PCD_EP_Receive>
 800aa26:	4603      	mov	r3, r0
 800aa28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa2a:	7dfb      	ldrb	r3, [r7, #23]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 f85b 	bl	800aae8 <USBD_Get_USB_Status>
 800aa32:	4603      	mov	r3, r0
 800aa34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa36:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3718      	adds	r7, #24
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800aa4c:	78fb      	ldrb	r3, [r7, #3]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d002      	beq.n	800aa58 <HAL_PCDEx_LPM_Callback+0x18>
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d013      	beq.n	800aa7e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800aa56:	e023      	b.n	800aaa0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	699b      	ldr	r3, [r3, #24]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d007      	beq.n	800aa70 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aa60:	f000 f83c 	bl	800aadc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa64:	4b10      	ldr	r3, [pc, #64]	; (800aaa8 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	4a0f      	ldr	r2, [pc, #60]	; (800aaa8 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa6a:	f023 0306 	bic.w	r3, r3, #6
 800aa6e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fe fd58 	bl	800952c <USBD_LL_Resume>
    break;
 800aa7c:	e010      	b.n	800aaa0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe fd3b 	bl	8009500 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d005      	beq.n	800aa9e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa92:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	4a04      	ldr	r2, [pc, #16]	; (800aaa8 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa98:	f043 0306 	orr.w	r3, r3, #6
 800aa9c:	6113      	str	r3, [r2, #16]
    break;
 800aa9e:	bf00      	nop
}
 800aaa0:	bf00      	nop
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	e000ed00 	.word	0xe000ed00

0800aaac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aab4:	4b03      	ldr	r3, [pc, #12]	; (800aac4 <USBD_static_malloc+0x18>)
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	20000224 	.word	0x20000224

0800aac8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]

}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800aae0:	f7f6 fe4a 	bl	8001778 <SystemClock_Config>
}
 800aae4:	bf00      	nop
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	4603      	mov	r3, r0
 800aaf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aaf6:	79fb      	ldrb	r3, [r7, #7]
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	d817      	bhi.n	800ab2c <USBD_Get_USB_Status+0x44>
 800aafc:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <USBD_Get_USB_Status+0x1c>)
 800aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab02:	bf00      	nop
 800ab04:	0800ab15 	.word	0x0800ab15
 800ab08:	0800ab1b 	.word	0x0800ab1b
 800ab0c:	0800ab21 	.word	0x0800ab21
 800ab10:	0800ab27 	.word	0x0800ab27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab14:	2300      	movs	r3, #0
 800ab16:	73fb      	strb	r3, [r7, #15]
    break;
 800ab18:	e00b      	b.n	800ab32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab1e:	e008      	b.n	800ab32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab20:	2301      	movs	r3, #1
 800ab22:	73fb      	strb	r3, [r7, #15]
    break;
 800ab24:	e005      	b.n	800ab32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab26:	2303      	movs	r3, #3
 800ab28:	73fb      	strb	r3, [r7, #15]
    break;
 800ab2a:	e002      	b.n	800ab32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab30:	bf00      	nop
  }
  return usb_status;
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <__libc_init_array>:
 800ab40:	b570      	push	{r4, r5, r6, lr}
 800ab42:	4d0d      	ldr	r5, [pc, #52]	; (800ab78 <__libc_init_array+0x38>)
 800ab44:	4c0d      	ldr	r4, [pc, #52]	; (800ab7c <__libc_init_array+0x3c>)
 800ab46:	1b64      	subs	r4, r4, r5
 800ab48:	10a4      	asrs	r4, r4, #2
 800ab4a:	2600      	movs	r6, #0
 800ab4c:	42a6      	cmp	r6, r4
 800ab4e:	d109      	bne.n	800ab64 <__libc_init_array+0x24>
 800ab50:	4d0b      	ldr	r5, [pc, #44]	; (800ab80 <__libc_init_array+0x40>)
 800ab52:	4c0c      	ldr	r4, [pc, #48]	; (800ab84 <__libc_init_array+0x44>)
 800ab54:	f000 f820 	bl	800ab98 <_init>
 800ab58:	1b64      	subs	r4, r4, r5
 800ab5a:	10a4      	asrs	r4, r4, #2
 800ab5c:	2600      	movs	r6, #0
 800ab5e:	42a6      	cmp	r6, r4
 800ab60:	d105      	bne.n	800ab6e <__libc_init_array+0x2e>
 800ab62:	bd70      	pop	{r4, r5, r6, pc}
 800ab64:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab68:	4798      	blx	r3
 800ab6a:	3601      	adds	r6, #1
 800ab6c:	e7ee      	b.n	800ab4c <__libc_init_array+0xc>
 800ab6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab72:	4798      	blx	r3
 800ab74:	3601      	adds	r6, #1
 800ab76:	e7f2      	b.n	800ab5e <__libc_init_array+0x1e>
 800ab78:	0800aca4 	.word	0x0800aca4
 800ab7c:	0800aca4 	.word	0x0800aca4
 800ab80:	0800aca4 	.word	0x0800aca4
 800ab84:	0800aca8 	.word	0x0800aca8

0800ab88 <memset>:
 800ab88:	4402      	add	r2, r0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d100      	bne.n	800ab92 <memset+0xa>
 800ab90:	4770      	bx	lr
 800ab92:	f803 1b01 	strb.w	r1, [r3], #1
 800ab96:	e7f9      	b.n	800ab8c <memset+0x4>

0800ab98 <_init>:
 800ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9a:	bf00      	nop
 800ab9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab9e:	bc08      	pop	{r3}
 800aba0:	469e      	mov	lr, r3
 800aba2:	4770      	bx	lr

0800aba4 <_fini>:
 800aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba6:	bf00      	nop
 800aba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abaa:	bc08      	pop	{r3}
 800abac:	469e      	mov	lr, r3
 800abae:	4770      	bx	lr

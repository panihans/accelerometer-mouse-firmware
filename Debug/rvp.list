
rvp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aad4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800ac10  0800ac10  0001ac10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ad04  0800ad04  0001ad04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ad08  0800ad08  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000180  20000004  0800ad0c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000900  20000184  0800ae8c  00020184  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000a84  0800ae8c  00020a84  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002365f  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004858  00000000  00000000  00043813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d20  00000000  00000000  00048070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001b40  00000000  00000000  00049d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024aa9  00000000  00000000  0004b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e497  00000000  00000000  00070379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d8c1c  00000000  00000000  0008e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0016742c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007a24  00000000  00000000  00167480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	0800abf8 	.word	0x0800abf8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	0800abf8 	.word	0x0800abf8

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	3c01      	subs	r4, #1
 80002b8:	bf28      	it	cs
 80002ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002be:	d2e9      	bcs.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dmul>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000502:	bf1d      	ittte	ne
 8000504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000508:	ea94 0f0c 	teqne	r4, ip
 800050c:	ea95 0f0c 	teqne	r5, ip
 8000510:	f000 f8de 	bleq	80006d0 <__aeabi_dmul+0x1dc>
 8000514:	442c      	add	r4, r5
 8000516:	ea81 0603 	eor.w	r6, r1, r3
 800051a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000522:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000526:	bf18      	it	ne
 8000528:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800052c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000534:	d038      	beq.n	80005a8 <__aeabi_dmul+0xb4>
 8000536:	fba0 ce02 	umull	ip, lr, r0, r2
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000542:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000546:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054a:	f04f 0600 	mov.w	r6, #0
 800054e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000552:	f09c 0f00 	teq	ip, #0
 8000556:	bf18      	it	ne
 8000558:	f04e 0e01 	orrne.w	lr, lr, #1
 800055c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000560:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000564:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000568:	d204      	bcs.n	8000574 <__aeabi_dmul+0x80>
 800056a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056e:	416d      	adcs	r5, r5
 8000570:	eb46 0606 	adc.w	r6, r6, r6
 8000574:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000578:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800057c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000580:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000584:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000588:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800058c:	bf88      	it	hi
 800058e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000592:	d81e      	bhi.n	80005d2 <__aeabi_dmul+0xde>
 8000594:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005ac:	ea46 0101 	orr.w	r1, r6, r1
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	ea81 0103 	eor.w	r1, r1, r3
 80005b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005bc:	bfc2      	ittt	gt
 80005be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c6:	bd70      	popgt	{r4, r5, r6, pc}
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f04f 0e00 	mov.w	lr, #0
 80005d0:	3c01      	subs	r4, #1
 80005d2:	f300 80ab 	bgt.w	800072c <__aeabi_dmul+0x238>
 80005d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005da:	bfde      	ittt	le
 80005dc:	2000      	movle	r0, #0
 80005de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e2:	bd70      	pople	{r4, r5, r6, pc}
 80005e4:	f1c4 0400 	rsb	r4, r4, #0
 80005e8:	3c20      	subs	r4, #32
 80005ea:	da35      	bge.n	8000658 <__aeabi_dmul+0x164>
 80005ec:	340c      	adds	r4, #12
 80005ee:	dc1b      	bgt.n	8000628 <__aeabi_dmul+0x134>
 80005f0:	f104 0414 	add.w	r4, r4, #20
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f305 	lsl.w	r3, r0, r5
 80005fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000600:	fa01 f205 	lsl.w	r2, r1, r5
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800060c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	fa21 f604 	lsr.w	r6, r1, r4
 8000618:	eb42 0106 	adc.w	r1, r2, r6
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 040c 	rsb	r4, r4, #12
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f304 	lsl.w	r3, r0, r4
 8000634:	fa20 f005 	lsr.w	r0, r0, r5
 8000638:	fa01 f204 	lsl.w	r2, r1, r4
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	f141 0100 	adc.w	r1, r1, #0
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f205 	lsl.w	r2, r0, r5
 8000660:	ea4e 0e02 	orr.w	lr, lr, r2
 8000664:	fa20 f304 	lsr.w	r3, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea43 0302 	orr.w	r3, r3, r2
 8000670:	fa21 f004 	lsr.w	r0, r1, r4
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000678:	fa21 f204 	lsr.w	r2, r1, r4
 800067c:	ea20 0002 	bic.w	r0, r0, r2
 8000680:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f094 0f00 	teq	r4, #0
 8000694:	d10f      	bne.n	80006b6 <__aeabi_dmul+0x1c2>
 8000696:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069a:	0040      	lsls	r0, r0, #1
 800069c:	eb41 0101 	adc.w	r1, r1, r1
 80006a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3c01      	subeq	r4, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1a6>
 80006aa:	ea41 0106 	orr.w	r1, r1, r6
 80006ae:	f095 0f00 	teq	r5, #0
 80006b2:	bf18      	it	ne
 80006b4:	4770      	bxne	lr
 80006b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	eb43 0303 	adc.w	r3, r3, r3
 80006c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c4:	bf08      	it	eq
 80006c6:	3d01      	subeq	r5, #1
 80006c8:	d0f7      	beq.n	80006ba <__aeabi_dmul+0x1c6>
 80006ca:	ea43 0306 	orr.w	r3, r3, r6
 80006ce:	4770      	bx	lr
 80006d0:	ea94 0f0c 	teq	r4, ip
 80006d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d8:	bf18      	it	ne
 80006da:	ea95 0f0c 	teqne	r5, ip
 80006de:	d00c      	beq.n	80006fa <__aeabi_dmul+0x206>
 80006e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e4:	bf18      	it	ne
 80006e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ea:	d1d1      	bne.n	8000690 <__aeabi_dmul+0x19c>
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
 80006fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fe:	bf06      	itte	eq
 8000700:	4610      	moveq	r0, r2
 8000702:	4619      	moveq	r1, r3
 8000704:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000708:	d019      	beq.n	800073e <__aeabi_dmul+0x24a>
 800070a:	ea94 0f0c 	teq	r4, ip
 800070e:	d102      	bne.n	8000716 <__aeabi_dmul+0x222>
 8000710:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000714:	d113      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000716:	ea95 0f0c 	teq	r5, ip
 800071a:	d105      	bne.n	8000728 <__aeabi_dmul+0x234>
 800071c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000720:	bf1c      	itt	ne
 8000722:	4610      	movne	r0, r2
 8000724:	4619      	movne	r1, r3
 8000726:	d10a      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000742:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000746:	bd70      	pop	{r4, r5, r6, pc}

08000748 <__aeabi_ddiv>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000756:	bf1d      	ittte	ne
 8000758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800075c:	ea94 0f0c 	teqne	r4, ip
 8000760:	ea95 0f0c 	teqne	r5, ip
 8000764:	f000 f8a7 	bleq	80008b6 <__aeabi_ddiv+0x16e>
 8000768:	eba4 0405 	sub.w	r4, r4, r5
 800076c:	ea81 0e03 	eor.w	lr, r1, r3
 8000770:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000774:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000778:	f000 8088 	beq.w	800088c <__aeabi_ddiv+0x144>
 800077c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000780:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000784:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800078c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000790:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000794:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000798:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800079c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a0:	429d      	cmp	r5, r3
 80007a2:	bf08      	it	eq
 80007a4:	4296      	cmpeq	r6, r2
 80007a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ae:	d202      	bcs.n	80007b6 <__aeabi_ddiv+0x6e>
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	1ab6      	subs	r6, r6, r2
 80007b8:	eb65 0503 	sbc.w	r5, r5, r3
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000824:	ea55 0e06 	orrs.w	lr, r5, r6
 8000828:	d018      	beq.n	800085c <__aeabi_ddiv+0x114>
 800082a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000832:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000836:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000842:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000846:	d1c0      	bne.n	80007ca <__aeabi_ddiv+0x82>
 8000848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800084c:	d10b      	bne.n	8000866 <__aeabi_ddiv+0x11e>
 800084e:	ea41 0100 	orr.w	r1, r1, r0
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085a:	e7b6      	b.n	80007ca <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf04      	itt	eq
 8000862:	4301      	orreq	r1, r0
 8000864:	2000      	moveq	r0, #0
 8000866:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086a:	bf88      	it	hi
 800086c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000870:	f63f aeaf 	bhi.w	80005d2 <__aeabi_dmul+0xde>
 8000874:	ebb5 0c03 	subs.w	ip, r5, r3
 8000878:	bf04      	itt	eq
 800087a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000882:	f150 0000 	adcs.w	r0, r0, #0
 8000886:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000890:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000894:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000898:	bfc2      	ittt	gt
 800089a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	popgt	{r4, r5, r6, pc}
 80008a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a8:	f04f 0e00 	mov.w	lr, #0
 80008ac:	3c01      	subs	r4, #1
 80008ae:	e690      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b0:	ea45 0e06 	orr.w	lr, r5, r6
 80008b4:	e68d      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ba:	ea94 0f0c 	teq	r4, ip
 80008be:	bf08      	it	eq
 80008c0:	ea95 0f0c 	teqeq	r5, ip
 80008c4:	f43f af3b 	beq.w	800073e <__aeabi_dmul+0x24a>
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	d10a      	bne.n	80008e4 <__aeabi_ddiv+0x19c>
 80008ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d2:	f47f af34 	bne.w	800073e <__aeabi_dmul+0x24a>
 80008d6:	ea95 0f0c 	teq	r5, ip
 80008da:	f47f af25 	bne.w	8000728 <__aeabi_dmul+0x234>
 80008de:	4610      	mov	r0, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	e72c      	b.n	800073e <__aeabi_dmul+0x24a>
 80008e4:	ea95 0f0c 	teq	r5, ip
 80008e8:	d106      	bne.n	80008f8 <__aeabi_ddiv+0x1b0>
 80008ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ee:	f43f aefd 	beq.w	80006ec <__aeabi_dmul+0x1f8>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e722      	b.n	800073e <__aeabi_dmul+0x24a>
 80008f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fc:	bf18      	it	ne
 80008fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000902:	f47f aec5 	bne.w	8000690 <__aeabi_dmul+0x19c>
 8000906:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090a:	f47f af0d 	bne.w	8000728 <__aeabi_dmul+0x234>
 800090e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000912:	f47f aeeb 	bne.w	80006ec <__aeabi_dmul+0x1f8>
 8000916:	e712      	b.n	800073e <__aeabi_dmul+0x24a>

08000918 <__gedf2>:
 8000918:	f04f 3cff 	mov.w	ip, #4294967295
 800091c:	e006      	b.n	800092c <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__ledf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	e002      	b.n	800092c <__cmpdf2+0x4>
 8000926:	bf00      	nop

08000928 <__cmpdf2>:
 8000928:	f04f 0c01 	mov.w	ip, #1
 800092c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000930:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000938:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800093c:	bf18      	it	ne
 800093e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000942:	d01b      	beq.n	800097c <__cmpdf2+0x54>
 8000944:	b001      	add	sp, #4
 8000946:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094a:	bf0c      	ite	eq
 800094c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000950:	ea91 0f03 	teqne	r1, r3
 8000954:	bf02      	ittt	eq
 8000956:	ea90 0f02 	teqeq	r0, r2
 800095a:	2000      	moveq	r0, #0
 800095c:	4770      	bxeq	lr
 800095e:	f110 0f00 	cmn.w	r0, #0
 8000962:	ea91 0f03 	teq	r1, r3
 8000966:	bf58      	it	pl
 8000968:	4299      	cmppl	r1, r3
 800096a:	bf08      	it	eq
 800096c:	4290      	cmpeq	r0, r2
 800096e:	bf2c      	ite	cs
 8000970:	17d8      	asrcs	r0, r3, #31
 8000972:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000976:	f040 0001 	orr.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	d102      	bne.n	800098c <__cmpdf2+0x64>
 8000986:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098a:	d107      	bne.n	800099c <__cmpdf2+0x74>
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	d1d6      	bne.n	8000944 <__cmpdf2+0x1c>
 8000996:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099a:	d0d3      	beq.n	8000944 <__cmpdf2+0x1c>
 800099c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <__aeabi_cdrcmple>:
 80009a4:	4684      	mov	ip, r0
 80009a6:	4610      	mov	r0, r2
 80009a8:	4662      	mov	r2, ip
 80009aa:	468c      	mov	ip, r1
 80009ac:	4619      	mov	r1, r3
 80009ae:	4663      	mov	r3, ip
 80009b0:	e000      	b.n	80009b4 <__aeabi_cdcmpeq>
 80009b2:	bf00      	nop

080009b4 <__aeabi_cdcmpeq>:
 80009b4:	b501      	push	{r0, lr}
 80009b6:	f7ff ffb7 	bl	8000928 <__cmpdf2>
 80009ba:	2800      	cmp	r0, #0
 80009bc:	bf48      	it	mi
 80009be:	f110 0f00 	cmnmi.w	r0, #0
 80009c2:	bd01      	pop	{r0, pc}

080009c4 <__aeabi_dcmpeq>:
 80009c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c8:	f7ff fff4 	bl	80009b4 <__aeabi_cdcmpeq>
 80009cc:	bf0c      	ite	eq
 80009ce:	2001      	moveq	r0, #1
 80009d0:	2000      	movne	r0, #0
 80009d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d6:	bf00      	nop

080009d8 <__aeabi_dcmplt>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff ffea 	bl	80009b4 <__aeabi_cdcmpeq>
 80009e0:	bf34      	ite	cc
 80009e2:	2001      	movcc	r0, #1
 80009e4:	2000      	movcs	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmple>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffe0 	bl	80009b4 <__aeabi_cdcmpeq>
 80009f4:	bf94      	ite	ls
 80009f6:	2001      	movls	r0, #1
 80009f8:	2000      	movhi	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmpge>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffce 	bl	80009a4 <__aeabi_cdrcmple>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpgt>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffc4 	bl	80009a4 <__aeabi_cdrcmple>
 8000a1c:	bf34      	ite	cc
 8000a1e:	2001      	movcc	r0, #1
 8000a20:	2000      	movcs	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <update_buttons>:
uint8_t middle_down = 0;
uint8_t right_down = 0;
uint8_t b4_down = 0;
uint8_t b5_down = 0;

void update_buttons() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	// updates all the button states
 	if (HAL_GPIO_ReadPin(LEFT_UP_GPIO_Port, LEFT_UP_Pin)) {
 8000a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f001 fc96 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <update_buttons+0x1c>
		left_down = 0;
 8000a8e:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <update_buttons+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(LEFT_DOWN_GPIO_Port, LEFT_DOWN_Pin)) {
 8000a94:	2108      	movs	r1, #8
 8000a96:	482f      	ldr	r0, [pc, #188]	; (8000b54 <update_buttons+0xdc>)
 8000a98:	f001 fc8c 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <update_buttons+0x30>
		left_down = 1;
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <update_buttons+0xd8>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(MIDDLE_UP_GPIO_Port, MIDDLE_UP_Pin)) {
 8000aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f001 fc80 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <update_buttons+0x48>
		middle_down = 0;
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <update_buttons+0xe0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(MIDDLE_DOWN_GPIO_Port, MIDDLE_DOWN_Pin)) {
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4826      	ldr	r0, [pc, #152]	; (8000b5c <update_buttons+0xe4>)
 8000ac4:	f001 fc76 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <update_buttons+0x5c>
		middle_down = 1;
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <update_buttons+0xe0>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(RIGHT_UP_GPIO_Port, RIGHT_UP_Pin)) {
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	481f      	ldr	r0, [pc, #124]	; (8000b54 <update_buttons+0xdc>)
 8000ad8:	f001 fc6c 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <update_buttons+0x70>
		right_down = 0;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <update_buttons+0xe8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(RIGHT_DOWN_GPIO_Port, RIGHT_DOWN_Pin)) {
 8000ae8:	2101      	movs	r1, #1
 8000aea:	481a      	ldr	r0, [pc, #104]	; (8000b54 <update_buttons+0xdc>)
 8000aec:	f001 fc62 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <update_buttons+0x84>
		right_down = 1;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <update_buttons+0xe8>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B4_UP_GPIO_Port, B4_UP_Pin)) {
 8000afc:	2120      	movs	r1, #32
 8000afe:	4815      	ldr	r0, [pc, #84]	; (8000b54 <update_buttons+0xdc>)
 8000b00:	f001 fc58 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <update_buttons+0x98>
		b4_down = 0;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <update_buttons+0xec>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B4_DOWN_GPIO_Port, B4_DOWN_Pin)) {
 8000b10:	2110      	movs	r1, #16
 8000b12:	4810      	ldr	r0, [pc, #64]	; (8000b54 <update_buttons+0xdc>)
 8000b14:	f001 fc4e 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <update_buttons+0xac>
		b4_down = 1;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <update_buttons+0xec>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(B5_UP_GPIO_Port, B5_UP_Pin)) {
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <update_buttons+0xdc>)
 8000b28:	f001 fc44 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <update_buttons+0xc0>
		b5_down = 0;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <update_buttons+0xf0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(B5_DOWN_GPIO_Port, B5_DOWN_Pin)) {
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <update_buttons+0xdc>)
 8000b3c:	f001 fc3a 	bl	80023b4 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <update_buttons+0xd4>
		b5_down = 1;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <update_buttons+0xf0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200001a0 	.word	0x200001a0
 8000b54:	48000400 	.word	0x48000400
 8000b58:	200001a1 	.word	0x200001a1
 8000b5c:	48001000 	.word	0x48001000
 8000b60:	200001a2 	.word	0x200001a2
 8000b64:	200001a3 	.word	0x200001a3
 8000b68:	200001a4 	.word	0x200001a4

08000b6c <read_register>:
#include "imu.h"
#include "math.h"

uint8_t read_register(uint8_t r) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
	// reads a single value from a register
	// r - register
	uint8_t pTxData[1] = { r | (1UL << 7) };
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	733b      	strb	r3, [r7, #12]
	uint8_t pRxData[1] = { 0 };
 8000b80:	2300      	movs	r3, #0
 8000b82:	723b      	strb	r3, [r7, #8]
	CS_START();
 8000b84:	2200      	movs	r2, #0
 8000b86:	2110      	movs	r1, #16
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f001 fc2a 	bl	80023e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, HAL_MAX_DELAY);
 8000b90:	f107 010c 	add.w	r1, r7, #12
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
 8000b98:	2201      	movs	r2, #1
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <read_register+0x5c>)
 8000b9c:	f004 ffc2 	bl	8005b24 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 1, HAL_MAX_DELAY);
 8000ba0:	f107 0108 	add.w	r1, r7, #8
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <read_register+0x5c>)
 8000bac:	f005 f928 	bl	8005e00 <HAL_SPI_Receive>
	CS_END();
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb8:	f001 fc14 	bl	80023e4 <HAL_GPIO_WritePin>
	return pRxData[0];
 8000bbc:	7a3b      	ldrb	r3, [r7, #8]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000020c 	.word	0x2000020c

08000bcc <write_register>:

void write_register(uint8_t r, uint8_t value) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
	// writes the value to the register
	// r - register
	// value - value to write
	uint8_t pTxData[2] = { r, value };
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	733b      	strb	r3, [r7, #12]
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	737b      	strb	r3, [r7, #13]
	uint8_t pRxData[2] = { 0, 0 };
 8000be4:	2300      	movs	r3, #0
 8000be6:	813b      	strh	r3, [r7, #8]
	CS_START();
 8000be8:	2200      	movs	r2, #0
 8000bea:	2110      	movs	r1, #16
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f001 fbf8 	bl	80023e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 2, HAL_MAX_DELAY);
 8000bf4:	f107 010c 	add.w	r1, r7, #12
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	480a      	ldr	r0, [pc, #40]	; (8000c28 <write_register+0x5c>)
 8000c00:	f004 ff90 	bl	8005b24 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 2, HAL_MAX_DELAY);
 8000c04:	f107 0108 	add.w	r1, r7, #8
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <write_register+0x5c>)
 8000c10:	f005 f8f6 	bl	8005e00 <HAL_SPI_Receive>
	CS_END();
 8000c14:	2201      	movs	r2, #1
 8000c16:	2110      	movs	r1, #16
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f001 fbe2 	bl	80023e4 <HAL_GPIO_WritePin>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000020c 	.word	0x2000020c

08000c2c <imu_setup>:

#define ACCEL_CALIBRATION_N 100
int16_t x_offset, y_offset, z_offset = 0;
void imu_setup() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
	// IMU setup operations

	// reset IMU
	while (1) {
		write_register(PWR_MGMT_1, (1UL << 7));
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	206b      	movs	r0, #107	; 0x6b
 8000c36:	f7ff ffc9 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000c3a:	2064      	movs	r0, #100	; 0x64
 8000c3c:	f001 f91e 	bl	8001e7c <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000c40:	206b      	movs	r0, #107	; 0x6b
 8000c42:	f7ff ff93 	bl	8000b6c <read_register>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73fb      	strb	r3, [r7, #15]
		if (reg & (1UL << 6)) {
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0ee      	beq.n	8000c32 <imu_setup+0x6>
		}
	}

	// wake up
	while (1) {
		write_register(PWR_MGMT_1, (1 << 0));
 8000c54:	2101      	movs	r1, #1
 8000c56:	206b      	movs	r0, #107	; 0x6b
 8000c58:	f7ff ffb8 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f001 f90d 	bl	8001e7c <HAL_Delay>
		uint8_t reg = read_register(PWR_MGMT_1);
 8000c62:	206b      	movs	r0, #107	; 0x6b
 8000c64:	f7ff ff82 	bl	8000b6c <read_register>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73bb      	strb	r3, [r7, #14]
		if (reg & (1 << 0)) {
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0ee      	beq.n	8000c54 <imu_setup+0x28>
		}
	}

	//disable i2c
	while (1) {
		write_register(USER_CTRL, (1 << 4));
 8000c76:	2110      	movs	r1, #16
 8000c78:	206a      	movs	r0, #106	; 0x6a
 8000c7a:	f7ff ffa7 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000c7e:	2064      	movs	r0, #100	; 0x64
 8000c80:	f001 f8fc 	bl	8001e7c <HAL_Delay>
		uint8_t reg = read_register(USER_CTRL);
 8000c84:	206a      	movs	r0, #106	; 0x6a
 8000c86:	f7ff ff71 	bl	8000b6c <read_register>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	737b      	strb	r3, [r7, #13]
		if (reg & (1 << 4)) {
 8000c8e:	7b7b      	ldrb	r3, [r7, #13]
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0ee      	beq.n	8000c76 <imu_setup+0x4a>
		}
	}

	//accel +-16g
	while (1) {
		write_register(ACCEL_CONFIG, (1 << 4) | (1 << 3));
 8000c98:	2118      	movs	r1, #24
 8000c9a:	201c      	movs	r0, #28
 8000c9c:	f7ff ff96 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000ca0:	2064      	movs	r0, #100	; 0x64
 8000ca2:	f001 f8eb 	bl	8001e7c <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG);
 8000ca6:	201c      	movs	r0, #28
 8000ca8:	f7ff ff60 	bl	8000b6c <read_register>
 8000cac:	4603      	mov	r3, r0
 8000cae:	733b      	strb	r3, [r7, #12]
		if (reg & (1 << 4) && reg & (1 << 3)) {
 8000cb0:	7b3b      	ldrb	r3, [r7, #12]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0ee      	beq.n	8000c98 <imu_setup+0x6c>
 8000cba:	7b3b      	ldrb	r3, [r7, #12]
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0e9      	beq.n	8000c98 <imu_setup+0x6c>
		}
	}

	//accel low pass filter setting
	while (1) {
		write_register(ACCEL_CONFIG_2, 1);
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	201d      	movs	r0, #29
 8000cc8:	f7ff ff80 	bl	8000bcc <write_register>
		HAL_Delay(100);
 8000ccc:	2064      	movs	r0, #100	; 0x64
 8000cce:	f001 f8d5 	bl	8001e7c <HAL_Delay>
		uint8_t reg = read_register(ACCEL_CONFIG_2);
 8000cd2:	201d      	movs	r0, #29
 8000cd4:	f7ff ff4a 	bl	8000b6c <read_register>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	72fb      	strb	r3, [r7, #11]
		if (reg == 1) {
 8000cdc:	7afb      	ldrb	r3, [r7, #11]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d000      	beq.n	8000ce4 <imu_setup+0xb8>
	while (1) {
 8000ce2:	e7ef      	b.n	8000cc4 <imu_setup+0x98>
			break;
 8000ce4:	bf00      	nop
		}
	}

	//accel offset calculation
	int16_t x = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	813b      	strh	r3, [r7, #8]
	int16_t y = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	80fb      	strh	r3, [r7, #6]
	int16_t z = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	80bb      	strh	r3, [r7, #4]
	int32_t xsum = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
	int32_t ysum = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
	int32_t zsum = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < ACCEL_CALIBRATION_N; ++i) {
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	e01e      	b.n	8000d42 <imu_setup+0x116>
		get_xyz(&x, &y, &z);
 8000d04:	1d3a      	adds	r2, r7, #4
 8000d06:	1db9      	adds	r1, r7, #6
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f91f 	bl	8000f50 <get_xyz>
		xsum += x;
 8000d12:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d16:	461a      	mov	r2, r3
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	61fb      	str	r3, [r7, #28]
		ysum += y;
 8000d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d22:	461a      	mov	r2, r3
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	4413      	add	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
		zsum += z;
 8000d2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	4413      	add	r3, r2
 8000d34:	617b      	str	r3, [r7, #20]
		HAL_Delay(1);
 8000d36:	2001      	movs	r0, #1
 8000d38:	f001 f8a0 	bl	8001e7c <HAL_Delay>
	for (int i = 0; i < ACCEL_CALIBRATION_N; ++i) {
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	2b63      	cmp	r3, #99	; 0x63
 8000d46:	dddd      	ble.n	8000d04 <imu_setup+0xd8>
	}
	x_offset = xsum / ACCEL_CALIBRATION_N;
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <imu_setup+0x160>)
 8000d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d50:	1152      	asrs	r2, r2, #5
 8000d52:	17db      	asrs	r3, r3, #31
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <imu_setup+0x164>)
 8000d5a:	801a      	strh	r2, [r3, #0]
	y_offset = ysum / ACCEL_CALIBRATION_N;
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <imu_setup+0x160>)
 8000d60:	fb82 1203 	smull	r1, r2, r2, r3
 8000d64:	1152      	asrs	r2, r2, #5
 8000d66:	17db      	asrs	r3, r3, #31
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <imu_setup+0x168>)
 8000d6e:	801a      	strh	r2, [r3, #0]
	z_offset = zsum / ACCEL_CALIBRATION_N;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <imu_setup+0x160>)
 8000d74:	fb82 1203 	smull	r1, r2, r2, r3
 8000d78:	1152      	asrs	r2, r2, #5
 8000d7a:	17db      	asrs	r3, r3, #31
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <imu_setup+0x16c>)
 8000d82:	801a      	strh	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	51eb851f 	.word	0x51eb851f
 8000d90:	200001f6 	.word	0x200001f6
 8000d94:	200001f4 	.word	0x200001f4
 8000d98:	200001a6 	.word	0x200001a6

08000d9c <read_x>:

int16_t read_x() {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	// reads and returns the accel x axis
	uint8_t h = read_register(ACCEL_XOUT_H);
 8000da2:	203b      	movs	r0, #59	; 0x3b
 8000da4:	f7ff fee2 	bl	8000b6c <read_register>
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_XOUT_L);
 8000dac:	203c      	movs	r0, #60	; 0x3c
 8000dae:	f7ff fedd 	bl	8000b6c <read_register>
 8000db2:	4603      	mov	r3, r0
 8000db4:	71bb      	strb	r3, [r7, #6]
	int16_t x = (h << 8) | l;
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	b21a      	sxth	r2, r3
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	80bb      	strh	r3, [r7, #4]
	return x;
 8000dc4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <read_y>:

int16_t read_y() {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	// reads and returns the accel y axis
	uint8_t h = read_register(ACCEL_YOUT_H);
 8000dd6:	203d      	movs	r0, #61	; 0x3d
 8000dd8:	f7ff fec8 	bl	8000b6c <read_register>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_YOUT_L);
 8000de0:	203e      	movs	r0, #62	; 0x3e
 8000de2:	f7ff fec3 	bl	8000b6c <read_register>
 8000de6:	4603      	mov	r3, r0
 8000de8:	71bb      	strb	r3, [r7, #6]
	int16_t y = (h << 8) | l;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	b21a      	sxth	r2, r3
 8000df0:	79bb      	ldrb	r3, [r7, #6]
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	4313      	orrs	r3, r2
 8000df6:	80bb      	strh	r3, [r7, #4]
	return y;
 8000df8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <read_z>:

int16_t read_z() {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	// reads and returns the accel z axis
	uint8_t h = read_register(ACCEL_ZOUT_H);
 8000e0a:	203f      	movs	r0, #63	; 0x3f
 8000e0c:	f7ff feae 	bl	8000b6c <read_register>
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
	uint8_t l = read_register(ACCEL_ZOUT_L);
 8000e14:	2040      	movs	r0, #64	; 0x40
 8000e16:	f7ff fea9 	bl	8000b6c <read_register>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71bb      	strb	r3, [r7, #6]
	int16_t z = (h << 8) | l;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	79bb      	ldrb	r3, [r7, #6]
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	80bb      	strh	r3, [r7, #4]
	return z;
 8000e2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <filter_p>:
//float den[] = { -1, 3.1673, -3.8396, 2.1405, -0.4706 };
//#define FILTER_N 3
//float num[] = { 0.6156, -1.8468, 1.8468, -0.6156 };
//float den[] = { -1, 2.0478, -1.5057, 0.3713 };

void filter_p(int16_t r[], int16_t f[], int16_t new) {
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	4613      	mov	r3, r2
 8000e44:	80fb      	strh	r3, [r7, #6]
	// applies an iir filter
	// r - raw inputs array
	// f - filtered values array
	// new - the new value to add
	if (new < -10000 || new > 10000) {
 8000e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4a:	4a3e      	ldr	r2, [pc, #248]	; (8000f44 <filter_p+0x10c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	db72      	blt.n	8000f36 <filter_p+0xfe>
 8000e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e54:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	dc6c      	bgt.n	8000f36 <filter_p+0xfe>
		return;
	}
	r[0] = new;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	88fa      	ldrh	r2, [r7, #6]
 8000e60:	801a      	strh	r2, [r3, #0]
	f[0] = 0;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	2200      	movs	r2, #0
 8000e66:	801a      	strh	r2, [r3, #0]
	float sum = 0;
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < FILTER_N + 1; i++) {
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	e032      	b.n	8000eda <filter_p+0xa2>
		sum += den[i] * f[i];
 8000e74:	4a34      	ldr	r2, [pc, #208]	; (8000f48 <filter_p+0x110>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	ed93 7a00 	vldr	s14, [r3]
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	4413      	add	r3, r2
 8000e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e98:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea0:	edc7 7a07 	vstr	s15, [r7, #28]
		sum += num[i] * r[i];
 8000ea4:	4a29      	ldr	r2, [pc, #164]	; (8000f4c <filter_p+0x114>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	ed93 7a00 	vldr	s14, [r3]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ebc:	ee07 3a90 	vmov	s15, r3
 8000ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec8:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed0:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < FILTER_N + 1; i++) {
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	ddc9      	ble.n	8000e74 <filter_p+0x3c>
	}
	f[0] = sum;
 8000ee0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee8:	ee17 3a90 	vmov	r3, s15
 8000eec:	b21a      	sxth	r2, r3
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	801a      	strh	r2, [r3, #0]
	for (int i = FILTER_N - 1; i >= 0; i--) {
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	e01a      	b.n	8000f2e <filter_p+0xf6>
		r[i + 1] = r[i];
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	441a      	add	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	68f9      	ldr	r1, [r7, #12]
 8000f08:	440b      	add	r3, r1
 8000f0a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f0e:	801a      	strh	r2, [r3, #0]
		f[i + 1] = f[i];
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	441a      	add	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	440b      	add	r3, r1
 8000f22:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f26:	801a      	strh	r2, [r3, #0]
	for (int i = FILTER_N - 1; i >= 0; i--) {
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	dae1      	bge.n	8000ef8 <filter_p+0xc0>
 8000f34:	e000      	b.n	8000f38 <filter_p+0x100>
		return;
 8000f36:	bf00      	nop
	}
}
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	ffffd8f0 	.word	0xffffd8f0
 8000f48:	20000010 	.word	0x20000010
 8000f4c:	20000004 	.word	0x20000004

08000f50 <get_xyz>:
int16_t y_r[FILTER_N + 1] = { 0 };
int16_t y_f[FILTER_N + 1] = { 0 };
int16_t z_r[FILTER_N + 1] = { 0 };
int16_t z_f[FILTER_N + 1] = { 0 };

void get_xyz(int16_t *x, int16_t *y, int16_t *z) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
	// returns current xyz accelerometer values
	// x - accel x return value ptr
	// y - accel y return value ptr
	// z - accel z return value ptr
	filter_p(x_r, x_f, read_x());
 8000f5c:	f7ff ff1e 	bl	8000d9c <read_x>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4913      	ldr	r1, [pc, #76]	; (8000fb4 <get_xyz+0x64>)
 8000f66:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <get_xyz+0x68>)
 8000f68:	f7ff ff66 	bl	8000e38 <filter_p>
	filter_p(y_r, y_f, read_y());
 8000f6c:	f7ff ff30 	bl	8000dd0 <read_y>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	4911      	ldr	r1, [pc, #68]	; (8000fbc <get_xyz+0x6c>)
 8000f76:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <get_xyz+0x70>)
 8000f78:	f7ff ff5e 	bl	8000e38 <filter_p>
	filter_p(z_r, z_f, read_z());
 8000f7c:	f7ff ff42 	bl	8000e04 <read_z>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	490f      	ldr	r1, [pc, #60]	; (8000fc4 <get_xyz+0x74>)
 8000f86:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <get_xyz+0x78>)
 8000f88:	f7ff ff56 	bl	8000e38 <filter_p>
	*x = x_f[0];
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <get_xyz+0x64>)
 8000f8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	801a      	strh	r2, [r3, #0]
	*y = y_f[0];
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <get_xyz+0x6c>)
 8000f98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	801a      	strh	r2, [r3, #0]
	*z = z_f[0];
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <get_xyz+0x74>)
 8000fa2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	801a      	strh	r2, [r3, #0]
//	*x = read_x() - x_offset;
//	*y = read_y() - y_offset;
//	*z = read_z() - z_offset;
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200001b0 	.word	0x200001b0
 8000fb8:	200001a8 	.word	0x200001a8
 8000fbc:	200001c0 	.word	0x200001c0
 8000fc0:	200001b8 	.word	0x200001b8
 8000fc4:	200001d0 	.word	0x200001d0
 8000fc8:	200001c8 	.word	0x200001c8

08000fcc <calculate_encoder_diff>:
#include "wheel.h"

int8_t calculate_encoder_diff(uint32_t prev_pos, uint32_t cur_pos) {
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	// calculates encoder diff
	// prev_pos - previous position of the encoder
	// cur_pos - current position of the encoder
	int diff = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
	if (prev_pos > ENCODER_QUADRANT_3 && cur_pos < ENCODER_QUADRANT) {
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d90c      	bls.n	8000ffe <calculate_encoder_diff+0x32>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d807      	bhi.n	8000ffe <calculate_encoder_diff+0x32>
		// encoder counter overflow from high to low
		diff = 65535 - prev_pos + cur_pos;
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000ff8:	33ff      	adds	r3, #255	; 0xff
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e015      	b.n	800102a <calculate_encoder_diff+0x5e>
	} else if (prev_pos < ENCODER_QUADRANT && cur_pos > ENCODER_QUADRANT_3) {
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8001004:	4293      	cmp	r3, r2
 8001006:	d80c      	bhi.n	8001022 <calculate_encoder_diff+0x56>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 800100e:	4293      	cmp	r3, r2
 8001010:	d907      	bls.n	8001022 <calculate_encoder_diff+0x56>
		// encoder counter overflow from low to high
		diff = -65535 + cur_pos - prev_pos;
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800101c:	3bff      	subs	r3, #255	; 0xff
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	e003      	b.n	800102a <calculate_encoder_diff+0x5e>
	} else {
		// encoder didn't overflow
		diff = cur_pos - prev_pos;
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	60fb      	str	r3, [r7, #12]
	}
	return (int8_t) clamp(INT8_MIN, INT8_MAX, diff);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001030:	db07      	blt.n	8001042 <calculate_encoder_diff+0x76>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b7f      	cmp	r3, #127	; 0x7f
 8001036:	dc02      	bgt.n	800103e <calculate_encoder_diff+0x72>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	e003      	b.n	8001046 <calculate_encoder_diff+0x7a>
 800103e:	237f      	movs	r3, #127	; 0x7f
 8001040:	e001      	b.n	8001046 <calculate_encoder_diff+0x7a>
 8001042:	f06f 037f 	mvn.w	r3, #127	; 0x7f
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <get_wheel_change>:


uint32_t encoder_prev = 0;
uint8_t get_wheel_change(uint32_t encoder_timer_count) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	// returns wheel change -1, 0 or 1 when compared to the last wheel position
	// encoder_timer_count - current wheel encoder timer count
	uint32_t encoder_cur = encoder_timer_count;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	60fb      	str	r3, [r7, #12]
	uint8_t diff = clamp(-1, 1, calculate_encoder_diff(encoder_prev, encoder_cur));
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <get_wheel_change+0x70>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68f9      	ldr	r1, [r7, #12]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ffb0 	bl	8000fcc <calculate_encoder_diff>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	dc09      	bgt.n	8001086 <get_wheel_change+0x32>
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <get_wheel_change+0x70>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68f9      	ldr	r1, [r7, #12]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ffa7 	bl	8000fcc <calculate_encoder_diff>
 800107e:	4603      	mov	r3, r0
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	db13      	blt.n	80010ae <get_wheel_change+0x5a>
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <get_wheel_change+0x70>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68f9      	ldr	r1, [r7, #12]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff9d 	bl	8000fcc <calculate_encoder_diff>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	dc08      	bgt.n	80010aa <get_wheel_change+0x56>
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <get_wheel_change+0x70>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68f9      	ldr	r1, [r7, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff94 	bl	8000fcc <calculate_encoder_diff>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	e002      	b.n	80010b0 <get_wheel_change+0x5c>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <get_wheel_change+0x5c>
 80010ae:	23ff      	movs	r3, #255	; 0xff
 80010b0:	72fb      	strb	r3, [r7, #11]
	encoder_prev = encoder_cur;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <get_wheel_change+0x70>)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6013      	str	r3, [r2, #0]
	return diff;
 80010b8:	7afb      	ldrb	r3, [r7, #11]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001d8 	.word	0x200001d8

080010c8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4313      	orrs	r3, r2
 80010de:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ec:	68fb      	ldr	r3, [r7, #12]
}
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	2002      	movs	r0, #2
 8001112:	f7ff ffd9 	bl	80010c8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2001      	movs	r0, #1
 8001118:	f7ff ffd6 	bl	80010c8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800111c:	2010      	movs	r0, #16
 800111e:	f7ff ffd3 	bl	80010c8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001128:	4825      	ldr	r0, [pc, #148]	; (80011c0 <MX_GPIO_Init+0xc4>)
 800112a:	f001 f95b 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2110      	movs	r1, #16
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f001 f955 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800113a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4619      	mov	r1, r3
 8001150:	481b      	ldr	r0, [pc, #108]	; (80011c0 <MX_GPIO_Init+0xc4>)
 8001152:	f000 ffc7 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001156:	2310      	movs	r3, #16
 8001158:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116e:	f000 ffb9 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_DOWN_Pin|RIGHT_UP_Pin|LEFT_DOWN_Pin|B4_DOWN_Pin
 8001172:	23fb      	movs	r3, #251	; 0xfb
 8001174:	607b      	str	r3, [r7, #4]
                          |B4_UP_Pin|B5_DOWN_Pin|B5_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	480f      	ldr	r0, [pc, #60]	; (80011c0 <MX_GPIO_Init+0xc4>)
 8001184:	f000 ffae 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIDDLE_DOWN_Pin;
 8001188:	2310      	movs	r3, #16
 800118a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MIDDLE_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	480a      	ldr	r0, [pc, #40]	; (80011c4 <MX_GPIO_Init+0xc8>)
 800119a:	f000 ffa3 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MIDDLE_UP_Pin|LEFT_UP_Pin;
 800119e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80011a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	f000 ff96 	bl	80020e4 <HAL_GPIO_Init>

}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48001000 	.word	0x48001000

080011c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	b09c      	sub	sp, #112	; 0x70
 80011cc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011ce:	f000 fdcf 	bl	8001d70 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011d2:	f000 fb01 	bl	80017d8 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80011d6:	f000 fb6b 	bl	80018b0 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011da:	f7ff ff8f 	bl	80010fc <MX_GPIO_Init>
	MX_USB_Device_Init();
 80011de:	f009 f873 	bl	800a2c8 <MX_USB_Device_Init>
	MX_SPI1_Init();
 80011e2:	f000 fbb9 	bl	8001958 <MX_SPI1_Init>
	MX_TIM1_Init();
 80011e6:	f000 fd01 	bl	8001bec <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	// start encoder timer
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80011ea:	2104      	movs	r1, #4
 80011ec:	48a2      	ldr	r0, [pc, #648]	; (8001478 <main+0x2b0>)
 80011ee:	f005 fbad 	bl	800694c <HAL_TIM_Encoder_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	imu_setup();
 80011f2:	f7ff fd1b 	bl	8000c2c <imu_setup>

	double avg_x = 0;
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double avg_y = 0;
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint8_t i = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#define PREV_C 10
	int16_t prev_x[PREV_C] = { 0 };
 8001214:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
	int16_t prev_y[PREV_C] = { 0 };
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
#define ACCEL_DIV 20.0
	while (1) {
		// buttons
		update_buttons();
 8001234:	f7ff fc20 	bl	8000a78 <update_buttons>
		report.buttons = (left_down << 0) | (right_down << 1)
 8001238:	4b90      	ldr	r3, [pc, #576]	; (800147c <main+0x2b4>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	b25a      	sxtb	r2, r3
 8001240:	4b8f      	ldr	r3, [pc, #572]	; (8001480 <main+0x2b8>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b25b      	sxtb	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b25a      	sxtb	r2, r3
				| (middle_down << 2) | (b5_down << 3) | (b4_down << 4);
 800124a:	4b8e      	ldr	r3, [pc, #568]	; (8001484 <main+0x2bc>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	b25b      	sxtb	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	b25a      	sxtb	r2, r3
 8001256:	4b8c      	ldr	r3, [pc, #560]	; (8001488 <main+0x2c0>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	b25b      	sxtb	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b25a      	sxtb	r2, r3
 8001262:	4b8a      	ldr	r3, [pc, #552]	; (800148c <main+0x2c4>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	b25b      	sxtb	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	b25b      	sxtb	r3, r3
 800126e:	b2da      	uxtb	r2, r3
		report.buttons = (left_down << 0) | (right_down << 1)
 8001270:	4b87      	ldr	r3, [pc, #540]	; (8001490 <main+0x2c8>)
 8001272:	701a      	strb	r2, [r3, #0]

		// wheel
		report.wheel = get_wheel_change(TIM1->CNT);
 8001274:	4b87      	ldr	r3, [pc, #540]	; (8001494 <main+0x2cc>)
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff feeb 	bl	8001054 <get_wheel_change>
 800127e:	4603      	mov	r3, r0
 8001280:	b25a      	sxtb	r2, r3
 8001282:	4b83      	ldr	r3, [pc, #524]	; (8001490 <main+0x2c8>)
 8001284:	70da      	strb	r2, [r3, #3]

		// mouse x, y
//		get_mouse_xy(&report.x, &report.y);

		get_xyz(&accel.x, &accel.y, &accel.z);
 8001286:	4a84      	ldr	r2, [pc, #528]	; (8001498 <main+0x2d0>)
 8001288:	4984      	ldr	r1, [pc, #528]	; (800149c <main+0x2d4>)
 800128a:	4885      	ldr	r0, [pc, #532]	; (80014a0 <main+0x2d8>)
 800128c:	f7ff fe60 	bl	8000f50 <get_xyz>

		if (i == 0) {
 8001290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001294:	2b00      	cmp	r3, #0
 8001296:	d119      	bne.n	80012cc <main+0x104>
			avg_x = accel.x;
 8001298:	4b81      	ldr	r3, [pc, #516]	; (80014a0 <main+0x2d8>)
 800129a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f8be 	bl	8000420 <__aeabi_i2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			avg_y = accel.y;
 80012ac:	4b7c      	ldr	r3, [pc, #496]	; (80014a0 <main+0x2d8>)
 80012ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f8b4 	bl	8000420 <__aeabi_i2d>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			i++;
 80012c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80012c4:	3301      	adds	r3, #1
 80012c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80012ca:	e03f      	b.n	800134c <main+0x184>
		} else {
			avg_x = 0.5 * accel.x + (1 - 0.5) * avg_x;
 80012cc:	4b74      	ldr	r3, [pc, #464]	; (80014a0 <main+0x2d8>)
 80012ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f8a4 	bl	8000420 <__aeabi_i2d>
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b71      	ldr	r3, [pc, #452]	; (80014a4 <main+0x2dc>)
 80012de:	f7ff f909 	bl	80004f4 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4614      	mov	r4, r2
 80012e8:	461d      	mov	r5, r3
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4b6d      	ldr	r3, [pc, #436]	; (80014a4 <main+0x2dc>)
 80012f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80012f4:	f7ff f8fe 	bl	80004f4 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4620      	mov	r0, r4
 80012fe:	4629      	mov	r1, r5
 8001300:	f7fe ff42 	bl	8000188 <__adddf3>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			avg_y = 0.5 * accel.y + (1 - 0.5) * avg_y;
 800130c:	4b64      	ldr	r3, [pc, #400]	; (80014a0 <main+0x2d8>)
 800130e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f884 	bl	8000420 <__aeabi_i2d>
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b61      	ldr	r3, [pc, #388]	; (80014a4 <main+0x2dc>)
 800131e:	f7ff f8e9 	bl	80004f4 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4614      	mov	r4, r2
 8001328:	461d      	mov	r5, r3
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b5d      	ldr	r3, [pc, #372]	; (80014a4 <main+0x2dc>)
 8001330:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001334:	f7ff f8de 	bl	80004f4 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4620      	mov	r0, r4
 800133e:	4629      	mov	r1, r5
 8001340:	f7fe ff22 	bl	8000188 <__adddf3>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		}

		for (int l = PREV_C - 2; l >= 0; l--) {
 800134c:	2308      	movs	r3, #8
 800134e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001350:	e022      	b.n	8001398 <main+0x1d0>
			prev_x[l + 1] = prev_x[l];
 8001352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800135e:	440b      	add	r3, r1
 8001360:	f933 1c38 	ldrsh.w	r1, [r3, #-56]
 8001364:	0053      	lsls	r3, r2, #1
 8001366:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800136a:	4413      	add	r3, r2
 800136c:	460a      	mov	r2, r1
 800136e:	f823 2c38 	strh.w	r2, [r3, #-56]
			prev_y[l + 1] = prev_y[l];
 8001372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800137e:	440b      	add	r3, r1
 8001380:	f933 1c4c 	ldrsh.w	r1, [r3, #-76]
 8001384:	0053      	lsls	r3, r2, #1
 8001386:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800138a:	4413      	add	r3, r2
 800138c:	460a      	mov	r2, r1
 800138e:	f823 2c4c 	strh.w	r2, [r3, #-76]
		for (int l = PREV_C - 2; l >= 0; l--) {
 8001392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001394:	3b01      	subs	r3, #1
 8001396:	65bb      	str	r3, [r7, #88]	; 0x58
 8001398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800139a:	2b00      	cmp	r3, #0
 800139c:	dad9      	bge.n	8001352 <main+0x18a>
		}
		prev_x[0] = avg_x;
 800139e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80013a2:	f7ff fb41 	bl	8000a28 <__aeabi_d2iz>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	873b      	strh	r3, [r7, #56]	; 0x38
		prev_y[0] = avg_y;
 80013ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80013b0:	f7ff fb3a 	bl	8000a28 <__aeabi_d2iz>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		int x_reset = 1;
 80013ba:	2301      	movs	r3, #1
 80013bc:	657b      	str	r3, [r7, #84]	; 0x54
		int y_reset = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	653b      	str	r3, [r7, #80]	; 0x50
		for (int k = 0; k < PREV_C; k++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013c6:	e020      	b.n	800140a <main+0x242>
			if (abs(prev_x[k]) > 5) {
 80013c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80013d0:	4413      	add	r3, r2
 80013d2:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	bfb8      	it	lt
 80013da:	425b      	neglt	r3, r3
 80013dc:	b29b      	uxth	r3, r3
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d901      	bls.n	80013e6 <main+0x21e>
				x_reset = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	657b      	str	r3, [r7, #84]	; 0x54
			}
			if (abs(prev_y[k]) > 5) {
 80013e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80013ee:	4413      	add	r3, r2
 80013f0:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bfb8      	it	lt
 80013f8:	425b      	neglt	r3, r3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2b05      	cmp	r3, #5
 80013fe:	d901      	bls.n	8001404 <main+0x23c>
				y_reset = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	653b      	str	r3, [r7, #80]	; 0x50
		for (int k = 0; k < PREV_C; k++) {
 8001404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001406:	3301      	adds	r3, #1
 8001408:	64fb      	str	r3, [r7, #76]	; 0x4c
 800140a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800140c:	2b09      	cmp	r3, #9
 800140e:	dddb      	ble.n	80013c8 <main+0x200>
			}
		}
		if (x_reset) {
 8001410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <main+0x254>
			report.x = 0;
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <main+0x2c8>)
 8001418:	2200      	movs	r2, #0
 800141a:	705a      	strb	r2, [r3, #1]
		}
		if (y_reset) {
 800141c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <main+0x260>
			report.y = 0;
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <main+0x2c8>)
 8001424:	2200      	movs	r2, #0
 8001426:	709a      	strb	r2, [r3, #2]
		}
		if (report.x == 0) {
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <main+0x2c8>)
 800142a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d15f      	bne.n	80014f2 <main+0x32a>
			if (avg_x < -25) {
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <main+0x2e0>)
 8001438:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800143c:	f7ff facc 	bl	80009d8 <__aeabi_dcmplt>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d034      	beq.n	80014b0 <main+0x2e8>
				report.x = -avg_x / ACCEL_DIV;
 8001446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800144c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <main+0x2e4>)
 8001458:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800145c:	f7ff f974 	bl	8000748 <__aeabi_ddiv>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fade 	bl	8000a28 <__aeabi_d2iz>
 800146c:	4603      	mov	r3, r0
 800146e:	b25a      	sxtb	r2, r3
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <main+0x2c8>)
 8001472:	705a      	strb	r2, [r3, #1]
 8001474:	e03d      	b.n	80014f2 <main+0x32a>
 8001476:	bf00      	nop
 8001478:	20000270 	.word	0x20000270
 800147c:	200001a2 	.word	0x200001a2
 8001480:	200001a0 	.word	0x200001a0
 8001484:	200001a1 	.word	0x200001a1
 8001488:	200001a4 	.word	0x200001a4
 800148c:	200001a3 	.word	0x200001a3
 8001490:	20000208 	.word	0x20000208
 8001494:	40012c00 	.word	0x40012c00
 8001498:	200001fc 	.word	0x200001fc
 800149c:	200001fa 	.word	0x200001fa
 80014a0:	200001f8 	.word	0x200001f8
 80014a4:	3fe00000 	.word	0x3fe00000
 80014a8:	c0390000 	.word	0xc0390000
 80014ac:	40340000 	.word	0x40340000
			} else if (avg_x > 25) {
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <main+0x46c>)
 80014b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80014ba:	f7ff faab 	bl	8000a14 <__aeabi_dcmpgt>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d016      	beq.n	80014f2 <main+0x32a>
				report.x = -avg_x / ACCEL_DIV;
 80014c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	4b58      	ldr	r3, [pc, #352]	; (8001638 <main+0x470>)
 80014d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014da:	f7ff f935 	bl	8000748 <__aeabi_ddiv>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f7ff fa9f 	bl	8000a28 <__aeabi_d2iz>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b25a      	sxtb	r2, r3
 80014ee:	4b53      	ldr	r3, [pc, #332]	; (800163c <main+0x474>)
 80014f0:	705a      	strb	r2, [r3, #1]
			}
		}
		if (report.x > 0) {
 80014f2:	4b52      	ldr	r3, [pc, #328]	; (800163c <main+0x474>)
 80014f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	dd3a      	ble.n	8001572 <main+0x3aa>
			if (avg_x < -25) {
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	4b4f      	ldr	r3, [pc, #316]	; (8001640 <main+0x478>)
 8001502:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001506:	f7ff fa67 	bl	80009d8 <__aeabi_dcmplt>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d030      	beq.n	8001572 <main+0x3aa>
				if (abs(avg_x / ACCEL_DIV) > abs(report.x)) {
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	4b48      	ldr	r3, [pc, #288]	; (8001638 <main+0x470>)
 8001516:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800151a:	f7ff f915 	bl	8000748 <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fa7f 	bl	8000a28 <__aeabi_d2iz>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	bfb8      	it	lt
 8001530:	425b      	neglt	r3, r3
 8001532:	4a42      	ldr	r2, [pc, #264]	; (800163c <main+0x474>)
 8001534:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8001538:	2a00      	cmp	r2, #0
 800153a:	bfb8      	it	lt
 800153c:	4252      	neglt	r2, r2
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	4293      	cmp	r3, r2
 8001542:	dd16      	ble.n	8001572 <main+0x3aa>
					report.x = -avg_x / ACCEL_DIV;
 8001544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800154a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	4b38      	ldr	r3, [pc, #224]	; (8001638 <main+0x470>)
 8001556:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800155a:	f7ff f8f5 	bl	8000748 <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fa5f 	bl	8000a28 <__aeabi_d2iz>
 800156a:	4603      	mov	r3, r0
 800156c:	b25a      	sxtb	r2, r3
 800156e:	4b33      	ldr	r3, [pc, #204]	; (800163c <main+0x474>)
 8001570:	705a      	strb	r2, [r3, #1]
				}
			}
		}
		if (report.x < 0) {
 8001572:	4b32      	ldr	r3, [pc, #200]	; (800163c <main+0x474>)
 8001574:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001578:	2b00      	cmp	r3, #0
 800157a:	da3a      	bge.n	80015f2 <main+0x42a>
			if (avg_x > 25) {
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <main+0x46c>)
 8001582:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001586:	f7ff fa45 	bl	8000a14 <__aeabi_dcmpgt>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d030      	beq.n	80015f2 <main+0x42a>
				if (abs(avg_x / ACCEL_DIV) > abs(report.x)) {
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b28      	ldr	r3, [pc, #160]	; (8001638 <main+0x470>)
 8001596:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800159a:	f7ff f8d5 	bl	8000748 <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fa3f 	bl	8000a28 <__aeabi_d2iz>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bfb8      	it	lt
 80015b0:	425b      	neglt	r3, r3
 80015b2:	4a22      	ldr	r2, [pc, #136]	; (800163c <main+0x474>)
 80015b4:	f992 2001 	ldrsb.w	r2, [r2, #1]
 80015b8:	2a00      	cmp	r2, #0
 80015ba:	bfb8      	it	lt
 80015bc:	4252      	neglt	r2, r2
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	4293      	cmp	r3, r2
 80015c2:	dd16      	ble.n	80015f2 <main+0x42a>
					report.x = -avg_x / ACCEL_DIV;
 80015c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <main+0x470>)
 80015d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015da:	f7ff f8b5 	bl	8000748 <__aeabi_ddiv>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff fa1f 	bl	8000a28 <__aeabi_d2iz>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <main+0x474>)
 80015f0:	705a      	strb	r2, [r3, #1]
				}
			}
		}

		if (report.y == 0) {
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <main+0x474>)
 80015f4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d13e      	bne.n	800167a <main+0x4b2>
			if (avg_y < -25) {
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <main+0x478>)
 8001602:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001606:	f7ff f9e7 	bl	80009d8 <__aeabi_dcmplt>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d019      	beq.n	8001644 <main+0x47c>
				report.y = avg_y / ACCEL_DIV;
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <main+0x470>)
 8001616:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800161a:	f7ff f895 	bl	8000748 <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff f9ff 	bl	8000a28 <__aeabi_d2iz>
 800162a:	4603      	mov	r3, r0
 800162c:	b25a      	sxtb	r2, r3
 800162e:	4b03      	ldr	r3, [pc, #12]	; (800163c <main+0x474>)
 8001630:	709a      	strb	r2, [r3, #2]
 8001632:	e022      	b.n	800167a <main+0x4b2>
 8001634:	40390000 	.word	0x40390000
 8001638:	40340000 	.word	0x40340000
 800163c:	20000208 	.word	0x20000208
 8001640:	c0390000 	.word	0xc0390000
			} else if (avg_y > 25) {
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	4b5c      	ldr	r3, [pc, #368]	; (80017bc <main+0x5f4>)
 800164a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800164e:	f7ff f9e1 	bl	8000a14 <__aeabi_dcmpgt>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d010      	beq.n	800167a <main+0x4b2>
				report.y = avg_y / ACCEL_DIV;
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b58      	ldr	r3, [pc, #352]	; (80017c0 <main+0x5f8>)
 800165e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001662:	f7ff f871 	bl	8000748 <__aeabi_ddiv>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff f9db 	bl	8000a28 <__aeabi_d2iz>
 8001672:	4603      	mov	r3, r0
 8001674:	b25a      	sxtb	r2, r3
 8001676:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <main+0x5fc>)
 8001678:	709a      	strb	r2, [r3, #2]
			}
		}
		if (report.y < 0 || report.y > 0) {
 800167a:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <main+0x5fc>)
 800167c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db04      	blt.n	800168e <main+0x4c6>
 8001684:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <main+0x5fc>)
 8001686:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800168a:	2b00      	cmp	r3, #0
 800168c:	dd34      	ble.n	80016f8 <main+0x530>
			if (avg_y < -25) {
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	4b4d      	ldr	r3, [pc, #308]	; (80017c8 <main+0x600>)
 8001694:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001698:	f7ff f99e 	bl	80009d8 <__aeabi_dcmplt>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d02a      	beq.n	80016f8 <main+0x530>
				if (abs(avg_y / ACCEL_DIV) > abs(report.y)) {
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <main+0x5f8>)
 80016a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016ac:	f7ff f84c 	bl	8000748 <__aeabi_ddiv>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff f9b6 	bl	8000a28 <__aeabi_d2iz>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bfb8      	it	lt
 80016c2:	425b      	neglt	r3, r3
 80016c4:	4a3f      	ldr	r2, [pc, #252]	; (80017c4 <main+0x5fc>)
 80016c6:	f992 2002 	ldrsb.w	r2, [r2, #2]
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	bfb8      	it	lt
 80016ce:	4252      	neglt	r2, r2
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	4293      	cmp	r3, r2
 80016d4:	dd10      	ble.n	80016f8 <main+0x530>
					report.y = avg_y / ACCEL_DIV;
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <main+0x5f8>)
 80016dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016e0:	f7ff f832 	bl	8000748 <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff f99c 	bl	8000a28 <__aeabi_d2iz>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b25a      	sxtb	r2, r3
 80016f4:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <main+0x5fc>)
 80016f6:	709a      	strb	r2, [r3, #2]
				}
			}
		}
		if (report.y > 0) {
 80016f8:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <main+0x5fc>)
 80016fa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	dd34      	ble.n	800176c <main+0x5a4>
			if (avg_y > 25) {
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <main+0x5f4>)
 8001708:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800170c:	f7ff f982 	bl	8000a14 <__aeabi_dcmpgt>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d02a      	beq.n	800176c <main+0x5a4>
				if (abs(avg_y / ACCEL_DIV) > abs(report.y)) {
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <main+0x5f8>)
 800171c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001720:	f7ff f812 	bl	8000748 <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f7ff f97c 	bl	8000a28 <__aeabi_d2iz>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	bfb8      	it	lt
 8001736:	425b      	neglt	r3, r3
 8001738:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <main+0x5fc>)
 800173a:	f992 2002 	ldrsb.w	r2, [r2, #2]
 800173e:	2a00      	cmp	r2, #0
 8001740:	bfb8      	it	lt
 8001742:	4252      	neglt	r2, r2
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	4293      	cmp	r3, r2
 8001748:	dd10      	ble.n	800176c <main+0x5a4>
					report.y = avg_y / ACCEL_DIV;
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <main+0x5f8>)
 8001750:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001754:	f7fe fff8 	bl	8000748 <__aeabi_ddiv>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff f962 	bl	8000a28 <__aeabi_d2iz>
 8001764:	4603      	mov	r3, r0
 8001766:	b25a      	sxtb	r2, r3
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <main+0x5fc>)
 800176a:	709a      	strb	r2, [r3, #2]
				}
			}
		}

		feedback.x = accel.x;
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <main+0x604>)
 800176e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <main+0x608>)
 8001774:	801a      	strh	r2, [r3, #0]
		feedback.y = avg_x;
 8001776:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800177a:	f7ff f955 	bl	8000a28 <__aeabi_d2iz>
 800177e:	4603      	mov	r3, r0
 8001780:	b21a      	sxth	r2, r3
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <main+0x608>)
 8001784:	805a      	strh	r2, [r3, #2]
		feedback.z = report.x * 100;
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <main+0x5fc>)
 8001788:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800178c:	b29b      	uxth	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	4413      	add	r3, r2
 8001794:	461a      	mov	r2, r3
 8001796:	0091      	lsls	r1, r2, #2
 8001798:	461a      	mov	r2, r3
 800179a:	460b      	mov	r3, r1
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <main+0x608>)
 80017a6:	809a      	strh	r2, [r3, #4]
//		feedback.z = avg_x;
//		feedback.x = x_reset;

		USBD_HID_SendReport(&hUsbDeviceFS, &report, 4);
 80017a8:	2204      	movs	r2, #4
 80017aa:	4906      	ldr	r1, [pc, #24]	; (80017c4 <main+0x5fc>)
 80017ac:	4809      	ldr	r0, [pc, #36]	; (80017d4 <main+0x60c>)
 80017ae:	f007 fc0f 	bl	8008fd0 <USBD_HID_SendReport>
//		CDC_Transmit_FS(&feedback, sizeof(feedback));
		HAL_Delay(1);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f000 fb62 	bl	8001e7c <HAL_Delay>
	while (1) {
 80017b8:	e53c      	b.n	8001234 <main+0x6c>
 80017ba:	bf00      	nop
 80017bc:	40390000 	.word	0x40390000
 80017c0:	40340000 	.word	0x40340000
 80017c4:	20000208 	.word	0x20000208
 80017c8:	c0390000 	.word	0xc0390000
 80017cc:	200001f8 	.word	0x200001f8
 80017d0:	20000200 	.word	0x20000200
 80017d4:	200002c0 	.word	0x200002c0

080017d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b09a      	sub	sp, #104	; 0x68
 80017dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017de:	f107 0320 	add.w	r3, r7, #32
 80017e2:	2248      	movs	r2, #72	; 0x48
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f009 f9fe 	bl	800abe8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	615a      	str	r2, [r3, #20]
 80017fc:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017fe:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <SystemClock_Config+0xd4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001806:	4a29      	ldr	r2, [pc, #164]	; (80018ac <SystemClock_Config+0xd4>)
 8001808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <SystemClock_Config+0xd4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800181a:	2326      	movs	r3, #38	; 0x26
 800181c:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001828:	2301      	movs	r3, #1
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800182c:	2340      	movs	r3, #64	; 0x40
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001830:	2300      	movs	r3, #0
 8001832:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001834:	2360      	movs	r3, #96	; 0x60
 8001836:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001838:	2302      	movs	r3, #2
 800183a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800183c:	2301      	movs	r3, #1
 800183e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 32;
 8001844:	2320      	movs	r3, #32
 8001846:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800184c:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800184e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001852:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001854:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001858:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	4618      	mov	r0, r3
 8001860:	f002 fe80 	bl	8004564 <HAL_RCC_OscConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <SystemClock_Config+0x96>
		Error_Handler();
 800186a:	f000 f83e 	bl	80018ea <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 800186e:	236f      	movs	r3, #111	; 0x6f
 8001870:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001872:	2303      	movs	r3, #3
 8001874:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2103      	movs	r1, #3
 800188e:	4618      	mov	r0, r3
 8001890:	f003 f9f4 	bl	8004c7c <HAL_RCC_ClockConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0xc6>
		Error_Handler();
 800189a:	f000 f826 	bl	80018ea <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 800189e:	f003 ff87 	bl	80057b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80018a2:	bf00      	nop
 80018a4:	3768      	adds	r7, #104	; 0x68
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	58000400 	.word	0x58000400

080018b0 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b094      	sub	sp, #80	; 0x50
 80018b4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80018b6:	463b      	mov	r3, r7
 80018b8:	2250      	movs	r2, #80	; 0x50
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f009 f993 	bl	800abe8 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80018c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c6:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80018c8:	2300      	movs	r3, #0
 80018ca:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80018cc:	2310      	movs	r3, #16
 80018ce:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80018d0:	463b      	mov	r3, r7
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 fdf6 	bl	80054c4 <HAL_RCCEx_PeriphCLKConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <PeriphCommonClock_Config+0x32>
		Error_Handler();
 80018de:	f000 f804 	bl	80018ea <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 80018e2:	bf00      	nop
 80018e4:	3750      	adds	r7, #80	; 0x50
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ee:	b672      	cpsid	i
}
 80018f0:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018f2:	e7fe      	b.n	80018f2 <Error_Handler+0x8>

080018f4 <LL_AHB2_GRP1_EnableClock>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001900:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4313      	orrs	r3, r2
 800190a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800190c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001910:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001918:	68fb      	ldr	r3, [r7, #12]
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001932:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4313      	orrs	r3, r2
 800193c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001942:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4013      	ands	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <MX_SPI1_Init+0x74>)
 800195e:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <MX_SPI1_Init+0x78>)
 8001960:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <MX_SPI1_Init+0x74>)
 8001964:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001968:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <MX_SPI1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <MX_SPI1_Init+0x74>)
 8001972:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001976:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <MX_SPI1_Init+0x74>)
 800197a:	2202      	movs	r2, #2
 800197c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <MX_SPI1_Init+0x74>)
 8001980:	2201      	movs	r2, #1
 8001982:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_SPI1_Init+0x74>)
 8001986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_SPI1_Init+0x74>)
 800198e:	2210      	movs	r2, #16
 8001990:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_SPI1_Init+0x74>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_SPI1_Init+0x74>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_SPI1_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_SPI1_Init+0x74>)
 80019a6:	2207      	movs	r2, #7
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_SPI1_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_SPI1_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_SPI1_Init+0x74>)
 80019b8:	f004 f811 	bl	80059de <HAL_SPI_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019c2:	f7ff ff92 	bl	80018ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000020c 	.word	0x2000020c
 80019d0:	40013000 	.word	0x40013000

080019d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0f      	ldr	r2, [pc, #60]	; (8001a30 <HAL_SPI_MspInit+0x5c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d117      	bne.n	8001a26 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019fa:	f7ff ff94 	bl	8001926 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff ff78 	bl	80018f4 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001a04:	23c2      	movs	r3, #194	; 0xc2
 8001a06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a14:	2305      	movs	r3, #5
 8001a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a22:	f000 fb5f 	bl	80020e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a26:	bf00      	nop
 8001a28:	3720      	adds	r7, #32
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40013000 	.word	0x40013000

08001a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	f06f 000b 	mvn.w	r0, #11
 8001a40:	f000 fb1b 	bl	800207a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2101      	movs	r1, #1
 8001a48:	f06f 000a 	mvn.w	r0, #10
 8001a4c:	f000 fb15 	bl	800207a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2101      	movs	r1, #1
 8001a54:	f06f 0009 	mvn.w	r0, #9
 8001a58:	f000 fb0f 	bl	800207a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2101      	movs	r1, #1
 8001a60:	f06f 0004 	mvn.w	r0, #4
 8001a64:	f000 fb09 	bl	800207a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	f06f 0003 	mvn.w	r0, #3
 8001a70:	f000 fb03 	bl	800207a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2101      	movs	r1, #1
 8001a78:	f06f 0001 	mvn.w	r0, #1
 8001a7c:	f000 fafd 	bl	800207a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <NMI_Handler+0x4>

08001a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <MemManage_Handler+0x4>

08001a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <BusFault_Handler+0x4>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <UsageFault_Handler+0x4>

08001aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad0:	f000 f9a8 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <USB_LP_IRQHandler+0x10>)
 8001ade:	f000 fda0 	bl	8002622 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000790 	.word	0x20000790

08001aec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <SystemInit+0x90>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af6:	4a21      	ldr	r2, [pc, #132]	; (8001b7c <SystemInit+0x90>)
 8001af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b14:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001b18:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <SystemInit+0x94>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b36:	f023 0305 	bic.w	r3, r3, #5
 8001b3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <SystemInit+0x98>)
 8001b58:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00
 8001b80:	faf6fefb 	.word	0xfaf6fefb
 8001b84:	22041000 	.word	0x22041000

08001b88 <LL_AHB2_GRP1_EnableClock>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bac:	68fb      	ldr	r3, [r7, #12]
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_APB2_GRP1_EnableClock>:
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	2224      	movs	r2, #36	; 0x24
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f008 fff4 	bl	800abe8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	463b      	mov	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <MX_TIM1_Init+0xac>)
 8001c0c:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <MX_TIM1_Init+0xb0>)
 8001c0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <MX_TIM1_Init+0xac>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <MX_TIM1_Init+0xac>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <MX_TIM1_Init+0xac>)
 8001c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <MX_TIM1_Init+0xac>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_TIM1_Init+0xac>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_TIM1_Init+0xac>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <MX_TIM1_Init+0xac>)
 8001c62:	f004 fdcd 	bl	8006800 <HAL_TIM_Encoder_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001c6c:	f7ff fe3d 	bl	80018ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_TIM1_Init+0xac>)
 8001c82:	f004 ff7b 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001c8c:	f7ff fe2d 	bl	80018ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	3730      	adds	r7, #48	; 0x30
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000270 	.word	0x20000270
 8001c9c:	40012c00 	.word	0x40012c00

08001ca0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <HAL_TIM_Encoder_MspInit+0x5c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d118      	bne.n	8001cf4 <HAL_TIM_Encoder_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cc2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001cc6:	f7ff ff78 	bl	8001bba <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7ff ff5c 	bl	8001b88 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	4619      	mov	r1, r3
 8001cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf0:	f000 f9f8 	bl	80020e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40012c00 	.word	0x40012c00

08001d00 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001d00:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d02:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d04:	3304      	adds	r3, #4

08001d06 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d06:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d08:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001d0a:	d3f9      	bcc.n	8001d00 <CopyDataInit>
  bx lr
 8001d0c:	4770      	bx	lr

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001d0e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001d10:	3004      	adds	r0, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001d12:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>
  bx lr
 8001d16:	4770      	bx	lr

08001d18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d18:	480c      	ldr	r0, [pc, #48]	; (8001d4c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001d1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d1c:	f7ff fee6 	bl	8001aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <LoopForever+0x8>)
 8001d22:	490c      	ldr	r1, [pc, #48]	; (8001d54 <LoopForever+0xc>)
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <LoopForever+0x10>)
 8001d26:	2300      	movs	r3, #0
 8001d28:	f7ff ffed 	bl	8001d06 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001d2c:	480b      	ldr	r0, [pc, #44]	; (8001d5c <LoopForever+0x14>)
 8001d2e:	490c      	ldr	r1, [pc, #48]	; (8001d60 <LoopForever+0x18>)
 8001d30:	2300      	movs	r3, #0
 8001d32:	f7ff ffee 	bl	8001d12 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001d36:	480b      	ldr	r0, [pc, #44]	; (8001d64 <LoopForever+0x1c>)
 8001d38:	490b      	ldr	r1, [pc, #44]	; (8001d68 <LoopForever+0x20>)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f7ff ffe9 	bl	8001d12 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d40:	f008 ff2e 	bl	800aba0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001d44:	f7ff fa40 	bl	80011c8 <main>

08001d48 <LoopForever>:

LoopForever:
  b LoopForever
 8001d48:	e7fe      	b.n	8001d48 <LoopForever>
 8001d4a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001d4c:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8001d50:	20000004 	.word	0x20000004
 8001d54:	20000184 	.word	0x20000184
 8001d58:	0800ad0c 	.word	0x0800ad0c
  INIT_BSS _sbss, _ebss
 8001d5c:	20000184 	.word	0x20000184
 8001d60:	20000a84 	.word	0x20000a84
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001d64:	20030000 	.word	0x20030000
 8001d68:	20030000 	.word	0x20030000

08001d6c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d6c:	e7fe      	b.n	8001d6c <ADC1_IRQHandler>
	...

08001d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_Init+0x3c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <HAL_Init+0x3c>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d86:	2003      	movs	r0, #3
 8001d88:	f000 f96c 	bl	8002064 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f000 f80f 	bl	8001db0 <HAL_InitTick>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	e001      	b.n	8001da2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d9e:	f7ff fe49 	bl	8001a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001da2:	79fb      	ldrb	r3, [r7, #7]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	58004000 	.word	0x58004000

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_InitTick+0x6c>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d024      	beq.n	8001e0e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dc4:	f003 f906 	bl	8004fd4 <HAL_RCC_GetHCLKFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_InitTick+0x6c>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 f974 	bl	80020ca <HAL_SYSTICK_Config>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10f      	bne.n	8001e08 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b0f      	cmp	r3, #15
 8001dec:	d809      	bhi.n	8001e02 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dee:	2200      	movs	r2, #0
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	f04f 30ff 	mov.w	r0, #4294967295
 8001df6:	f000 f940 	bl	800207a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dfa:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <HAL_InitTick+0x70>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e007      	b.n	8001e12 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e004      	b.n	8001e12 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e001      	b.n	8001e12 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000024 	.word	0x20000024
 8001e20:	20000020 	.word	0x20000020

08001e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x20>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x24>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_IncTick+0x24>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000024 	.word	0x20000024
 8001e48:	200002bc 	.word	0x200002bc

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200002bc 	.word	0x200002bc

08001e64 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_GetTickPrio+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000020 	.word	0x20000020

08001e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff ffe2 	bl	8001e4c <HAL_GetTick>
 8001e88:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d005      	beq.n	8001ea2 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_Delay+0x44>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001ea2:	bf00      	nop
 8001ea4:	f7ff ffd2 	bl	8001e4c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8f7      	bhi.n	8001ea4 <HAL_Delay+0x28>
    {
    }
  }
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000024 	.word	0x20000024

08001ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db0b      	blt.n	8001f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4907      	ldr	r1, [pc, #28]	; (8001f60 <__NVIC_EnableIRQ+0x38>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2001      	movs	r0, #1
 8001f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	db0a      	blt.n	8001f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	490c      	ldr	r1, [pc, #48]	; (8001fb0 <__NVIC_SetPriority+0x4c>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	440b      	add	r3, r1
 8001f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f8c:	e00a      	b.n	8001fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4908      	ldr	r1, [pc, #32]	; (8001fb4 <__NVIC_SetPriority+0x50>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	761a      	strb	r2, [r3, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f1c3 0307 	rsb	r3, r3, #7
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	bf28      	it	cs
 8001fd6:	2304      	movcs	r3, #4
 8001fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d902      	bls.n	8001fe8 <NVIC_EncodePriority+0x30>
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3b03      	subs	r3, #3
 8001fe6:	e000      	b.n	8001fea <NVIC_EncodePriority+0x32>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002000:	f04f 31ff 	mov.w	r1, #4294967295
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43d9      	mvns	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	4313      	orrs	r3, r2
         );
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002030:	d301      	bcc.n	8002036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002032:	2301      	movs	r3, #1
 8002034:	e00f      	b.n	8002056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <SysTick_Config+0x40>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203e:	210f      	movs	r1, #15
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f7ff ff8e 	bl	8001f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <SysTick_Config+0x40>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204e:	4b04      	ldr	r3, [pc, #16]	; (8002060 <SysTick_Config+0x40>)
 8002050:	2207      	movs	r2, #7
 8002052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000e010 	.word	0xe000e010

08002064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff29 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002088:	f7ff ff40 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 800208c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7ff ff90 	bl	8001fb8 <NVIC_EncodePriority>
 8002098:	4602      	mov	r2, r0
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5f 	bl	8001f64 <__NVIC_SetPriority>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff33 	bl	8001f28 <__NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ffa4 	bl	8002020 <SysTick_Config>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f2:	e146      	b.n	8002382 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2101      	movs	r1, #1
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002100:	4013      	ands	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8138 	beq.w	800237c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d005      	beq.n	8002124 <HAL_GPIO_Init+0x40>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d130      	bne.n	8002186 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800215a:	2201      	movs	r2, #1
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	f003 0201 	and.w	r2, r3, #1
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b03      	cmp	r3, #3
 8002190:	d017      	beq.n	80021c2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d123      	bne.n	8002216 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	08da      	lsrs	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3208      	adds	r2, #8
 80021d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	08da      	lsrs	r2, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3208      	adds	r2, #8
 8002210:	6939      	ldr	r1, [r7, #16]
 8002212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0203 	and.w	r2, r3, #3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 8092 	beq.w	800237c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002258:	4a51      	ldr	r2, [pc, #324]	; (80023a0 <HAL_GPIO_Init+0x2bc>)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	3302      	adds	r3, #2
 8002260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002282:	d013      	beq.n	80022ac <HAL_GPIO_Init+0x1c8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a47      	ldr	r2, [pc, #284]	; (80023a4 <HAL_GPIO_Init+0x2c0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00d      	beq.n	80022a8 <HAL_GPIO_Init+0x1c4>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a46      	ldr	r2, [pc, #280]	; (80023a8 <HAL_GPIO_Init+0x2c4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d007      	beq.n	80022a4 <HAL_GPIO_Init+0x1c0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a45      	ldr	r2, [pc, #276]	; (80023ac <HAL_GPIO_Init+0x2c8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d101      	bne.n	80022a0 <HAL_GPIO_Init+0x1bc>
 800229c:	2304      	movs	r3, #4
 800229e:	e006      	b.n	80022ae <HAL_GPIO_Init+0x1ca>
 80022a0:	2307      	movs	r3, #7
 80022a2:	e004      	b.n	80022ae <HAL_GPIO_Init+0x1ca>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e002      	b.n	80022ae <HAL_GPIO_Init+0x1ca>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_GPIO_Init+0x1ca>
 80022ac:	2300      	movs	r3, #0
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	f002 0203 	and.w	r2, r2, #3
 80022b4:	0092      	lsls	r2, r2, #2
 80022b6:	4093      	lsls	r3, r2
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022be:	4938      	ldr	r1, [pc, #224]	; (80023a0 <HAL_GPIO_Init+0x2bc>)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3302      	adds	r3, #2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022cc:	4b38      	ldr	r3, [pc, #224]	; (80023b0 <HAL_GPIO_Init+0x2cc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022f0:	4a2f      	ldr	r2, [pc, #188]	; (80023b0 <HAL_GPIO_Init+0x2cc>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022f6:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <HAL_GPIO_Init+0x2cc>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800231a:	4a25      	ldr	r2, [pc, #148]	; (80023b0 <HAL_GPIO_Init+0x2cc>)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002320:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <HAL_GPIO_Init+0x2cc>)
 8002322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002346:	4a1a      	ldr	r2, [pc, #104]	; (80023b0 <HAL_GPIO_Init+0x2cc>)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_GPIO_Init+0x2cc>)
 8002350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	43db      	mvns	r3, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002374:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <HAL_GPIO_Init+0x2cc>)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3301      	adds	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	f47f aeb1 	bne.w	80020f4 <HAL_GPIO_Init+0x10>
  }
}
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	371c      	adds	r7, #28
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	40010000 	.word	0x40010000
 80023a4:	48000400 	.word	0x48000400
 80023a8:	48000800 	.word	0x48000800
 80023ac:	48001000 	.word	0x48001000
 80023b0:	58000800 	.word	0x58000800

080023b4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	e001      	b.n	80023d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
 80023f0:	4613      	mov	r3, r2
 80023f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023f4:	787b      	ldrb	r3, [r7, #1]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002400:	e002      	b.n	8002408 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002416:	b08b      	sub	sp, #44	; 0x2c
 8002418:	af06      	add	r7, sp, #24
 800241a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0d7      	b.n	80025d6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f008 f8ac 	bl	800a598 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2203      	movs	r2, #3
 8002444:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f004 fc0c 	bl	8006c6a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	e04c      	b.n	80024f2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	440b      	add	r3, r1
 8002468:	3301      	adds	r3, #1
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	b298      	uxth	r0, r3
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	3336      	adds	r3, #54	; 0x36
 8002496:	4602      	mov	r2, r0
 8002498:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	440b      	add	r3, r1
 80024aa:	3303      	adds	r3, #3
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	3338      	adds	r3, #56	; 0x38
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	440b      	add	r3, r1
 80024d2:	333c      	adds	r3, #60	; 0x3c
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	440b      	add	r3, r1
 80024e6:	3340      	adds	r3, #64	; 0x40
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	3301      	adds	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d3ad      	bcc.n	8002458 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e044      	b.n	800258c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	440b      	add	r3, r1
 8002526:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	440b      	add	r3, r1
 800253c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	3301      	adds	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	d3b5      	bcc.n	8002502 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	687e      	ldr	r6, [r7, #4]
 800259e:	466d      	mov	r5, sp
 80025a0:	f106 0410 	add.w	r4, r6, #16
 80025a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	602b      	str	r3, [r5, #0]
 80025ac:	1d33      	adds	r3, r6, #4
 80025ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025b0:	6838      	ldr	r0, [r7, #0]
 80025b2:	f004 fb75 	bl	8006ca0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f001 fc11 	bl	8003df6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_PCD_Start+0x16>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e012      	b.n	800261a <HAL_PCD_Start+0x3c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f004 fb1b 	bl	8006c3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f006 fad0 	bl	8008bb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f006 fad5 	bl	8008bde <USB_ReadInterrupts>
 8002634:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fb0e 	bl	8002c62 <PCD_EP_ISR_Handler>

    return;
 8002646:	e110      	b.n	800286a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264e:	2b00      	cmp	r3, #0
 8002650:	d013      	beq.n	800267a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800265a:	b29a      	uxth	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002664:	b292      	uxth	r2, r2
 8002666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f008 f847 	bl	800a6fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002670:	2100      	movs	r1, #0
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f8fc 	bl	8002870 <HAL_PCD_SetAddress>

    return;
 8002678:	e0f7      	b.n	800286a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00c      	beq.n	800269e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800268c:	b29a      	uxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002696:	b292      	uxth	r2, r2
 8002698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800269c:	e0e5      	b.n	800286a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00c      	beq.n	80026c2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ba:	b292      	uxth	r2, r2
 80026bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80026c0:	e0d3      	b.n	800286a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d034      	beq.n	8002736 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0204 	bic.w	r2, r2, #4
 80026de:	b292      	uxth	r2, r2
 80026e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0208 	bic.w	r2, r2, #8
 80026f6:	b292      	uxth	r2, r2
 80026f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002702:	2b01      	cmp	r3, #1
 8002704:	d107      	bne.n	8002716 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800270e:	2100      	movs	r1, #0
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f008 f9c5 	bl	800aaa0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f008 f82a 	bl	800a770 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002724:	b29a      	uxth	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800272e:	b292      	uxth	r2, r2
 8002730:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002734:	e099      	b.n	800286a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273c:	2b00      	cmp	r3, #0
 800273e:	d027      	beq.n	8002790 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002748:	b29a      	uxth	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0208 	orr.w	r2, r2, #8
 8002752:	b292      	uxth	r2, r2
 8002754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002760:	b29a      	uxth	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276a:	b292      	uxth	r2, r2
 800276c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0204 	orr.w	r2, r2, #4
 8002782:	b292      	uxth	r2, r2
 8002784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f007 ffd7 	bl	800a73c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800278e:	e06c      	b.n	800286a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	2b00      	cmp	r3, #0
 8002798:	d040      	beq.n	800281c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027ac:	b292      	uxth	r2, r2
 80027ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d12b      	bne.n	8002814 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0204 	orr.w	r2, r2, #4
 80027ce:	b292      	uxth	r2, r2
 80027d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027dc:	b29a      	uxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0208 	orr.w	r2, r2, #8
 80027e6:	b292      	uxth	r2, r2
 80027e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800280a:	2101      	movs	r1, #1
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f008 f947 	bl	800aaa0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002812:	e02a      	b.n	800286a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f007 ff91 	bl	800a73c <HAL_PCD_SuspendCallback>
    return;
 800281a:	e026      	b.n	800286a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00f      	beq.n	8002846 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800282e:	b29a      	uxth	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002838:	b292      	uxth	r2, r2
 800283a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f007 ff4f 	bl	800a6e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002844:	e011      	b.n	800286a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00c      	beq.n	800286a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002858:	b29a      	uxth	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002862:	b292      	uxth	r2, r2
 8002864:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002868:	bf00      	nop
  }
}
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_PCD_SetAddress+0x1a>
 8002886:	2302      	movs	r3, #2
 8002888:	e013      	b.n	80028b2 <HAL_PCD_SetAddress+0x42>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f006 f970 	bl	8008b88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	4608      	mov	r0, r1
 80028c4:	4611      	mov	r1, r2
 80028c6:	461a      	mov	r2, r3
 80028c8:	4603      	mov	r3, r0
 80028ca:	70fb      	strb	r3, [r7, #3]
 80028cc:	460b      	mov	r3, r1
 80028ce:	803b      	strh	r3, [r7, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	da0e      	bge.n	80028fe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	705a      	strb	r2, [r3, #1]
 80028fc:	e00e      	b.n	800291c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	f003 0207 	and.w	r2, r3, #7
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	b2da      	uxtb	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002928:	883a      	ldrh	r2, [r7, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	78ba      	ldrb	r2, [r7, #2]
 8002932:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	785b      	ldrb	r3, [r3, #1]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002946:	78bb      	ldrb	r3, [r7, #2]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d102      	bne.n	8002952 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_PCD_EP_Open+0xa6>
 800295c:	2302      	movs	r3, #2
 800295e:	e00e      	b.n	800297e <HAL_PCD_EP_Open+0xc4>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68f9      	ldr	r1, [r7, #12]
 800296e:	4618      	mov	r0, r3
 8002970:	f004 f9b8 	bl	8006ce4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800297c:	7afb      	ldrb	r3, [r7, #11]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002996:	2b00      	cmp	r3, #0
 8002998:	da0e      	bge.n	80029b8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	705a      	strb	r2, [r3, #1]
 80029b6:	e00e      	b.n	80029d6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	f003 0207 	and.w	r2, r3, #7
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_PCD_EP_Close+0x6a>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e00e      	b.n	8002a0e <HAL_PCD_EP_Close+0x88>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68f9      	ldr	r1, [r7, #12]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f004 fd04 	bl	800740c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	460b      	mov	r3, r1
 8002a24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a26:	7afb      	ldrb	r3, [r7, #11]
 8002a28:	f003 0207 	and.w	r2, r3, #7
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2200      	movs	r2, #0
 8002a54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a56:	7afb      	ldrb	r3, [r7, #11]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a62:	7afb      	ldrb	r3, [r7, #11]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6979      	ldr	r1, [r7, #20]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f004 feb7 	bl	80077e6 <USB_EPStartXfer>
 8002a78:	e005      	b.n	8002a86 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6979      	ldr	r1, [r7, #20]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f004 feb0 	bl	80077e6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa0:	7afb      	ldrb	r3, [r7, #11]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002adc:	7afb      	ldrb	r3, [r7, #11]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ae8:	7afb      	ldrb	r3, [r7, #11]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6979      	ldr	r1, [r7, #20]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f004 fe74 	bl	80077e6 <USB_EPStartXfer>
 8002afe:	e005      	b.n	8002b0c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6979      	ldr	r1, [r7, #20]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 fe6d 	bl	80077e6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	f003 0207 	and.w	r2, r3, #7
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d901      	bls.n	8002b34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e03e      	b.n	8002bb2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	da0e      	bge.n	8002b5a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	705a      	strb	r2, [r3, #1]
 8002b58:	e00c      	b.n	8002b74 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_PCD_EP_SetStall+0x7e>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e00e      	b.n	8002bb2 <HAL_PCD_EP_SetStall+0x9c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68f9      	ldr	r1, [r7, #12]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f005 fef1 	bl	800898a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	f003 020f 	and.w	r2, r3, #15
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d901      	bls.n	8002bd8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e040      	b.n	8002c5a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	da0e      	bge.n	8002bfe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	705a      	strb	r2, [r3, #1]
 8002bfc:	e00e      	b.n	8002c1c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	f003 0207 	and.w	r2, r3, #7
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4413      	add	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_PCD_EP_ClrStall+0x82>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e00e      	b.n	8002c5a <HAL_PCD_EP_ClrStall+0xa0>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68f9      	ldr	r1, [r7, #12]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f005 feee 	bl	8008a2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b096      	sub	sp, #88	; 0x58
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c6a:	e39c      	b.n	80033a6 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002c86:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 815e 	bne.w	8002f4c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d150      	bne.n	8002d3e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cac:	81fb      	strh	r3, [r7, #14]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	89fb      	ldrh	r3, [r7, #14]
 8002cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3328      	adds	r3, #40	; 0x28
 8002cc4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	441a      	add	r2, r3
 8002cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f007 fcd5 	bl	800a6ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 834a 	beq.w	80033a6 <PCD_EP_ISR_Handler+0x744>
 8002d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 8345 	bne.w	80033a6 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b292      	uxth	r2, r2
 8002d30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d3c:	e333      	b.n	80033a6 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d44:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d50:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d032      	beq.n	8002dc2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d82:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d90:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d94:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f005 ff73 	bl	8008c82 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002da8:	4013      	ands	r3, r2
 8002daa:	823b      	strh	r3, [r7, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	8a3a      	ldrh	r2, [r7, #16]
 8002db2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002db6:	b292      	uxth	r2, r2
 8002db8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f007 fc4a 	bl	800a654 <HAL_PCD_SetupStageCallback>
 8002dc0:	e2f1      	b.n	80033a6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dc2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f280 82ed 	bge.w	80033a6 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002dd8:	4013      	ands	r3, r2
 8002dda:	83fb      	strh	r3, [r7, #30]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	8bfa      	ldrh	r2, [r7, #30]
 8002de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002de6:	b292      	uxth	r2, r2
 8002de8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e10:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d019      	beq.n	8002e4e <PCD_EP_ISR_Handler+0x1ec>
 8002e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d015      	beq.n	8002e4e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e28:	6959      	ldr	r1, [r3, #20]
 8002e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e2c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e30:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f005 ff25 	bl	8008c82 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	441a      	add	r2, r3
 8002e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e44:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e46:	2100      	movs	r1, #0
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f007 fc15 	bl	800a678 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 82a3 	bne.w	80033a6 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4413      	add	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	2b3e      	cmp	r3, #62	; 0x3e
 8002e86:	d918      	bls.n	8002eba <PCD_EP_ISR_Handler+0x258>
 8002e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <PCD_EP_ISR_Handler+0x240>
 8002e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	029b      	lsls	r3, r3, #10
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	e029      	b.n	8002f0e <PCD_EP_ISR_Handler+0x2ac>
 8002eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d112      	bne.n	8002ee8 <PCD_EP_ISR_Handler+0x286>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	801a      	strh	r2, [r3, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	801a      	strh	r2, [r3, #0]
 8002ee6:	e012      	b.n	8002f0e <PCD_EP_ISR_Handler+0x2ac>
 8002ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <PCD_EP_ISR_Handler+0x2a0>
 8002efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002efe:	3301      	adds	r3, #1
 8002f00:	647b      	str	r3, [r7, #68]	; 0x44
 8002f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	029b      	lsls	r3, r3, #10
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1e:	827b      	strh	r3, [r7, #18]
 8002f20:	8a7b      	ldrh	r3, [r7, #18]
 8002f22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f26:	827b      	strh	r3, [r7, #18]
 8002f28:	8a7b      	ldrh	r3, [r7, #18]
 8002f2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f2e:	827b      	strh	r3, [r7, #18]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	8a7b      	ldrh	r3, [r7, #18]
 8002f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	8013      	strh	r3, [r2, #0]
 8002f4a:	e22c      	b.n	80033a6 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f60:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f280 80f6 	bge.w	8003156 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f80:	4013      	ands	r3, r2
 8002f82:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002f98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f9c:	b292      	uxth	r2, r2
 8002f9e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002fa0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb8:	7b1b      	ldrb	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d123      	bne.n	8003006 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002fe6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 808e 	beq.w	800310c <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff6:	6959      	ldr	r1, [r3, #20]
 8002ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffa:	88da      	ldrh	r2, [r3, #6]
 8002ffc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003000:	f005 fe3f 	bl	8008c82 <USB_ReadPMA>
 8003004:	e082      	b.n	800310c <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003008:	78db      	ldrb	r3, [r3, #3]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d10a      	bne.n	8003024 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800300e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003012:	461a      	mov	r2, r3
 8003014:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f9d3 	bl	80033c2 <HAL_PCD_EP_DB_Receive>
 800301c:	4603      	mov	r3, r0
 800301e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003022:	e073      	b.n	800310c <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	b29b      	uxth	r3, r3
 8003036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800303a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	441a      	add	r2, r3
 8003050:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800305c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003060:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003064:	b29b      	uxth	r3, r3
 8003066:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d022      	beq.n	80030c8 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308a:	b29b      	uxth	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	4413      	add	r3, r2
 800309c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80030aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02c      	beq.n	800310c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b8:	6959      	ldr	r1, [r3, #20]
 80030ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030bc:	891a      	ldrh	r2, [r3, #8]
 80030be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030c2:	f005 fdde 	bl	8008c82 <USB_ReadPMA>
 80030c6:	e021      	b.n	800310c <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	4413      	add	r3, r2
 80030e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80030f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d009      	beq.n	800310c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fe:	6959      	ldr	r1, [r3, #20]
 8003100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003102:	895a      	ldrh	r2, [r3, #10]
 8003104:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003108:	f005 fdbb 	bl	8008c82 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800310c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003114:	441a      	add	r2, r3
 8003116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003118:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800311a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003122:	441a      	add	r2, r3
 8003124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003126:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <PCD_EP_ISR_Handler+0x4da>
 8003130:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d206      	bcs.n	800314a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800313c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f007 fa98 	bl	800a678 <HAL_PCD_DataOutStageCallback>
 8003148:	e005      	b.n	8003156 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003150:	4618      	mov	r0, r3
 8003152:	f004 fb48 	bl	80077e6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003156:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8121 	beq.w	80033a6 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8003164:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	b29b      	uxth	r3, r3
 800318a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800318e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003192:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	441a      	add	r2, r3
 80031a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80031a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80031b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b6:	78db      	ldrb	r3, [r3, #3]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	f000 80a2 	beq.w	8003302 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80031be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80031c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c6:	7b1b      	ldrb	r3, [r3, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8093 	beq.w	80032f4 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031ce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d046      	beq.n	8003268 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031dc:	785b      	ldrb	r3, [r3, #1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d126      	bne.n	8003230 <PCD_EP_ISR_Handler+0x5ce>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	4413      	add	r3, r2
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
 80031fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	00da      	lsls	r2, r3, #3
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	4413      	add	r3, r2
 8003204:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003208:	623b      	str	r3, [r7, #32]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003214:	b29a      	uxth	r2, r3
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	801a      	strh	r2, [r3, #0]
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003228:	b29a      	uxth	r2, r3
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	801a      	strh	r2, [r3, #0]
 800322e:	e061      	b.n	80032f4 <PCD_EP_ISR_Handler+0x692>
 8003230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003232:	785b      	ldrb	r3, [r3, #1]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d15d      	bne.n	80032f4 <PCD_EP_ISR_Handler+0x692>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	4413      	add	r3, r2
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	00da      	lsls	r2, r3, #3
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	4413      	add	r3, r2
 800325a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	2200      	movs	r2, #0
 8003264:	801a      	strh	r2, [r3, #0]
 8003266:	e045      	b.n	80032f4 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800326e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003270:	785b      	ldrb	r3, [r3, #1]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d126      	bne.n	80032c4 <PCD_EP_ISR_Handler+0x662>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	637b      	str	r3, [r7, #52]	; 0x34
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003284:	b29b      	uxth	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328a:	4413      	add	r3, r2
 800328c:	637b      	str	r3, [r7, #52]	; 0x34
 800328e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	00da      	lsls	r2, r3, #3
 8003294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003296:	4413      	add	r3, r2
 8003298:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800329c:	633b      	str	r3, [r7, #48]	; 0x30
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	801a      	strh	r2, [r3, #0]
 80032ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032bc:	b29a      	uxth	r2, r3
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	801a      	strh	r2, [r3, #0]
 80032c2:	e017      	b.n	80032f4 <PCD_EP_ISR_Handler+0x692>
 80032c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c6:	785b      	ldrb	r3, [r3, #1]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d113      	bne.n	80032f4 <PCD_EP_ISR_Handler+0x692>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032da:	4413      	add	r3, r2
 80032dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	00da      	lsls	r2, r3, #3
 80032e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e6:	4413      	add	r3, r2
 80032e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	2200      	movs	r2, #0
 80032f2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f007 f9d7 	bl	800a6ae <HAL_PCD_DataInStageCallback>
 8003300:	e051      	b.n	80033a6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003302:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d144      	bne.n	8003398 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	4413      	add	r3, r2
 8003328:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003332:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800333e:	429a      	cmp	r2, r3
 8003340:	d907      	bls.n	8003352 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8003342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334e:	619a      	str	r2, [r3, #24]
 8003350:	e002      	b.n	8003358 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8003352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f007 f9a1 	bl	800a6ae <HAL_PCD_DataInStageCallback>
 800336c:	e01b      	b.n	80033a6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800336e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003376:	441a      	add	r2, r3
 8003378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800337a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800337c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003384:	441a      	add	r2, r3
 8003386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003388:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003390:	4618      	mov	r0, r3
 8003392:	f004 fa28 	bl	80077e6 <USB_EPStartXfer>
 8003396:	e006      	b.n	80033a6 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003398:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800339c:	461a      	mov	r2, r3
 800339e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f917 	bl	80035d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	b21b      	sxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f6ff ac5a 	blt.w	8002c6c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3758      	adds	r7, #88	; 0x58
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b088      	sub	sp, #32
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	4613      	mov	r3, r2
 80033ce:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d07c      	beq.n	80034d4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	8b7b      	ldrh	r3, [r7, #26]
 8003406:	429a      	cmp	r2, r3
 8003408:	d306      	bcc.n	8003418 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	8b7b      	ldrh	r3, [r7, #26]
 8003410:	1ad2      	subs	r2, r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	619a      	str	r2, [r3, #24]
 8003416:	e002      	b.n	800341e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2200      	movs	r2, #0
 800341c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d123      	bne.n	800346e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800343c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003440:	833b      	strh	r3, [r7, #24]
 8003442:	8b3b      	ldrh	r3, [r7, #24]
 8003444:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003448:	833b      	strh	r3, [r7, #24]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	441a      	add	r2, r3
 8003458:	8b3b      	ldrh	r3, [r7, #24]
 800345a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346a:	b29b      	uxth	r3, r3
 800346c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01f      	beq.n	80034b8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	82fb      	strh	r3, [r7, #22]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	441a      	add	r2, r3
 80034a2:	8afb      	ldrh	r3, [r7, #22]
 80034a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034b8:	8b7b      	ldrh	r3, [r7, #26]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8085 	beq.w	80035ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	6959      	ldr	r1, [r3, #20]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	891a      	ldrh	r2, [r3, #8]
 80034cc:	8b7b      	ldrh	r3, [r7, #26]
 80034ce:	f005 fbd8 	bl	8008c82 <USB_ReadPMA>
 80034d2:	e07a      	b.n	80035ca <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034dc:	b29b      	uxth	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	4413      	add	r3, r2
 80034ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	8b7b      	ldrh	r3, [r7, #26]
 8003500:	429a      	cmp	r2, r3
 8003502:	d306      	bcc.n	8003512 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	699a      	ldr	r2, [r3, #24]
 8003508:	8b7b      	ldrh	r3, [r7, #26]
 800350a:	1ad2      	subs	r2, r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	619a      	str	r2, [r3, #24]
 8003510:	e002      	b.n	8003518 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2200      	movs	r2, #0
 8003516:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d123      	bne.n	8003568 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	83fb      	strh	r3, [r7, #30]
 800353c:	8bfb      	ldrh	r3, [r7, #30]
 800353e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003542:	83fb      	strh	r3, [r7, #30]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	8bfb      	ldrh	r3, [r7, #30]
 8003554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800355c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003564:	b29b      	uxth	r3, r3
 8003566:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d11f      	bne.n	80035b2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358c:	83bb      	strh	r3, [r7, #28]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	441a      	add	r2, r3
 800359c:	8bbb      	ldrh	r3, [r7, #28]
 800359e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035b2:	8b7b      	ldrh	r3, [r7, #26]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	6959      	ldr	r1, [r3, #20]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	895a      	ldrh	r2, [r3, #10]
 80035c4:	8b7b      	ldrh	r3, [r7, #26]
 80035c6:	f005 fb5c 	bl	8008c82 <USB_ReadPMA>
    }
  }

  return count;
 80035ca:	8b7b      	ldrh	r3, [r7, #26]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b0a2      	sub	sp, #136	; 0x88
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	4613      	mov	r3, r2
 80035e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 81c5 	beq.w	8003978 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	4413      	add	r3, r2
 8003608:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003612:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800361e:	429a      	cmp	r2, r3
 8003620:	d907      	bls.n	8003632 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800362a:	1ad2      	subs	r2, r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	619a      	str	r2, [r3, #24]
 8003630:	e002      	b.n	8003638 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2200      	movs	r2, #0
 8003636:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f040 80b9 	bne.w	80037b4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d126      	bne.n	8003698 <HAL_PCD_EP_DB_Transmit+0xc4>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003658:	b29b      	uxth	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	4413      	add	r3, r2
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	00da      	lsls	r2, r3, #3
 8003668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366a:	4413      	add	r3, r2
 800366c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800367c:	b29a      	uxth	r2, r3
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	801a      	strh	r2, [r3, #0]
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800368c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003690:	b29a      	uxth	r2, r3
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	801a      	strh	r2, [r3, #0]
 8003696:	e01a      	b.n	80036ce <HAL_PCD_EP_DB_Transmit+0xfa>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	785b      	ldrb	r3, [r3, #1]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d116      	bne.n	80036ce <HAL_PCD_EP_DB_Transmit+0xfa>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	633b      	str	r3, [r7, #48]	; 0x30
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	4413      	add	r3, r2
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	00da      	lsls	r2, r3, #3
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	4413      	add	r3, r2
 80036c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	2200      	movs	r2, #0
 80036cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	623b      	str	r3, [r7, #32]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d126      	bne.n	800372a <HAL_PCD_EP_DB_Transmit+0x156>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	4413      	add	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	00da      	lsls	r2, r3, #3
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	4413      	add	r3, r2
 80036fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	b29b      	uxth	r3, r3
 800370a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800370e:	b29a      	uxth	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	801a      	strh	r2, [r3, #0]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	b29b      	uxth	r3, r3
 800371a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800371e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003722:	b29a      	uxth	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	801a      	strh	r2, [r3, #0]
 8003728:	e017      	b.n	800375a <HAL_PCD_EP_DB_Transmit+0x186>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	785b      	ldrb	r3, [r3, #1]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d113      	bne.n	800375a <HAL_PCD_EP_DB_Transmit+0x186>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800373a:	b29b      	uxth	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	4413      	add	r3, r2
 8003742:	623b      	str	r3, [r7, #32]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	00da      	lsls	r2, r3, #3
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	4413      	add	r3, r2
 800374e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	2200      	movs	r2, #0
 8003758:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	4619      	mov	r1, r3
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f006 ffa4 	bl	800a6ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 82d2 	beq.w	8003d16 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378c:	827b      	strh	r3, [r7, #18]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	441a      	add	r2, r3
 800379c:	8a7b      	ldrh	r3, [r7, #18]
 800379e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	8013      	strh	r3, [r2, #0]
 80037b2:	e2b0      	b.n	8003d16 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d021      	beq.n	8003802 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	441a      	add	r2, r3
 80037ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fe:	b29b      	uxth	r3, r3
 8003800:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003808:	2b01      	cmp	r3, #1
 800380a:	f040 8284 	bne.w	8003d16 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003816:	441a      	add	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003824:	441a      	add	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6a1a      	ldr	r2, [r3, #32]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	429a      	cmp	r2, r3
 8003834:	d309      	bcc.n	800384a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003842:	1ad2      	subs	r2, r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	621a      	str	r2, [r3, #32]
 8003848:	e015      	b.n	8003876 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d107      	bne.n	8003862 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003852:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003856:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003860:	e009      	b.n	8003876 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2200      	movs	r2, #0
 8003874:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	785b      	ldrb	r3, [r3, #1]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d155      	bne.n	800392a <HAL_PCD_EP_DB_Transmit+0x356>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	63bb      	str	r3, [r7, #56]	; 0x38
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800388c:	b29b      	uxth	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	4413      	add	r3, r2
 8003894:	63bb      	str	r3, [r7, #56]	; 0x38
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	00da      	lsls	r2, r3, #3
 800389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389e:	4413      	add	r3, r2
 80038a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
 80038a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a8:	2b3e      	cmp	r3, #62	; 0x3e
 80038aa:	d916      	bls.n	80038da <HAL_PCD_EP_DB_Transmit+0x306>
 80038ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80038b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80038bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038be:	3b01      	subs	r3, #1
 80038c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	029b      	lsls	r3, r3, #10
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	e043      	b.n	8003962 <HAL_PCD_EP_DB_Transmit+0x38e>
 80038da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d112      	bne.n	8003906 <HAL_PCD_EP_DB_Transmit+0x332>
 80038e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ee:	801a      	strh	r2, [r3, #0]
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038fe:	b29a      	uxth	r2, r3
 8003900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003902:	801a      	strh	r2, [r3, #0]
 8003904:	e02d      	b.n	8003962 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	64bb      	str	r3, [r7, #72]	; 0x48
 800390c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_PCD_EP_DB_Transmit+0x348>
 8003916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003918:	3301      	adds	r3, #1
 800391a:	64bb      	str	r3, [r7, #72]	; 0x48
 800391c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391e:	b29b      	uxth	r3, r3
 8003920:	029b      	lsls	r3, r3, #10
 8003922:	b29a      	uxth	r2, r3
 8003924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003926:	801a      	strh	r2, [r3, #0]
 8003928:	e01b      	b.n	8003962 <HAL_PCD_EP_DB_Transmit+0x38e>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	785b      	ldrb	r3, [r3, #1]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d117      	bne.n	8003962 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	643b      	str	r3, [r7, #64]	; 0x40
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003940:	b29b      	uxth	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003946:	4413      	add	r3, r2
 8003948:	643b      	str	r3, [r7, #64]	; 0x40
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	00da      	lsls	r2, r3, #3
 8003950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003952:	4413      	add	r3, r2
 8003954:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800395a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395c:	b29a      	uxth	r2, r3
 800395e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003960:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6959      	ldr	r1, [r3, #20]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	891a      	ldrh	r2, [r3, #8]
 800396e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003970:	b29b      	uxth	r3, r3
 8003972:	f005 f944 	bl	8008bfe <USB_WritePMA>
 8003976:	e1ce      	b.n	8003d16 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003980:	b29b      	uxth	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	4413      	add	r3, r2
 8003992:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800399c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	699a      	ldr	r2, [r3, #24]
 80039a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d307      	bcc.n	80039bc <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039b4:	1ad2      	subs	r2, r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	619a      	str	r2, [r3, #24]
 80039ba:	e002      	b.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 80c4 	bne.w	8003b54 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d126      	bne.n	8003a22 <HAL_PCD_EP_DB_Transmit+0x44e>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039e8:	4413      	add	r3, r2
 80039ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	00da      	lsls	r2, r3, #3
 80039f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039f4:	4413      	add	r3, r2
 80039f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039fa:	667b      	str	r3, [r7, #100]	; 0x64
 80039fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a1e:	801a      	strh	r2, [r3, #0]
 8003a20:	e01a      	b.n	8003a58 <HAL_PCD_EP_DB_Transmit+0x484>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	785b      	ldrb	r3, [r3, #1]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d116      	bne.n	8003a58 <HAL_PCD_EP_DB_Transmit+0x484>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	673b      	str	r3, [r7, #112]	; 0x70
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a3e:	4413      	add	r3, r2
 8003a40:	673b      	str	r3, [r7, #112]	; 0x70
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	00da      	lsls	r2, r3, #3
 8003a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a54:	2200      	movs	r2, #0
 8003a56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	785b      	ldrb	r3, [r3, #1]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d12f      	bne.n	8003ac6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a7e:	4413      	add	r3, r2
 8003a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	00da      	lsls	r2, r3, #3
 8003a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a8e:	4413      	add	r3, r2
 8003a90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aaa:	801a      	strh	r2, [r3, #0]
 8003aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ac2:	801a      	strh	r2, [r3, #0]
 8003ac4:	e017      	b.n	8003af6 <HAL_PCD_EP_DB_Transmit+0x522>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	785b      	ldrb	r3, [r3, #1]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d113      	bne.n	8003af6 <HAL_PCD_EP_DB_Transmit+0x522>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003adc:	4413      	add	r3, r2
 8003ade:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	00da      	lsls	r2, r3, #3
 8003ae6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ae8:	4413      	add	r3, r2
 8003aea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003aee:	67bb      	str	r3, [r7, #120]	; 0x78
 8003af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003af2:	2200      	movs	r2, #0
 8003af4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	4619      	mov	r1, r3
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f006 fdd6 	bl	800a6ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f040 8104 	bne.w	8003d16 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b28:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	441a      	add	r2, r3
 8003b3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	8013      	strh	r3, [r2, #0]
 8003b52:	e0e0      	b.n	8003d16 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d121      	bne.n	8003ba2 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b78:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	441a      	add	r2, r3
 8003b8a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	f040 80b4 	bne.w	8003d16 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bb6:	441a      	add	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bc4:	441a      	add	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	6a1a      	ldr	r2, [r3, #32]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d309      	bcc.n	8003bea <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	6a1a      	ldr	r2, [r3, #32]
 8003be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be2:	1ad2      	subs	r2, r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	621a      	str	r2, [r3, #32]
 8003be8:	e015      	b.n	8003c16 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d107      	bne.n	8003c02 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003bf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bf6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c00:	e009      	b.n	8003c16 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	785b      	ldrb	r3, [r3, #1]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d155      	bne.n	8003cd0 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c38:	4413      	add	r3, r2
 8003c3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	00da      	lsls	r2, r3, #3
 8003c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c44:	4413      	add	r3, r2
 8003c46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8003c50:	d916      	bls.n	8003c80 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c54:	095b      	lsrs	r3, r3, #5
 8003c56:	677b      	str	r3, [r7, #116]	; 0x74
 8003c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <HAL_PCD_EP_DB_Transmit+0x694>
 8003c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c64:	3b01      	subs	r3, #1
 8003c66:	677b      	str	r3, [r7, #116]	; 0x74
 8003c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	029b      	lsls	r3, r3, #10
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	e040      	b.n	8003d02 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d112      	bne.n	8003cac <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca8:	801a      	strh	r2, [r3, #0]
 8003caa:	e02a      	b.n	8003d02 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cae:	085b      	lsrs	r3, r3, #1
 8003cb0:	677b      	str	r3, [r7, #116]	; 0x74
 8003cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	677b      	str	r3, [r7, #116]	; 0x74
 8003cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	029b      	lsls	r3, r3, #10
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ccc:	801a      	strh	r2, [r3, #0]
 8003cce:	e018      	b.n	8003d02 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	785b      	ldrb	r3, [r3, #1]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d114      	bne.n	8003d02 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ce6:	4413      	add	r3, r2
 8003ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	00da      	lsls	r2, r3, #3
 8003cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d00:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	6959      	ldr	r1, [r3, #20]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	895a      	ldrh	r2, [r3, #10]
 8003d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	f004 ff74 	bl	8008bfe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d30:	823b      	strh	r3, [r7, #16]
 8003d32:	8a3b      	ldrh	r3, [r7, #16]
 8003d34:	f083 0310 	eor.w	r3, r3, #16
 8003d38:	823b      	strh	r3, [r7, #16]
 8003d3a:	8a3b      	ldrh	r3, [r7, #16]
 8003d3c:	f083 0320 	eor.w	r3, r3, #32
 8003d40:	823b      	strh	r3, [r7, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	441a      	add	r2, r3
 8003d50:	8a3b      	ldrh	r3, [r7, #16]
 8003d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3788      	adds	r7, #136	; 0x88
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	817b      	strh	r3, [r7, #10]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d82:	897b      	ldrh	r3, [r7, #10]
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d8e:	897b      	ldrh	r3, [r7, #10]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4413      	add	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e009      	b.n	8003dba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003da6:	897a      	ldrh	r2, [r7, #10]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003dba:	893b      	ldrh	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d107      	bne.n	8003dd0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	80da      	strh	r2, [r3, #6]
 8003dce:	e00b      	b.n	8003de8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f043 0302 	orr.w	r3, r3, #2
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a04      	ldr	r2, [pc, #16]	; (8003e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5a:	6013      	str	r3, [r2, #0]
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	58000400 	.word	0x58000400

08003e6c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e70:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	58000400 	.word	0x58000400

08003e88 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e96:	6053      	str	r3, [r2, #4]
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	58000400 	.word	0x58000400

08003ea8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eba:	d101      	bne.n	8003ec0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ede:	6013      	str	r3, [r2, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efc:	6013      	str	r3, [r2, #0]
}
 8003efe:	bf00      	nop
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f1a:	d101      	bne.n	8003f20 <LL_RCC_HSE_IsReady+0x18>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <LL_RCC_HSE_IsReady+0x1a>
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3e:	6013      	str	r3, [r2, #0]
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f5c:	6013      	str	r3, [r2, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7a:	d101      	bne.n	8003f80 <LL_RCC_HSI_IsReady+0x18>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <LL_RCC_HSI_IsReady+0x1a>
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	604b      	str	r3, [r1, #4]
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003fce:	bf00      	nop
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d101      	bne.n	8004012 <LL_RCC_HSI48_IsReady+0x18>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <LL_RCC_HSI48_IsReady+0x1a>
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004058:	bf00      	nop
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004062:	b480      	push	{r7}
 8004064:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004072:	f043 0304 	orr.w	r3, r3, #4
 8004076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800407a:	bf00      	nop
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80040a6:	b480      	push	{r7}
 80040a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d101      	bne.n	80040be <LL_RCC_LSE_IsReady+0x18>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <LL_RCC_LSE_IsReady+0x1a>
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80040f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d101      	bne.n	8004126 <LL_RCC_LSI1_IsReady+0x18>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <LL_RCC_LSI1_IsReady+0x1a>
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004132:	b480      	push	{r7}
 8004134:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800414a:	bf00      	nop
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004164:	f023 0304 	bic.w	r3, r3, #4
 8004168:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800416c:	bf00      	nop
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004176:	b480      	push	{r7}
 8004178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800417a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b08      	cmp	r3, #8
 8004188:	d101      	bne.n	800418e <LL_RCC_LSI2_IsReady+0x18>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <LL_RCC_LSI2_IsReady+0x1a>
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80041a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80041cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	6013      	str	r3, [r2, #0]
}
 80041dc:	bf00      	nop
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80041e6:	b480      	push	{r7}
 80041e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80041ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	6013      	str	r3, [r2, #0]
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b02      	cmp	r3, #2
 8004214:	d101      	bne.n	800421a <LL_RCC_MSI_IsReady+0x16>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <LL_RCC_MSI_IsReady+0x18>
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800422e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004238:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800425e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2bb0      	cmp	r3, #176	; 0xb0
 8004264:	d901      	bls.n	800426a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004266:	23b0      	movs	r3, #176	; 0xb0
 8004268:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800426a:	687b      	ldr	r3, [r7, #4]
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004292:	4313      	orrs	r3, r2
 8004294:	604b      	str	r3, [r1, #4]
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80042aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f023 0203 	bic.w	r2, r3, #3
 80042b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80042ca:	b480      	push	{r7}
 80042cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80042ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 030c 	and.w	r3, r3, #12
}
 80042d8:	4618      	mov	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80042ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004316:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800431a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800431e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800433e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004342:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004346:	f023 020f 	bic.w	r2, r3, #15
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800436c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4313      	orrs	r3, r2
 800437e:	608b      	str	r3, [r1, #8]
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800439e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	608b      	str	r3, [r1, #8]
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80043b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80043d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80043ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004406:	b480      	push	{r7}
 8004408:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800440a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004414:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004418:	6013      	str	r3, [r2, #0]
}
 800441a:	bf00      	nop
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004432:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004436:	d101      	bne.n	800443c <LL_RCC_PLL_IsReady+0x18>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <LL_RCC_PLL_IsReady+0x1a>
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800444c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	0a1b      	lsrs	r3, r3, #8
 8004454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004458:	4618      	mov	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004462:	b480      	push	{r7}
 8004464:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800447a:	b480      	push	{r7}
 800447c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800447e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0303 	and.w	r3, r3, #3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80044ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044bc:	d101      	bne.n	80044c2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80044ce:	b480      	push	{r7}
 80044d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80044d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e2:	d101      	bne.n	80044e8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80044f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004508:	d101      	bne.n	800450e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800451a:	b480      	push	{r7}
 800451c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800451e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800452c:	d101      	bne.n	8004532 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800454c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004550:	d101      	bne.n	8004556 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b08d      	sub	sp, #52	; 0x34
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e37e      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8092 	beq.w	80046a8 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004584:	f7ff fea1 	bl	80042ca <LL_RCC_GetSysClkSource>
 8004588:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800458a:	f7ff ff82 	bl	8004492 <LL_RCC_PLL_GetMainSource>
 800458e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <HAL_RCC_OscConfig+0x3e>
 8004596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004598:	2b0c      	cmp	r3, #12
 800459a:	d14c      	bne.n	8004636 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d149      	bne.n	8004636 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045a2:	f7ff fe2f 	bl	8004204 <LL_RCC_MSI_IsReady>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_OscConfig+0x54>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e35d      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80045bc:	f7ff fe47 	bl	800424e <LL_RCC_MSI_GetRange>
 80045c0:	4603      	mov	r3, r0
 80045c2:	429c      	cmp	r4, r3
 80045c4:	d914      	bls.n	80045f0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fd16 	bl	8004ffc <RCC_SetFlashLatencyFromMSIRange>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e34c      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fe21 	bl	8004226 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fe45 	bl	8004278 <LL_RCC_MSI_SetCalibTrimming>
 80045ee:	e013      	b.n	8004618 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fe16 	bl	8004226 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fe3a 	bl	8004278 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fcf7 	bl	8004ffc <RCC_SetFlashLatencyFromMSIRange>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e32d      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004618:	f000 fcdc 	bl	8004fd4 <HAL_RCC_GetHCLKFreq>
 800461c:	4603      	mov	r3, r0
 800461e:	4ab3      	ldr	r2, [pc, #716]	; (80048ec <HAL_RCC_OscConfig+0x388>)
 8004620:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004622:	4bb3      	ldr	r3, [pc, #716]	; (80048f0 <HAL_RCC_OscConfig+0x38c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fd fbc2 	bl	8001db0 <HAL_InitTick>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d039      	beq.n	80046a6 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e31e      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d01e      	beq.n	800467c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800463e:	f7ff fdc3 	bl	80041c8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004642:	f7fd fc03 	bl	8001e4c <HAL_GetTick>
 8004646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800464a:	f7fd fbff 	bl	8001e4c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e30b      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800465c:	f7ff fdd2 	bl	8004204 <LL_RCC_MSI_IsReady>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f1      	beq.n	800464a <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fddb 	bl	8004226 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fdff 	bl	8004278 <LL_RCC_MSI_SetCalibTrimming>
 800467a:	e015      	b.n	80046a8 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800467c:	f7ff fdb3 	bl	80041e6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004680:	f7fd fbe4 	bl	8001e4c <HAL_GetTick>
 8004684:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004688:	f7fd fbe0 	bl	8001e4c <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e2ec      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800469a:	f7ff fdb3 	bl	8004204 <LL_RCC_MSI_IsReady>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1f1      	bne.n	8004688 <HAL_RCC_OscConfig+0x124>
 80046a4:	e000      	b.n	80046a8 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046a6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d04e      	beq.n	8004752 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b4:	f7ff fe09 	bl	80042ca <LL_RCC_GetSysClkSource>
 80046b8:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046ba:	f7ff feea 	bl	8004492 <LL_RCC_PLL_GetMainSource>
 80046be:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d005      	beq.n	80046d2 <HAL_RCC_OscConfig+0x16e>
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	d10d      	bne.n	80046e8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d10a      	bne.n	80046e8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d2:	f7ff fc19 	bl	8003f08 <LL_RCC_HSE_IsReady>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d039      	beq.n	8004750 <HAL_RCC_OscConfig+0x1ec>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d135      	bne.n	8004750 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e2c5      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f0:	d102      	bne.n	80046f8 <HAL_RCC_OscConfig+0x194>
 80046f2:	f7ff fbeb 	bl	8003ecc <LL_RCC_HSE_Enable>
 80046f6:	e001      	b.n	80046fc <HAL_RCC_OscConfig+0x198>
 80046f8:	f7ff fbf7 	bl	8003eea <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d012      	beq.n	800472a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fd fba2 	bl	8001e4c <HAL_GetTick>
 8004708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800470c:	f7fd fb9e 	bl	8001e4c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e2aa      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800471e:	f7ff fbf3 	bl	8003f08 <LL_RCC_HSE_IsReady>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f1      	beq.n	800470c <HAL_RCC_OscConfig+0x1a8>
 8004728:	e013      	b.n	8004752 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7fd fb8f 	bl	8001e4c <HAL_GetTick>
 800472e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004732:	f7fd fb8b 	bl	8001e4c <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b64      	cmp	r3, #100	; 0x64
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e297      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004744:	f7ff fbe0 	bl	8003f08 <LL_RCC_HSE_IsReady>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f1      	bne.n	8004732 <HAL_RCC_OscConfig+0x1ce>
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004750:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d051      	beq.n	8004802 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800475e:	f7ff fdb4 	bl	80042ca <LL_RCC_GetSysClkSource>
 8004762:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004764:	f7ff fe95 	bl	8004492 <LL_RCC_PLL_GetMainSource>
 8004768:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d005      	beq.n	800477c <HAL_RCC_OscConfig+0x218>
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d113      	bne.n	800479e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d110      	bne.n	800479e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800477c:	f7ff fbf4 	bl	8003f68 <LL_RCC_HSI_IsReady>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <HAL_RCC_OscConfig+0x22e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e270      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fbf8 	bl	8003f8c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800479c:	e031      	b.n	8004802 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d019      	beq.n	80047da <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a6:	f7ff fbc1 	bl	8003f2c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7fd fb4f 	bl	8001e4c <HAL_GetTick>
 80047ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b2:	f7fd fb4b 	bl	8001e4c <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e257      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80047c4:	f7ff fbd0 	bl	8003f68 <LL_RCC_HSI_IsReady>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f1      	beq.n	80047b2 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fbda 	bl	8003f8c <LL_RCC_HSI_SetCalibTrimming>
 80047d8:	e013      	b.n	8004802 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047da:	f7ff fbb6 	bl	8003f4a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047de:	f7fd fb35 	bl	8001e4c <HAL_GetTick>
 80047e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e6:	f7fd fb31 	bl	8001e4c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e23d      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80047f8:	f7ff fbb6 	bl	8003f68 <LL_RCC_HSI_IsReady>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f1      	bne.n	80047e6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80a3 	beq.w	8004962 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d076      	beq.n	8004912 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	2b00      	cmp	r3, #0
 800482e:	d046      	beq.n	80048be <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004830:	f7ff fc6d 	bl	800410e <LL_RCC_LSI1_IsReady>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d113      	bne.n	8004862 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800483a:	f7ff fc46 	bl	80040ca <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800483e:	f7fd fb05 	bl	8001e4c <HAL_GetTick>
 8004842:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004846:	f7fd fb01 	bl	8001e4c <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e20d      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004858:	f7ff fc59 	bl	800410e <LL_RCC_LSI1_IsReady>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f1      	beq.n	8004846 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004862:	f7ff fc66 	bl	8004132 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fd faf1 	bl	8001e4c <HAL_GetTick>
 800486a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800486e:	f7fd faed 	bl	8001e4c <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b03      	cmp	r3, #3
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e1f9      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004880:	f7ff fc79 	bl	8004176 <LL_RCC_LSI2_IsReady>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f1      	beq.n	800486e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fc83 	bl	800419a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004894:	f7ff fc2a 	bl	80040ec <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fd fad8 	bl	8001e4c <HAL_GetTick>
 800489c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048a0:	f7fd fad4 	bl	8001e4c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e1e0      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80048b2:	f7ff fc2c 	bl	800410e <LL_RCC_LSI1_IsReady>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f1      	bne.n	80048a0 <HAL_RCC_OscConfig+0x33c>
 80048bc:	e051      	b.n	8004962 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80048be:	f7ff fc04 	bl	80040ca <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c2:	f7fd fac3 	bl	8001e4c <HAL_GetTick>
 80048c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048ca:	f7fd fabf 	bl	8001e4c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e1cb      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80048dc:	f7ff fc17 	bl	800410e <LL_RCC_LSI1_IsReady>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f1      	beq.n	80048ca <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80048e6:	f7ff fc35 	bl	8004154 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80048ea:	e00c      	b.n	8004906 <HAL_RCC_OscConfig+0x3a2>
 80048ec:	2000001c 	.word	0x2000001c
 80048f0:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80048f4:	f7fd faaa 	bl	8001e4c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e1b6      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004906:	f7ff fc36 	bl	8004176 <LL_RCC_LSI2_IsReady>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f1      	bne.n	80048f4 <HAL_RCC_OscConfig+0x390>
 8004910:	e027      	b.n	8004962 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004912:	f7ff fc1f 	bl	8004154 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004916:	f7fd fa99 	bl	8001e4c <HAL_GetTick>
 800491a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800491e:	f7fd fa95 	bl	8001e4c <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b03      	cmp	r3, #3
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e1a1      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004930:	f7ff fc21 	bl	8004176 <LL_RCC_LSI2_IsReady>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1f1      	bne.n	800491e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800493a:	f7ff fbd7 	bl	80040ec <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493e:	f7fd fa85 	bl	8001e4c <HAL_GetTick>
 8004942:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004946:	f7fd fa81 	bl	8001e4c <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e18d      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004958:	f7ff fbd9 	bl	800410e <LL_RCC_LSI1_IsReady>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f1      	bne.n	8004946 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d05b      	beq.n	8004a26 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800496e:	4bb5      	ldr	r3, [pc, #724]	; (8004c44 <HAL_RCC_OscConfig+0x6e0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d114      	bne.n	80049a4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800497a:	f7ff fa67 	bl	8003e4c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497e:	f7fd fa65 	bl	8001e4c <HAL_GetTick>
 8004982:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004986:	f7fd fa61 	bl	8001e4c <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e16d      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004998:	4baa      	ldr	r3, [pc, #680]	; (8004c44 <HAL_RCC_OscConfig+0x6e0>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d102      	bne.n	80049b2 <HAL_RCC_OscConfig+0x44e>
 80049ac:	f7ff fb37 	bl	800401e <LL_RCC_LSE_Enable>
 80049b0:	e00c      	b.n	80049cc <HAL_RCC_OscConfig+0x468>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b05      	cmp	r3, #5
 80049b8:	d104      	bne.n	80049c4 <HAL_RCC_OscConfig+0x460>
 80049ba:	f7ff fb52 	bl	8004062 <LL_RCC_LSE_EnableBypass>
 80049be:	f7ff fb2e 	bl	800401e <LL_RCC_LSE_Enable>
 80049c2:	e003      	b.n	80049cc <HAL_RCC_OscConfig+0x468>
 80049c4:	f7ff fb3c 	bl	8004040 <LL_RCC_LSE_Disable>
 80049c8:	f7ff fb5c 	bl	8004084 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d014      	beq.n	80049fe <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fd fa3a 	bl	8001e4c <HAL_GetTick>
 80049d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049dc:	f7fd fa36 	bl	8001e4c <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e140      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80049f2:	f7ff fb58 	bl	80040a6 <LL_RCC_LSE_IsReady>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0ef      	beq.n	80049dc <HAL_RCC_OscConfig+0x478>
 80049fc:	e013      	b.n	8004a26 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fe:	f7fd fa25 	bl	8001e4c <HAL_GetTick>
 8004a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a04:	e00a      	b.n	8004a1c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a06:	f7fd fa21 	bl	8001e4c <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e12b      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a1c:	f7ff fb43 	bl	80040a6 <LL_RCC_LSE_IsReady>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1ef      	bne.n	8004a06 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d02c      	beq.n	8004a8c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d014      	beq.n	8004a64 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a3a:	f7ff fabc 	bl	8003fb6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3e:	f7fd fa05 	bl	8001e4c <HAL_GetTick>
 8004a42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a46:	f7fd fa01 	bl	8001e4c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e10d      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004a58:	f7ff facf 	bl	8003ffa <LL_RCC_HSI48_IsReady>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f1      	beq.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
 8004a62:	e013      	b.n	8004a8c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a64:	f7ff fab8 	bl	8003fd8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a68:	f7fd f9f0 	bl	8001e4c <HAL_GetTick>
 8004a6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a70:	f7fd f9ec 	bl	8001e4c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e0f8      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a82:	f7ff faba 	bl	8003ffa <LL_RCC_HSI48_IsReady>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f1      	bne.n	8004a70 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80ee 	beq.w	8004c72 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a96:	f7ff fc18 	bl	80042ca <LL_RCC_GetSysClkSource>
 8004a9a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	f040 80af 	bne.w	8004c0c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0203 	and.w	r2, r3, #3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d123      	bne.n	8004b04 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d11c      	bne.n	8004b04 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d114      	bne.n	8004b04 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d10d      	bne.n	8004b04 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d106      	bne.n	8004b04 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d05d      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2b0c      	cmp	r3, #12
 8004b08:	d058      	beq.n	8004bbc <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0ab      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b1c:	f7ff fc73 	bl	8004406 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b20:	f7fd f994 	bl	8001e4c <HAL_GetTick>
 8004b24:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b28:	f7fd f990 	bl	8001e4c <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e09c      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1ef      	bne.n	8004b28 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	4b3e      	ldr	r3, [pc, #248]	; (8004c48 <HAL_RCC_OscConfig+0x6e4>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b5a:	4311      	orrs	r1, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b60:	0212      	lsls	r2, r2, #8
 8004b62:	4311      	orrs	r1, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b6e:	4311      	orrs	r1, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b74:	430a      	orrs	r2, r1
 8004b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b7e:	f7ff fc33 	bl	80043e8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b90:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b92:	f7fd f95b 	bl	8001e4c <HAL_GetTick>
 8004b96:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9a:	f7fd f957 	bl	8001e4c <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e063      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0ef      	beq.n	8004b9a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bba:	e05a      	b.n	8004c72 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e059      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d151      	bne.n	8004c72 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bce:	f7ff fc0b 	bl	80043e8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004be2:	f7fd f933 	bl	8001e4c <HAL_GetTick>
 8004be6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bea:	f7fd f92f 	bl	8001e4c <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e03b      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0ef      	beq.n	8004bea <HAL_RCC_OscConfig+0x686>
 8004c0a:	e032      	b.n	8004c72 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b0c      	cmp	r3, #12
 8004c10:	d02d      	beq.n	8004c6e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c12:	f7ff fbf8 	bl	8004406 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c20:	f023 0303 	bic.w	r3, r3, #3
 8004c24:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c30:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c38:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fd f907 	bl	8001e4c <HAL_GetTick>
 8004c3e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c40:	e00d      	b.n	8004c5e <HAL_RCC_OscConfig+0x6fa>
 8004c42:	bf00      	nop
 8004c44:	58000400 	.word	0x58000400
 8004c48:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fd f8fe 	bl	8001e4c <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e00a      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ef      	bne.n	8004c4c <HAL_RCC_OscConfig+0x6e8>
 8004c6c:	e001      	b.n	8004c72 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3734      	adds	r7, #52	; 0x34
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd90      	pop	{r4, r7, pc}

08004c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e12d      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c90:	4b98      	ldr	r3, [pc, #608]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d91b      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9e:	4b95      	ldr	r3, [pc, #596]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 0207 	bic.w	r2, r3, #7
 8004ca6:	4993      	ldr	r1, [pc, #588]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cae:	f7fd f8cd 	bl	8001e4c <HAL_GetTick>
 8004cb2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cb6:	f7fd f8c9 	bl	8001e4c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e111      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc8:	4b8a      	ldr	r3, [pc, #552]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d1ef      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d016      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fafb 	bl	80042e2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cec:	f7fd f8ae 	bl	8001e4c <HAL_GetTick>
 8004cf0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cf4:	f7fd f8aa 	bl	8001e4c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e0f2      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d06:	f7ff fbd0 	bl	80044aa <LL_RCC_IsActiveFlag_HPRE>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f1      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d016      	beq.n	8004d4a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff faf2 	bl	800430a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d26:	f7fd f891 	bl	8001e4c <HAL_GetTick>
 8004d2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d2e:	f7fd f88d 	bl	8001e4c <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e0d5      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d40:	f7ff fbc5 	bl	80044ce <LL_RCC_IsActiveFlag_C2HPRE>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f1      	beq.n	8004d2e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d016      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff faeb 	bl	8004336 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d60:	f7fd f874 	bl	8001e4c <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d68:	f7fd f870 	bl	8001e4c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e0b8      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d7a:	f7ff fbbb 	bl	80044f4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f1      	beq.n	8004d68 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d016      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fae5 	bl	8004364 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d9a:	f7fd f857 	bl	8001e4c <HAL_GetTick>
 8004d9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004da2:	f7fd f853 	bl	8001e4c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e09b      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004db4:	f7ff fbb1 	bl	800451a <LL_RCC_IsActiveFlag_PPRE1>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f1      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d017      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff fadb 	bl	800438c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004dd6:	f7fd f839 	bl	8001e4c <HAL_GetTick>
 8004dda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dde:	f7fd f835 	bl	8001e4c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e07d      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004df0:	f7ff fba5 	bl	800453e <LL_RCC_IsActiveFlag_PPRE2>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f1      	beq.n	8004dde <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d043      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d106      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004e0e:	f7ff f87b 	bl	8003f08 <LL_RCC_HSE_IsReady>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11e      	bne.n	8004e56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e067      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d106      	bne.n	8004e32 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004e24:	f7ff fafe 	bl	8004424 <LL_RCC_PLL_IsReady>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d113      	bne.n	8004e56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e05c      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004e3a:	f7ff f9e3 	bl	8004204 <LL_RCC_MSI_IsReady>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d108      	bne.n	8004e56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e051      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004e48:	f7ff f88e 	bl	8003f68 <LL_RCC_HSI_IsReady>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e04a      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff fa21 	bl	80042a2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e60:	f7fc fff4 	bl	8001e4c <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	e00a      	b.n	8004e7e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e68:	f7fc fff0 	bl	8001e4c <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e036      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	f7ff fa24 	bl	80042ca <LL_RCC_GetSysClkSource>
 8004e82:	4602      	mov	r2, r0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d1ec      	bne.n	8004e68 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e8e:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d21b      	bcs.n	8004ed4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9c:	4b15      	ldr	r3, [pc, #84]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f023 0207 	bic.w	r2, r3, #7
 8004ea4:	4913      	ldr	r1, [pc, #76]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eac:	f7fc ffce 	bl	8001e4c <HAL_GetTick>
 8004eb0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004eb4:	f7fc ffca 	bl	8001e4c <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e012      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d1ef      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ed4:	f000 f87e 	bl	8004fd4 <HAL_RCC_GetHCLKFreq>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4a07      	ldr	r2, [pc, #28]	; (8004ef8 <HAL_RCC_ClockConfig+0x27c>)
 8004edc:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004ede:	f7fc ffc1 	bl	8001e64 <HAL_GetTickPrio>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fc ff63 	bl	8001db0 <HAL_InitTick>
 8004eea:	4603      	mov	r3, r0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	58004000 	.word	0x58004000
 8004ef8:	2000001c 	.word	0x2000001c

08004efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f02:	f7ff f9e2 	bl	80042ca <LL_RCC_GetSysClkSource>
 8004f06:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f0e:	f7ff f99e 	bl	800424e <LL_RCC_MSI_GetRange>
 8004f12:	4603      	mov	r3, r0
 8004f14:	091b      	lsrs	r3, r3, #4
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	4a2b      	ldr	r2, [pc, #172]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e04b      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d102      	bne.n	8004f30 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f2a:	4b28      	ldr	r3, [pc, #160]	; (8004fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	e045      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d10a      	bne.n	8004f4c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f36:	f7fe ffb7 	bl	8003ea8 <LL_RCC_HSE_IsEnabledDiv2>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d102      	bne.n	8004f46 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004f40:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e03a      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004f46:	4b21      	ldr	r3, [pc, #132]	; (8004fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e037      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004f4c:	f7ff faa1 	bl	8004492 <LL_RCC_PLL_GetMainSource>
 8004f50:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d003      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0x64>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d003      	beq.n	8004f66 <HAL_RCC_GetSysClockFreq+0x6a>
 8004f5e:	e00d      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004f60:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f62:	60bb      	str	r3, [r7, #8]
        break;
 8004f64:	e015      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f66:	f7fe ff9f 	bl	8003ea8 <LL_RCC_HSE_IsEnabledDiv2>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d102      	bne.n	8004f76 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004f70:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f72:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004f74:	e00d      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004f76:	4b15      	ldr	r3, [pc, #84]	; (8004fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f78:	60bb      	str	r3, [r7, #8]
        break;
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f7c:	f7ff f967 	bl	800424e <LL_RCC_MSI_GetRange>
 8004f80:	4603      	mov	r3, r0
 8004f82:	091b      	lsrs	r3, r3, #4
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	4a0f      	ldr	r2, [pc, #60]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8e:	60bb      	str	r3, [r7, #8]
        break;
 8004f90:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004f92:	f7ff fa59 	bl	8004448 <LL_RCC_PLL_GetN>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	fb03 f402 	mul.w	r4, r3, r2
 8004f9e:	f7ff fa6c 	bl	800447a <LL_RCC_PLL_GetDivider>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	fbb4 f4f3 	udiv	r4, r4, r3
 8004fac:	f7ff fa59 	bl	8004462 <LL_RCC_PLL_GetR>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	0f5b      	lsrs	r3, r3, #29
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	fbb4 f3f3 	udiv	r3, r4, r3
 8004fba:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd90      	pop	{r4, r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	0800acc4 	.word	0x0800acc4
 8004fcc:	00f42400 	.word	0x00f42400
 8004fd0:	007a1200 	.word	0x007a1200

08004fd4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd4:	b598      	push	{r3, r4, r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004fd8:	f7ff ff90 	bl	8004efc <HAL_RCC_GetSysClockFreq>
 8004fdc:	4604      	mov	r4, r0
 8004fde:	f7ff f9e9 	bl	80043b4 <LL_RCC_GetAHBPrescaler>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	091b      	lsrs	r3, r3, #4
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	4a03      	ldr	r2, [pc, #12]	; (8004ff8 <HAL_RCC_GetHCLKFreq+0x24>)
 8004fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	bd98      	pop	{r3, r4, r7, pc}
 8004ff8:	0800ac84 	.word	0x0800ac84

08004ffc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2bb0      	cmp	r3, #176	; 0xb0
 8005008:	d903      	bls.n	8005012 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800500a:	4b15      	ldr	r3, [pc, #84]	; (8005060 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e007      	b.n	8005022 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	4a11      	ldr	r2, [pc, #68]	; (8005060 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800501c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005020:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005022:	f7ff f9d3 	bl	80043cc <LL_RCC_GetAHB4Prescaler>
 8005026:	4603      	mov	r3, r0
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	4a0d      	ldr	r2, [pc, #52]	; (8005064 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	fbb2 f3f3 	udiv	r3, r2, r3
 800503a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4a0a      	ldr	r2, [pc, #40]	; (8005068 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	0c9c      	lsrs	r4, r3, #18
 8005046:	f7fe ff11 	bl	8003e6c <HAL_PWREx_GetVoltageRange>
 800504a:	4603      	mov	r3, r0
 800504c:	4619      	mov	r1, r3
 800504e:	4620      	mov	r0, r4
 8005050:	f000 f80c 	bl	800506c <RCC_SetFlashLatency>
 8005054:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	bd90      	pop	{r4, r7, pc}
 800505e:	bf00      	nop
 8005060:	0800acc4 	.word	0x0800acc4
 8005064:	0800ac84 	.word	0x0800ac84
 8005068:	431bde83 	.word	0x431bde83

0800506c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800506c:	b590      	push	{r4, r7, lr}
 800506e:	b093      	sub	sp, #76	; 0x4c
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005076:	4b39      	ldr	r3, [pc, #228]	; (800515c <RCC_SetFlashLatency+0xf0>)
 8005078:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800507c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800507e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005082:	4a37      	ldr	r2, [pc, #220]	; (8005160 <RCC_SetFlashLatency+0xf4>)
 8005084:	f107 031c 	add.w	r3, r7, #28
 8005088:	ca07      	ldmia	r2, {r0, r1, r2}
 800508a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800508e:	4b35      	ldr	r3, [pc, #212]	; (8005164 <RCC_SetFlashLatency+0xf8>)
 8005090:	f107 040c 	add.w	r4, r7, #12
 8005094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800509a:	2300      	movs	r3, #0
 800509c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a4:	d11c      	bne.n	80050e0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	643b      	str	r3, [r7, #64]	; 0x40
 80050aa:	e015      	b.n	80050d8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80050ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80050b4:	4413      	add	r3, r2
 80050b6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d808      	bhi.n	80050d2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80050c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80050c8:	4413      	add	r3, r2
 80050ca:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80050ce:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80050d0:	e022      	b.n	8005118 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d4:	3301      	adds	r3, #1
 80050d6:	643b      	str	r3, [r7, #64]	; 0x40
 80050d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d9e6      	bls.n	80050ac <RCC_SetFlashLatency+0x40>
 80050de:	e01b      	b.n	8005118 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80050e0:	2300      	movs	r3, #0
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e4:	e015      	b.n	8005112 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80050e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80050ee:	4413      	add	r3, r2
 80050f0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d808      	bhi.n	800510c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80050fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005102:	4413      	add	r3, r2
 8005104:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005108:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800510a:	e005      	b.n	8005118 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800510c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510e:	3301      	adds	r3, #1
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005114:	2b02      	cmp	r3, #2
 8005116:	d9e6      	bls.n	80050e6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005118:	4b13      	ldr	r3, [pc, #76]	; (8005168 <RCC_SetFlashLatency+0xfc>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f023 0207 	bic.w	r2, r3, #7
 8005120:	4911      	ldr	r1, [pc, #68]	; (8005168 <RCC_SetFlashLatency+0xfc>)
 8005122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005124:	4313      	orrs	r3, r2
 8005126:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005128:	f7fc fe90 	bl	8001e4c <HAL_GetTick>
 800512c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800512e:	e008      	b.n	8005142 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005130:	f7fc fe8c 	bl	8001e4c <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e007      	b.n	8005152 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <RCC_SetFlashLatency+0xfc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800514c:	429a      	cmp	r2, r3
 800514e:	d1ef      	bne.n	8005130 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	374c      	adds	r7, #76	; 0x4c
 8005156:	46bd      	mov	sp, r7
 8005158:	bd90      	pop	{r4, r7, pc}
 800515a:	bf00      	nop
 800515c:	0800ac10 	.word	0x0800ac10
 8005160:	0800ac20 	.word	0x0800ac20
 8005164:	0800ac2c 	.word	0x0800ac2c
 8005168:	58004000 	.word	0x58004000

0800516c <LL_RCC_LSE_IsEnabled>:
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <LL_RCC_LSE_IsEnabled+0x18>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <LL_RCC_LSE_IsEnabled+0x1a>
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <LL_RCC_LSE_IsReady>:
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d101      	bne.n	80051a8 <LL_RCC_LSE_IsReady+0x18>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <LL_RCC_LSE_IsReady+0x1a>
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <LL_RCC_MSI_EnablePLLMode>:
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80051b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c2:	f043 0304 	orr.w	r3, r3, #4
 80051c6:	6013      	str	r3, [r2, #0]
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <LL_RCC_SetRFWKPClockSource>:
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80051da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <LL_RCC_SetSMPSClockSource>:
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	f023 0203 	bic.w	r2, r3, #3
 8005210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4313      	orrs	r3, r2
 8005218:	624b      	str	r3, [r1, #36]	; 0x24
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <LL_RCC_SetSMPSPrescaler>:
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005238:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4313      	orrs	r3, r2
 8005240:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <LL_RCC_SetUSARTClockSource>:
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <LL_RCC_SetLPUARTClockSource>:
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800528e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_RCC_SetI2CClockSource>:
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80052ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	091b      	lsrs	r3, r3, #4
 80052ba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80052be:	43db      	mvns	r3, r3
 80052c0:	401a      	ands	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80052ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <LL_RCC_SetLPTIMClockSource>:
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80052e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	0c1b      	lsrs	r3, r3, #16
 80052f4:	041b      	lsls	r3, r3, #16
 80052f6:	43db      	mvns	r3, r3
 80052f8:	401a      	ands	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	041b      	lsls	r3, r3, #16
 80052fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <LL_RCC_SetSAIClockSource>:
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800531c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <LL_RCC_SetRNGClockSource>:
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <LL_RCC_SetCLK48ClockSource>:
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <LL_RCC_SetUSBClockSource>:
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff ffe3 	bl	800536c <LL_RCC_SetCLK48ClockSource>
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <LL_RCC_SetADCClockSource>:
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80053b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <LL_RCC_SetRTCClockSource>:
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80053e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <LL_RCC_GetRTCClockSource>:
{
 8005406:	b480      	push	{r7}
 8005408:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800540a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005412:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005416:	4618      	mov	r0, r3
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <LL_RCC_ForceBackupDomainReset>:
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005438:	bf00      	nop
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005442:	b480      	push	{r7}
 8005444:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800545a:	bf00      	nop
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <LL_RCC_PLLSAI1_Enable>:
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005472:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005476:	6013      	str	r3, [r2, #0]
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <LL_RCC_PLLSAI1_Disable>:
{
 8005482:	b480      	push	{r7}
 8005484:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005490:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005494:	6013      	str	r3, [r2, #0]
}
 8005496:	bf00      	nop
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <LL_RCC_PLLSAI1_IsReady>:
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80054a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b2:	d101      	bne.n	80054b8 <LL_RCC_PLLSAI1_IsReady+0x18>
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <LL_RCC_PLLSAI1_IsReady+0x1a>
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80054cc:	2300      	movs	r3, #0
 80054ce:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80054d0:	2300      	movs	r3, #0
 80054d2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d034      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054e8:	d021      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80054ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054ee:	d81b      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054f4:	d01d      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80054f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054fa:	d815      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005504:	d110      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005514:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005516:	e00d      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3304      	adds	r3, #4
 800551c:	4618      	mov	r0, r3
 800551e:	f000 f94d 	bl	80057bc <RCCEx_PLLSAI1_ConfigNP>
 8005522:	4603      	mov	r3, r0
 8005524:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005526:	e005      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	77fb      	strb	r3, [r7, #31]
        break;
 800552c:	e002      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005534:	7ffb      	ldrb	r3, [r7, #31]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d105      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fee8 	bl	8005314 <LL_RCC_SetSAIClockSource>
 8005544:	e001      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005546:	7ffb      	ldrb	r3, [r7, #31]
 8005548:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005552:	2b00      	cmp	r3, #0
 8005554:	d046      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005556:	f7ff ff56 	bl	8005406 <LL_RCC_GetRTCClockSource>
 800555a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	429a      	cmp	r2, r3
 8005564:	d03c      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005566:	f7fe fc71 	bl	8003e4c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d105      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff ff30 	bl	80053da <LL_RCC_SetRTCClockSource>
 800557a:	e02e      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800557c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005584:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005586:	f7ff ff4b 	bl	8005420 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800558a:	f7ff ff5a 	bl	8005442 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800559c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80055a6:	f7ff fde1 	bl	800516c <LL_RCC_LSE_IsEnabled>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d114      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055b0:	f7fc fc4c 	bl	8001e4c <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80055b6:	e00b      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b8:	f7fc fc48 	bl	8001e4c <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d902      	bls.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	77fb      	strb	r3, [r7, #31]
              break;
 80055ce:	e004      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80055d0:	f7ff fdde 	bl	8005190 <LL_RCC_LSE_IsReady>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d1ee      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80055da:	7ffb      	ldrb	r3, [r7, #31]
 80055dc:	77bb      	strb	r3, [r7, #30]
 80055de:	e001      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	7ffb      	ldrb	r3, [r7, #31]
 80055e2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d004      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff fe2a 	bl	800524e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d004      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff fe35 	bl	800527a <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff fe5d 	bl	80052e0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff fe52 	bl	80052e0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff fe2a 	bl	80052a6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d004      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff fe1f 	bl	80052a6 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	2b00      	cmp	r3, #0
 8005672:	d022      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff fe8d 	bl	8005398 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005686:	d107      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005696:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056a0:	d10b      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3304      	adds	r3, #4
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 f8e3 	bl	8005872 <RCCEx_PLLSAI1_ConfigNQ>
 80056ac:	4603      	mov	r3, r0
 80056ae:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80056b0:	7ffb      	ldrb	r3, [r7, #31]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80056b6:	7ffb      	ldrb	r3, [r7, #31]
 80056b8:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d02b      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ce:	d008      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056d8:	d003      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d105      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fe2a 	bl	8005340 <LL_RCC_SetRNGClockSource>
 80056ec:	e00a      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	2000      	movs	r0, #0
 80056fa:	f7ff fe21 	bl	8005340 <LL_RCC_SetRNGClockSource>
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff fe34 	bl	800536c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800570c:	d107      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800570e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005718:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800571c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005726:	2b00      	cmp	r3, #0
 8005728:	d022      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff fe3d 	bl	80053ae <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800573c:	d107      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800573e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800574c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005756:	d10b      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	4618      	mov	r0, r3
 800575e:	f000 f8e3 	bl	8005928 <RCCEx_PLLSAI1_ConfigNR>
 8005762:	4603      	mov	r3, r0
 8005764:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005766:	7ffb      	ldrb	r3, [r7, #31]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800576c:	7ffb      	ldrb	r3, [r7, #31]
 800576e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d004      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff fd26 	bl	80051d2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff fd45 	bl	8005226 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff fd2c 	bl	80051fe <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80057a6:	7fbb      	ldrb	r3, [r7, #30]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80057b4:	f7ff fcfe 	bl	80051b4 <LL_RCC_MSI_EnablePLLMode>
}
 80057b8:	bf00      	nop
 80057ba:	bd80      	pop	{r7, pc}

080057bc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80057c8:	f7ff fe5b 	bl	8005482 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057cc:	f7fc fb3e 	bl	8001e4c <HAL_GetTick>
 80057d0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057d2:	e009      	b.n	80057e8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057d4:	f7fc fb3a 	bl	8001e4c <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d902      	bls.n	80057e8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	73fb      	strb	r3, [r7, #15]
      break;
 80057e6:	e004      	b.n	80057f2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057e8:	f7ff fe5a 	bl	80054a0 <LL_RCC_PLLSAI1_IsReady>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d137      	bne.n	8005868 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80057f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800580c:	4313      	orrs	r3, r2
 800580e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005822:	4313      	orrs	r3, r2
 8005824:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005826:	f7ff fe1d 	bl	8005464 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800582a:	f7fc fb0f 	bl	8001e4c <HAL_GetTick>
 800582e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005830:	e009      	b.n	8005846 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005832:	f7fc fb0b 	bl	8001e4c <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d902      	bls.n	8005846 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	73fb      	strb	r3, [r7, #15]
        break;
 8005844:	e004      	b.n	8005850 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005846:	f7ff fe2b 	bl	80054a0 <LL_RCC_PLLSAI1_IsReady>
 800584a:	4603      	mov	r3, r0
 800584c:	2b01      	cmp	r3, #1
 800584e:	d1f0      	bne.n	8005832 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d108      	bne.n	8005868 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005864:	4313      	orrs	r3, r2
 8005866:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005868:	7bfb      	ldrb	r3, [r7, #15]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800587e:	f7ff fe00 	bl	8005482 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005882:	f7fc fae3 	bl	8001e4c <HAL_GetTick>
 8005886:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005888:	e009      	b.n	800589e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800588a:	f7fc fadf 	bl	8001e4c <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d902      	bls.n	800589e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	73fb      	strb	r3, [r7, #15]
      break;
 800589c:	e004      	b.n	80058a8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800589e:	f7ff fdff 	bl	80054a0 <LL_RCC_PLLSAI1_IsReady>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1f0      	bne.n	800588a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d137      	bne.n	800591e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80058ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058c2:	4313      	orrs	r3, r2
 80058c4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80058c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058d8:	4313      	orrs	r3, r2
 80058da:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80058dc:	f7ff fdc2 	bl	8005464 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e0:	f7fc fab4 	bl	8001e4c <HAL_GetTick>
 80058e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058e6:	e009      	b.n	80058fc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058e8:	f7fc fab0 	bl	8001e4c <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d902      	bls.n	80058fc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	73fb      	strb	r3, [r7, #15]
        break;
 80058fa:	e004      	b.n	8005906 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058fc:	f7ff fdd0 	bl	80054a0 <LL_RCC_PLLSAI1_IsReady>
 8005900:	4603      	mov	r3, r0
 8005902:	2b01      	cmp	r3, #1
 8005904:	d1f0      	bne.n	80058e8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d108      	bne.n	800591e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800590c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800591a:	4313      	orrs	r3, r2
 800591c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005934:	f7ff fda5 	bl	8005482 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005938:	f7fc fa88 	bl	8001e4c <HAL_GetTick>
 800593c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800593e:	e009      	b.n	8005954 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005940:	f7fc fa84 	bl	8001e4c <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d902      	bls.n	8005954 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	73fb      	strb	r3, [r7, #15]
      break;
 8005952:	e004      	b.n	800595e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005954:	f7ff fda4 	bl	80054a0 <LL_RCC_PLLSAI1_IsReady>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d137      	bne.n	80059d4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	021b      	lsls	r3, r3, #8
 8005974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005978:	4313      	orrs	r3, r2
 800597a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800598e:	4313      	orrs	r3, r2
 8005990:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005992:	f7ff fd67 	bl	8005464 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005996:	f7fc fa59 	bl	8001e4c <HAL_GetTick>
 800599a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800599c:	e009      	b.n	80059b2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800599e:	f7fc fa55 	bl	8001e4c <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d902      	bls.n	80059b2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	73fb      	strb	r3, [r7, #15]
        break;
 80059b0:	e004      	b.n	80059bc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80059b2:	f7ff fd75 	bl	80054a0 <LL_RCC_PLLSAI1_IsReady>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d1f0      	bne.n	800599e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d108      	bne.n	80059d4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80059c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059d0:	4313      	orrs	r3, r2
 80059d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e095      	b.n	8005b1c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d108      	bne.n	8005a0a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a00:	d009      	beq.n	8005a16 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	61da      	str	r2, [r3, #28]
 8005a08:	e005      	b.n	8005a16 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7fb ffcf 	bl	80019d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a4c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a56:	d902      	bls.n	8005a5e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	e002      	b.n	8005a64 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a6c:	d007      	beq.n	8005a7e <HAL_SPI_Init+0xa0>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a76:	d002      	beq.n	8005a7e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac0:	ea42 0103 	orr.w	r1, r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	f003 0204 	and.w	r2, r3, #4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005afa:	ea42 0103 	orr.w	r1, r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	4613      	mov	r3, r2
 8005b32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_SPI_Transmit+0x22>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e158      	b.n	8005df8 <HAL_SPI_Transmit+0x2d4>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b4e:	f7fc f97d 	bl	8001e4c <HAL_GetTick>
 8005b52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b54:	88fb      	ldrh	r3, [r7, #6]
 8005b56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d002      	beq.n	8005b6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b64:	2302      	movs	r3, #2
 8005b66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b68:	e13d      	b.n	8005de6 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_SPI_Transmit+0x52>
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b7a:	e134      	b.n	8005de6 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2203      	movs	r2, #3
 8005b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	88fa      	ldrh	r2, [r7, #6]
 8005b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	88fa      	ldrh	r2, [r7, #6]
 8005b9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bc6:	d10f      	bne.n	8005be8 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005be6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf2:	2b40      	cmp	r3, #64	; 0x40
 8005bf4:	d007      	beq.n	8005c06 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c0e:	d94b      	bls.n	8005ca8 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <HAL_SPI_Transmit+0xfa>
 8005c18:	8afb      	ldrh	r3, [r7, #22]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d13e      	bne.n	8005c9c <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	881a      	ldrh	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	1c9a      	adds	r2, r3, #2
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c42:	e02b      	b.n	8005c9c <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d112      	bne.n	8005c78 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c56:	881a      	ldrh	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	1c9a      	adds	r2, r3, #2
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c76:	e011      	b.n	8005c9c <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c78:	f7fc f8e8 	bl	8001e4c <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d803      	bhi.n	8005c90 <HAL_SPI_Transmit+0x16c>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8e:	d102      	bne.n	8005c96 <HAL_SPI_Transmit+0x172>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c9a:	e0a4      	b.n	8005de6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1ce      	bne.n	8005c44 <HAL_SPI_Transmit+0x120>
 8005ca6:	e07c      	b.n	8005da2 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <HAL_SPI_Transmit+0x192>
 8005cb0:	8afb      	ldrh	r3, [r7, #22]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d170      	bne.n	8005d98 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d912      	bls.n	8005ce6 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	881a      	ldrh	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd0:	1c9a      	adds	r2, r3, #2
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b02      	subs	r3, #2
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ce4:	e058      	b.n	8005d98 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	330c      	adds	r3, #12
 8005cf0:	7812      	ldrb	r2, [r2, #0]
 8005cf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d0c:	e044      	b.n	8005d98 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d12b      	bne.n	8005d74 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d912      	bls.n	8005d4c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	881a      	ldrh	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	1c9a      	adds	r2, r3, #2
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b02      	subs	r3, #2
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d4a:	e025      	b.n	8005d98 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	7812      	ldrb	r2, [r2, #0]
 8005d58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d72:	e011      	b.n	8005d98 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d74:	f7fc f86a 	bl	8001e4c <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d803      	bhi.n	8005d8c <HAL_SPI_Transmit+0x268>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8a:	d102      	bne.n	8005d92 <HAL_SPI_Transmit+0x26e>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d96:	e026      	b.n	8005de6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1b5      	bne.n	8005d0e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 fce4 	bl	8006774 <SPI_EndRxTxTransaction>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	613b      	str	r3, [r7, #16]
 8005dd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	77fb      	strb	r3, [r7, #31]
 8005de2:	e000      	b.n	8005de6 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005de4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005df6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e1c:	d112      	bne.n	8005e44 <HAL_SPI_Receive+0x44>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10e      	bne.n	8005e44 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2204      	movs	r2, #4
 8005e2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e2e:	88fa      	ldrh	r2, [r7, #6]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	4613      	mov	r3, r2
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 f910 	bl	8006060 <HAL_SPI_TransmitReceive>
 8005e40:	4603      	mov	r3, r0
 8005e42:	e109      	b.n	8006058 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_SPI_Receive+0x52>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e102      	b.n	8006058 <HAL_SPI_Receive+0x258>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e5a:	f7fb fff7 	bl	8001e4c <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d002      	beq.n	8005e72 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e70:	e0e9      	b.n	8006046 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <HAL_SPI_Receive+0x7e>
 8005e78:	88fb      	ldrh	r3, [r7, #6]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d102      	bne.n	8005e84 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e82:	e0e0      	b.n	8006046 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2204      	movs	r2, #4
 8005e88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	88fa      	ldrh	r2, [r7, #6]
 8005e9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	88fa      	ldrh	r2, [r7, #6]
 8005ea4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ece:	d908      	bls.n	8005ee2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ede:	605a      	str	r2, [r3, #4]
 8005ee0:	e007      	b.n	8005ef2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ef0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005efa:	d10f      	bne.n	8005f1c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f1a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b40      	cmp	r3, #64	; 0x40
 8005f28:	d007      	beq.n	8005f3a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f38:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f42:	d867      	bhi.n	8006014 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f44:	e030      	b.n	8005fa8 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d117      	bne.n	8005f84 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f103 020c 	add.w	r2, r3, #12
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	7812      	ldrb	r2, [r2, #0]
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f82:	e011      	b.n	8005fa8 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f84:	f7fb ff62 	bl	8001e4c <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d803      	bhi.n	8005f9c <HAL_SPI_Receive+0x19c>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9a:	d102      	bne.n	8005fa2 <HAL_SPI_Receive+0x1a2>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d102      	bne.n	8005fa8 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005fa6:	e04e      	b.n	8006046 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1c8      	bne.n	8005f46 <HAL_SPI_Receive+0x146>
 8005fb4:	e034      	b.n	8006020 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d115      	bne.n	8005ff0 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	b292      	uxth	r2, r2
 8005fd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	1c9a      	adds	r2, r3, #2
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005fee:	e011      	b.n	8006014 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ff0:	f7fb ff2c 	bl	8001e4c <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d803      	bhi.n	8006008 <HAL_SPI_Receive+0x208>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d102      	bne.n	800600e <HAL_SPI_Receive+0x20e>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006012:	e018      	b.n	8006046 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1ca      	bne.n	8005fb6 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 fb4d 	bl	80066c4 <SPI_EndRxTransaction>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	75fb      	strb	r3, [r7, #23]
 8006042:	e000      	b.n	8006046 <HAL_SPI_Receive+0x246>
  }

error :
 8006044:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006056:	7dfb      	ldrb	r3, [r7, #23]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b08a      	sub	sp, #40	; 0x28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800606e:	2301      	movs	r3, #1
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_SPI_TransmitReceive+0x26>
 8006082:	2302      	movs	r3, #2
 8006084:	e1fb      	b.n	800647e <HAL_SPI_TransmitReceive+0x41e>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800608e:	f7fb fedd 	bl	8001e4c <HAL_GetTick>
 8006092:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800609a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80060a2:	887b      	ldrh	r3, [r7, #2]
 80060a4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80060a6:	887b      	ldrh	r3, [r7, #2]
 80060a8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060aa:	7efb      	ldrb	r3, [r7, #27]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d00e      	beq.n	80060ce <HAL_SPI_TransmitReceive+0x6e>
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060b6:	d106      	bne.n	80060c6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d102      	bne.n	80060c6 <HAL_SPI_TransmitReceive+0x66>
 80060c0:	7efb      	ldrb	r3, [r7, #27]
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d003      	beq.n	80060ce <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80060c6:	2302      	movs	r3, #2
 80060c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80060cc:	e1cd      	b.n	800646a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0x80>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0x80>
 80060da:	887b      	ldrh	r3, [r7, #2]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d103      	bne.n	80060e8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80060e6:	e1c0      	b.n	800646a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	d003      	beq.n	80060fc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2205      	movs	r2, #5
 80060f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	887a      	ldrh	r2, [r7, #2]
 800610c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	887a      	ldrh	r2, [r7, #2]
 8006114:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	887a      	ldrh	r2, [r7, #2]
 8006122:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	887a      	ldrh	r2, [r7, #2]
 8006128:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800613e:	d802      	bhi.n	8006146 <HAL_SPI_TransmitReceive+0xe6>
 8006140:	8a3b      	ldrh	r3, [r7, #16]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d908      	bls.n	8006158 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006154:	605a      	str	r2, [r3, #4]
 8006156:	e007      	b.n	8006168 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006166:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006172:	2b40      	cmp	r3, #64	; 0x40
 8006174:	d007      	beq.n	8006186 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006184:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800618e:	d97c      	bls.n	800628a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <HAL_SPI_TransmitReceive+0x13e>
 8006198:	8a7b      	ldrh	r3, [r7, #18]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d169      	bne.n	8006272 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	881a      	ldrh	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	1c9a      	adds	r2, r3, #2
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061c2:	e056      	b.n	8006272 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d11b      	bne.n	800620a <HAL_SPI_TransmitReceive+0x1aa>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d016      	beq.n	800620a <HAL_SPI_TransmitReceive+0x1aa>
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d113      	bne.n	800620a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	881a      	ldrh	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	1c9a      	adds	r2, r3, #2
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b01      	cmp	r3, #1
 8006216:	d11c      	bne.n	8006252 <HAL_SPI_TransmitReceive+0x1f2>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d016      	beq.n	8006252 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	b292      	uxth	r2, r2
 8006230:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	1c9a      	adds	r2, r3, #2
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800624e:	2301      	movs	r3, #1
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006252:	f7fb fdfb 	bl	8001e4c <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625e:	429a      	cmp	r2, r3
 8006260:	d807      	bhi.n	8006272 <HAL_SPI_TransmitReceive+0x212>
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006268:	d003      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006270:	e0fb      	b.n	800646a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1a3      	bne.n	80061c4 <HAL_SPI_TransmitReceive+0x164>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d19d      	bne.n	80061c4 <HAL_SPI_TransmitReceive+0x164>
 8006288:	e0df      	b.n	800644a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_SPI_TransmitReceive+0x23a>
 8006292:	8a7b      	ldrh	r3, [r7, #18]
 8006294:	2b01      	cmp	r3, #1
 8006296:	f040 80cb 	bne.w	8006430 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d912      	bls.n	80062ca <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a8:	881a      	ldrh	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	1c9a      	adds	r2, r3, #2
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b02      	subs	r3, #2
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062c8:	e0b2      	b.n	8006430 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	330c      	adds	r3, #12
 80062d4:	7812      	ldrb	r2, [r2, #0]
 80062d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062f0:	e09e      	b.n	8006430 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d134      	bne.n	800636a <HAL_SPI_TransmitReceive+0x30a>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d02f      	beq.n	800636a <HAL_SPI_TransmitReceive+0x30a>
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	2b01      	cmp	r3, #1
 800630e:	d12c      	bne.n	800636a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b01      	cmp	r3, #1
 8006318:	d912      	bls.n	8006340 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	881a      	ldrh	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	1c9a      	adds	r2, r3, #2
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b02      	subs	r3, #2
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800633e:	e012      	b.n	8006366 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b01      	cmp	r3, #1
 8006376:	d148      	bne.n	800640a <HAL_SPI_TransmitReceive+0x3aa>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800637e:	b29b      	uxth	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d042      	beq.n	800640a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	d923      	bls.n	80063d8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	b292      	uxth	r2, r2
 800639c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	1c9a      	adds	r2, r3, #2
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b02      	subs	r3, #2
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d81f      	bhi.n	8006406 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	e016      	b.n	8006406 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f103 020c 	add.w	r2, r3, #12
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006406:	2301      	movs	r3, #1
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800640a:	f7fb fd1f 	bl	8001e4c <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006416:	429a      	cmp	r2, r3
 8006418:	d803      	bhi.n	8006422 <HAL_SPI_TransmitReceive+0x3c2>
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d102      	bne.n	8006428 <HAL_SPI_TransmitReceive+0x3c8>
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	2b00      	cmp	r3, #0
 8006426:	d103      	bne.n	8006430 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800642e:	e01c      	b.n	800646a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006434:	b29b      	uxth	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	f47f af5b 	bne.w	80062f2 <HAL_SPI_TransmitReceive+0x292>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	f47f af54 	bne.w	80062f2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f990 	bl	8006774 <SPI_EndRxTxTransaction>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d006      	beq.n	8006468 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	661a      	str	r2, [r3, #96]	; 0x60
 8006466:	e000      	b.n	800646a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006468:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800647a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800647e:	4618      	mov	r0, r3
 8006480:	3728      	adds	r7, #40	; 0x28
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	603b      	str	r3, [r7, #0]
 8006494:	4613      	mov	r3, r2
 8006496:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006498:	f7fb fcd8 	bl	8001e4c <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	1a9b      	subs	r3, r3, r2
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	4413      	add	r3, r2
 80064a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064a8:	f7fb fcd0 	bl	8001e4c <HAL_GetTick>
 80064ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064ae:	4b39      	ldr	r3, [pc, #228]	; (8006594 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	015b      	lsls	r3, r3, #5
 80064b4:	0d1b      	lsrs	r3, r3, #20
 80064b6:	69fa      	ldr	r2, [r7, #28]
 80064b8:	fb02 f303 	mul.w	r3, r2, r3
 80064bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064be:	e054      	b.n	800656a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c6:	d050      	beq.n	800656a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064c8:	f7fb fcc0 	bl	8001e4c <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d902      	bls.n	80064de <SPI_WaitFlagStateUntilTimeout+0x56>
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d13d      	bne.n	800655a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064f6:	d111      	bne.n	800651c <SPI_WaitFlagStateUntilTimeout+0x94>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006500:	d004      	beq.n	800650c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800650a:	d107      	bne.n	800651c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800651a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006524:	d10f      	bne.n	8006546 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006544:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e017      	b.n	800658a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	3b01      	subs	r3, #1
 8006568:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4013      	ands	r3, r2
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	429a      	cmp	r2, r3
 8006578:	bf0c      	ite	eq
 800657a:	2301      	moveq	r3, #1
 800657c:	2300      	movne	r3, #0
 800657e:	b2db      	uxtb	r3, r3
 8006580:	461a      	mov	r2, r3
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	429a      	cmp	r2, r3
 8006586:	d19b      	bne.n	80064c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3720      	adds	r7, #32
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	2000001c 	.word	0x2000001c

08006598 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08a      	sub	sp, #40	; 0x28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80065aa:	f7fb fc4f 	bl	8001e4c <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	4413      	add	r3, r2
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80065ba:	f7fb fc47 	bl	8001e4c <HAL_GetTick>
 80065be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330c      	adds	r3, #12
 80065c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80065c8:	4b3d      	ldr	r3, [pc, #244]	; (80066c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4613      	mov	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	00da      	lsls	r2, r3, #3
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	0d1b      	lsrs	r3, r3, #20
 80065d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065da:	fb02 f303 	mul.w	r3, r2, r3
 80065de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80065e0:	e060      	b.n	80066a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80065e8:	d107      	bne.n	80065fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d050      	beq.n	80066a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006602:	f7fb fc23 	bl	8001e4c <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660e:	429a      	cmp	r2, r3
 8006610:	d902      	bls.n	8006618 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	2b00      	cmp	r3, #0
 8006616:	d13d      	bne.n	8006694 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006626:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006630:	d111      	bne.n	8006656 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663a:	d004      	beq.n	8006646 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006644:	d107      	bne.n	8006656 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006654:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665e:	d10f      	bne.n	8006680 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800667e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e010      	b.n	80066b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d196      	bne.n	80065e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3728      	adds	r7, #40	; 0x28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	2000001c 	.word	0x2000001c

080066c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d8:	d111      	bne.n	80066fe <SPI_EndRxTransaction+0x3a>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e2:	d004      	beq.n	80066ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ec:	d107      	bne.n	80066fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2200      	movs	r2, #0
 8006706:	2180      	movs	r1, #128	; 0x80
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7ff febd 	bl	8006488 <SPI_WaitFlagStateUntilTimeout>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006718:	f043 0220 	orr.w	r2, r3, #32
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e023      	b.n	800676c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800672c:	d11d      	bne.n	800676a <SPI_EndRxTransaction+0xa6>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006736:	d004      	beq.n	8006742 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006740:	d113      	bne.n	800676a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2200      	movs	r2, #0
 800674a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f7ff ff22 	bl	8006598 <SPI_WaitFifoStateUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675e:	f043 0220 	orr.w	r2, r3, #32
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e000      	b.n	800676c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af02      	add	r7, sp, #8
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2200      	movs	r2, #0
 8006788:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f7ff ff03 	bl	8006598 <SPI_WaitFifoStateUntilTimeout>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679c:	f043 0220 	orr.w	r2, r3, #32
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e027      	b.n	80067f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2200      	movs	r2, #0
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff fe68 	bl	8006488 <SPI_WaitFlagStateUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c2:	f043 0220 	orr.w	r2, r3, #32
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e014      	b.n	80067f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff fedc 	bl	8006598 <SPI_WaitFifoStateUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d007      	beq.n	80067f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ea:	f043 0220 	orr.w	r2, r3, #32
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e000      	b.n	80067f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e097      	b.n	8006944 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d106      	bne.n	800682e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7fb fa39 	bl	8001ca0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2202      	movs	r2, #2
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006844:	f023 0307 	bic.w	r3, r3, #7
 8006848:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3304      	adds	r3, #4
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f000 f907 	bl	8006a68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006882:	f023 0303 	bic.w	r3, r3, #3
 8006886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	4313      	orrs	r3, r2
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068a0:	f023 030c 	bic.w	r3, r3, #12
 80068a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	4313      	orrs	r3, r2
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	011a      	lsls	r2, r3, #4
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	031b      	lsls	r3, r3, #12
 80068d0:	4313      	orrs	r3, r2
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80068de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80068e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	4313      	orrs	r3, r2
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800695c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006964:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800696c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006974:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d110      	bne.n	800699e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d102      	bne.n	8006988 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006982:	7b7b      	ldrb	r3, [r7, #13]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d001      	beq.n	800698c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e069      	b.n	8006a60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800699c:	e031      	b.n	8006a02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d110      	bne.n	80069c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069a4:	7bbb      	ldrb	r3, [r7, #14]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d102      	bne.n	80069b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069aa:	7b3b      	ldrb	r3, [r7, #12]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d001      	beq.n	80069b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e055      	b.n	8006a60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069c4:	e01d      	b.n	8006a02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d108      	bne.n	80069de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069cc:	7bbb      	ldrb	r3, [r7, #14]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d105      	bne.n	80069de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069d2:	7b7b      	ldrb	r3, [r7, #13]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d102      	bne.n	80069de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069d8:	7b3b      	ldrb	r3, [r7, #12]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d001      	beq.n	80069e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e03e      	b.n	8006a60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2202      	movs	r2, #2
 80069ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2202      	movs	r2, #2
 80069f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2202      	movs	r2, #2
 80069fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <HAL_TIM_Encoder_Start+0xc4>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d008      	beq.n	8006a20 <HAL_TIM_Encoder_Start+0xd4>
 8006a0e:	e00f      	b.n	8006a30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2201      	movs	r2, #1
 8006a16:	2100      	movs	r1, #0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 f889 	bl	8006b30 <TIM_CCxChannelCmd>
      break;
 8006a1e:	e016      	b.n	8006a4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2201      	movs	r2, #1
 8006a26:	2104      	movs	r1, #4
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 f881 	bl	8006b30 <TIM_CCxChannelCmd>
      break;
 8006a2e:	e00e      	b.n	8006a4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2201      	movs	r2, #1
 8006a36:	2100      	movs	r1, #0
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 f879 	bl	8006b30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2201      	movs	r2, #1
 8006a44:	2104      	movs	r1, #4
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 f872 	bl	8006b30 <TIM_CCxChannelCmd>
      break;
 8006a4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0201 	orr.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a2a      	ldr	r2, [pc, #168]	; (8006b24 <TIM_Base_SetConfig+0xbc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d003      	beq.n	8006a88 <TIM_Base_SetConfig+0x20>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a86:	d108      	bne.n	8006a9a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a21      	ldr	r2, [pc, #132]	; (8006b24 <TIM_Base_SetConfig+0xbc>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00b      	beq.n	8006aba <TIM_Base_SetConfig+0x52>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa8:	d007      	beq.n	8006aba <TIM_Base_SetConfig+0x52>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a1e      	ldr	r2, [pc, #120]	; (8006b28 <TIM_Base_SetConfig+0xc0>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d003      	beq.n	8006aba <TIM_Base_SetConfig+0x52>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a1d      	ldr	r2, [pc, #116]	; (8006b2c <TIM_Base_SetConfig+0xc4>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d108      	bne.n	8006acc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a0c      	ldr	r2, [pc, #48]	; (8006b24 <TIM_Base_SetConfig+0xbc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d007      	beq.n	8006b08 <TIM_Base_SetConfig+0xa0>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a0b      	ldr	r2, [pc, #44]	; (8006b28 <TIM_Base_SetConfig+0xc0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_Base_SetConfig+0xa0>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <TIM_Base_SetConfig+0xc4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d103      	bne.n	8006b10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	615a      	str	r2, [r3, #20]
}
 8006b16:	bf00      	nop
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	40014400 	.word	0x40014400
 8006b2c:	40014800 	.word	0x40014800

08006b30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f003 031f 	and.w	r3, r3, #31
 8006b42:	2201      	movs	r2, #1
 8006b44:	fa02 f303 	lsl.w	r3, r2, r3
 8006b48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a1a      	ldr	r2, [r3, #32]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	43db      	mvns	r3, r3
 8006b52:	401a      	ands	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1a      	ldr	r2, [r3, #32]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f003 031f 	and.w	r3, r3, #31
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	fa01 f303 	lsl.w	r3, r1, r3
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e04a      	b.n	8006c2a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1f      	ldr	r2, [pc, #124]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d108      	bne.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a12      	ldr	r2, [pc, #72]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d004      	beq.n	8006bfe <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfc:	d10c      	bne.n	8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40012c00 	.word	0x40012c00

08006c3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c4c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006c50:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c72:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006c76:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	43db      	mvns	r3, r3
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	4013      	ands	r3, r2
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	f107 0014 	add.w	r0, r7, #20
 8006cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	b004      	add	sp, #16
 8006ce0:	4770      	bx	lr
	...

08006ce4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b09d      	sub	sp, #116	; 0x74
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	78db      	ldrb	r3, [r3, #3]
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d81f      	bhi.n	8006d56 <USB_ActivateEndpoint+0x72>
 8006d16:	a201      	add	r2, pc, #4	; (adr r2, 8006d1c <USB_ActivateEndpoint+0x38>)
 8006d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1c:	08006d2d 	.word	0x08006d2d
 8006d20:	08006d49 	.word	0x08006d49
 8006d24:	08006d5f 	.word	0x08006d5f
 8006d28:	08006d3b 	.word	0x08006d3b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006d2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006d38:	e012      	b.n	8006d60 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006d3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d3e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006d42:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006d46:	e00b      	b.n	8006d60 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006d48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006d54:	e004      	b.n	8006d60 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006d5c:	e000      	b.n	8006d60 <USB_ActivateEndpoint+0x7c>
      break;
 8006d5e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	441a      	add	r2, r3
 8006d6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	b21b      	sxth	r3, r3
 8006d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	b21a      	sxth	r2, r3
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b21b      	sxth	r3, r3
 8006da2:	4313      	orrs	r3, r2
 8006da4:	b21b      	sxth	r3, r3
 8006da6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	441a      	add	r2, r3
 8006db4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	7b1b      	ldrb	r3, [r3, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f040 8149 	bne.w	8007068 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	785b      	ldrb	r3, [r3, #1]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 8084 	beq.w	8006ee8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	461a      	mov	r2, r3
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	4413      	add	r3, r2
 8006df2:	61bb      	str	r3, [r7, #24]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	00da      	lsls	r2, r3, #3
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	88db      	ldrh	r3, [r3, #6]
 8006e08:	085b      	lsrs	r3, r3, #1
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	827b      	strh	r3, [r7, #18]
 8006e22:	8a7b      	ldrh	r3, [r7, #18]
 8006e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d01b      	beq.n	8006e64 <USB_ActivateEndpoint+0x180>
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e42:	823b      	strh	r3, [r7, #16]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	441a      	add	r2, r3
 8006e4e:	8a3b      	ldrh	r3, [r7, #16]
 8006e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	78db      	ldrb	r3, [r3, #3]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d020      	beq.n	8006eae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e82:	81bb      	strh	r3, [r7, #12]
 8006e84:	89bb      	ldrh	r3, [r7, #12]
 8006e86:	f083 0320 	eor.w	r3, r3, #32
 8006e8a:	81bb      	strh	r3, [r7, #12]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	441a      	add	r2, r3
 8006e96:	89bb      	ldrh	r3, [r7, #12]
 8006e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	8013      	strh	r3, [r2, #0]
 8006eac:	e2a6      	b.n	80073fc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec4:	81fb      	strh	r3, [r7, #14]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	441a      	add	r2, r3
 8006ed0:	89fb      	ldrh	r3, [r7, #14]
 8006ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	8013      	strh	r3, [r2, #0]
 8006ee6:	e289      	b.n	80073fc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	633b      	str	r3, [r7, #48]	; 0x30
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	4413      	add	r3, r2
 8006efa:	633b      	str	r3, [r7, #48]	; 0x30
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	00da      	lsls	r2, r3, #3
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	4413      	add	r3, r2
 8006f06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	88db      	ldrh	r3, [r3, #6]
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	4413      	add	r3, r2
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	00da      	lsls	r2, r3, #3
 8006f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f38:	4413      	add	r3, r2
 8006f3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	2b3e      	cmp	r3, #62	; 0x3e
 8006f46:	d918      	bls.n	8006f7a <USB_ActivateEndpoint+0x296>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	f003 031f 	and.w	r3, r3, #31
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d102      	bne.n	8006f62 <USB_ActivateEndpoint+0x27e>
 8006f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	029b      	lsls	r3, r3, #10
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	801a      	strh	r2, [r3, #0]
 8006f78:	e029      	b.n	8006fce <USB_ActivateEndpoint+0x2ea>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d112      	bne.n	8006fa8 <USB_ActivateEndpoint+0x2c4>
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	801a      	strh	r2, [r3, #0]
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	801a      	strh	r2, [r3, #0]
 8006fa6:	e012      	b.n	8006fce <USB_ActivateEndpoint+0x2ea>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	085b      	lsrs	r3, r3, #1
 8006fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <USB_ActivateEndpoint+0x2de>
 8006fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	029b      	lsls	r3, r3, #10
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	847b      	strh	r3, [r7, #34]	; 0x22
 8006fdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d01b      	beq.n	800701e <USB_ActivateEndpoint+0x33a>
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffc:	843b      	strh	r3, [r7, #32]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	441a      	add	r2, r3
 8007008:	8c3b      	ldrh	r3, [r7, #32]
 800700a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007012:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701a:	b29b      	uxth	r3, r3
 800701c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007034:	83fb      	strh	r3, [r7, #30]
 8007036:	8bfb      	ldrh	r3, [r7, #30]
 8007038:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800703c:	83fb      	strh	r3, [r7, #30]
 800703e:	8bfb      	ldrh	r3, [r7, #30]
 8007040:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007044:	83fb      	strh	r3, [r7, #30]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	441a      	add	r2, r3
 8007050:	8bfb      	ldrh	r3, [r7, #30]
 8007052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800705a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800705e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007062:	b29b      	uxth	r3, r3
 8007064:	8013      	strh	r3, [r2, #0]
 8007066:	e1c9      	b.n	80073fc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	78db      	ldrb	r3, [r3, #3]
 800706c:	2b02      	cmp	r3, #2
 800706e:	d11e      	bne.n	80070ae <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	441a      	add	r2, r3
 8007094:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800709c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80070a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	8013      	strh	r3, [r2, #0]
 80070ac:	e01d      	b.n	80070ea <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80070c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	441a      	add	r2, r3
 80070d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80070d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	461a      	mov	r2, r3
 80070f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070fa:	4413      	add	r3, r2
 80070fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	00da      	lsls	r2, r3, #3
 8007104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007106:	4413      	add	r3, r2
 8007108:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800710c:	65bb      	str	r3, [r7, #88]	; 0x58
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	891b      	ldrh	r3, [r3, #8]
 8007112:	085b      	lsrs	r3, r3, #1
 8007114:	b29b      	uxth	r3, r3
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800711c:	801a      	strh	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	657b      	str	r3, [r7, #84]	; 0x54
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007128:	b29b      	uxth	r3, r3
 800712a:	461a      	mov	r2, r3
 800712c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800712e:	4413      	add	r3, r2
 8007130:	657b      	str	r3, [r7, #84]	; 0x54
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	00da      	lsls	r2, r3, #3
 8007138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800713a:	4413      	add	r3, r2
 800713c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007140:	653b      	str	r3, [r7, #80]	; 0x50
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	895b      	ldrh	r3, [r3, #10]
 8007146:	085b      	lsrs	r3, r3, #1
 8007148:	b29b      	uxth	r3, r3
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007150:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	785b      	ldrb	r3, [r3, #1]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f040 8093 	bne.w	8007282 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800716c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d01b      	beq.n	80071b0 <USB_ActivateEndpoint+0x4cc>
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b29b      	uxth	r3, r3
 8007186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800718a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	441a      	add	r2, r3
 800719a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800719c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80071be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01b      	beq.n	8007200 <USB_ActivateEndpoint+0x51c>
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071de:	877b      	strh	r3, [r7, #58]	; 0x3a
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	441a      	add	r2, r3
 80071ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80071ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007216:	873b      	strh	r3, [r7, #56]	; 0x38
 8007218:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800721a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800721e:	873b      	strh	r3, [r7, #56]	; 0x38
 8007220:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007222:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007226:	873b      	strh	r3, [r7, #56]	; 0x38
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	441a      	add	r2, r3
 8007232:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800723c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007244:	b29b      	uxth	r3, r3
 8007246:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800725e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	441a      	add	r2, r3
 800726a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800726c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727c:	b29b      	uxth	r3, r3
 800727e:	8013      	strh	r3, [r2, #0]
 8007280:	e0bc      	b.n	80073fc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007292:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d01d      	beq.n	80072da <USB_ActivateEndpoint+0x5f6>
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	441a      	add	r2, r3
 80072c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80072ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80072ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d01d      	beq.n	8007332 <USB_ActivateEndpoint+0x64e>
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800730c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	441a      	add	r2, r3
 800731a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800731e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800732a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800732e:	b29b      	uxth	r3, r3
 8007330:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	78db      	ldrb	r3, [r3, #3]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d024      	beq.n	8007384 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	b29b      	uxth	r3, r3
 8007348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800734c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007350:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007354:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007358:	f083 0320 	eor.w	r3, r3, #32
 800735c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	441a      	add	r2, r3
 800736a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800736e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800737a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800737e:	b29b      	uxth	r3, r3
 8007380:	8013      	strh	r3, [r2, #0]
 8007382:	e01d      	b.n	80073c0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	b29b      	uxth	r3, r3
 8007392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	441a      	add	r2, r3
 80073a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80073ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073bc:	b29b      	uxth	r3, r3
 80073be:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	441a      	add	r2, r3
 80073e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80073e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80073fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007400:	4618      	mov	r0, r3
 8007402:	3774      	adds	r7, #116	; 0x74
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800740c:	b480      	push	{r7}
 800740e:	b08d      	sub	sp, #52	; 0x34
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	7b1b      	ldrb	r3, [r3, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 808e 	bne.w	800753c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d044      	beq.n	80074b2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	81bb      	strh	r3, [r7, #12]
 8007436:	89bb      	ldrh	r3, [r7, #12]
 8007438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01b      	beq.n	8007478 <USB_DeactivateEndpoint+0x6c>
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	b29b      	uxth	r3, r3
 800744e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007456:	817b      	strh	r3, [r7, #10]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	441a      	add	r2, r3
 8007462:	897b      	ldrh	r3, [r7, #10]
 8007464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800746c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007470:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007474:	b29b      	uxth	r3, r3
 8007476:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800748e:	813b      	strh	r3, [r7, #8]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	441a      	add	r2, r3
 800749a:	893b      	ldrh	r3, [r7, #8]
 800749c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	8013      	strh	r3, [r2, #0]
 80074b0:	e192      	b.n	80077d8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	827b      	strh	r3, [r7, #18]
 80074c0:	8a7b      	ldrh	r3, [r7, #18]
 80074c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d01b      	beq.n	8007502 <USB_DeactivateEndpoint+0xf6>
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e0:	823b      	strh	r3, [r7, #16]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	441a      	add	r2, r3
 80074ec:	8a3b      	ldrh	r3, [r7, #16]
 80074ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074fe:	b29b      	uxth	r3, r3
 8007500:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007518:	81fb      	strh	r3, [r7, #14]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	441a      	add	r2, r3
 8007524:	89fb      	ldrh	r3, [r7, #14]
 8007526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007536:	b29b      	uxth	r3, r3
 8007538:	8013      	strh	r3, [r2, #0]
 800753a:	e14d      	b.n	80077d8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f040 80a5 	bne.w	8007690 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	843b      	strh	r3, [r7, #32]
 8007554:	8c3b      	ldrh	r3, [r7, #32]
 8007556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01b      	beq.n	8007596 <USB_DeactivateEndpoint+0x18a>
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007574:	83fb      	strh	r3, [r7, #30]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	441a      	add	r2, r3
 8007580:	8bfb      	ldrh	r3, [r7, #30]
 8007582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800758e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007592:	b29b      	uxth	r3, r3
 8007594:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	83bb      	strh	r3, [r7, #28]
 80075a4:	8bbb      	ldrh	r3, [r7, #28]
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01b      	beq.n	80075e6 <USB_DeactivateEndpoint+0x1da>
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c4:	837b      	strh	r3, [r7, #26]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	441a      	add	r2, r3
 80075d0:	8b7b      	ldrh	r3, [r7, #26]
 80075d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fc:	833b      	strh	r3, [r7, #24]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	441a      	add	r2, r3
 8007608:	8b3b      	ldrh	r3, [r7, #24]
 800760a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800760e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007616:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800761a:	b29b      	uxth	r3, r3
 800761c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29b      	uxth	r3, r3
 800762c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007634:	82fb      	strh	r3, [r7, #22]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	441a      	add	r2, r3
 8007640:	8afb      	ldrh	r3, [r7, #22]
 8007642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800764a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800764e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007652:	b29b      	uxth	r3, r3
 8007654:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800766c:	82bb      	strh	r3, [r7, #20]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	441a      	add	r2, r3
 8007678:	8abb      	ldrh	r3, [r7, #20]
 800767a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800767e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768a:	b29b      	uxth	r3, r3
 800768c:	8013      	strh	r3, [r2, #0]
 800768e:	e0a3      	b.n	80077d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800769e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01b      	beq.n	80076e0 <USB_DeactivateEndpoint+0x2d4>
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076be:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	441a      	add	r2, r3
 80076ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80076cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076dc:	b29b      	uxth	r3, r3
 80076de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 80076ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80076f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01b      	beq.n	8007730 <USB_DeactivateEndpoint+0x324>
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	b29b      	uxth	r3, r3
 8007706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800770a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	441a      	add	r2, r3
 800771a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800771c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007728:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800772c:	b29b      	uxth	r3, r3
 800772e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	b29b      	uxth	r3, r3
 800773e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007746:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	441a      	add	r2, r3
 8007752:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800775c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007764:	b29b      	uxth	r3, r3
 8007766:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	b29b      	uxth	r3, r3
 8007776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800777e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	441a      	add	r2, r3
 800778a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800778c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800779c:	b29b      	uxth	r3, r3
 800779e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	441a      	add	r2, r3
 80077c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3734      	adds	r7, #52	; 0x34
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b0c2      	sub	sp, #264	; 0x108
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	1d3b      	adds	r3, r7, #4
 80077ee:	6018      	str	r0, [r3, #0]
 80077f0:	463b      	mov	r3, r7
 80077f2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077f4:	463b      	mov	r3, r7
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	785b      	ldrb	r3, [r3, #1]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	f040 8509 	bne.w	8008212 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007800:	463b      	mov	r3, r7
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699a      	ldr	r2, [r3, #24]
 8007806:	463b      	mov	r3, r7
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	429a      	cmp	r2, r3
 800780e:	d905      	bls.n	800781c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007810:	463b      	mov	r3, r7
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800781a:	e004      	b.n	8007826 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800781c:	463b      	mov	r3, r7
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007826:	463b      	mov	r3, r7
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	7b1b      	ldrb	r3, [r3, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d128      	bne.n	8007882 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007830:	463b      	mov	r3, r7
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6959      	ldr	r1, [r3, #20]
 8007836:	463b      	mov	r3, r7
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	88da      	ldrh	r2, [r3, #6]
 800783c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007840:	b29b      	uxth	r3, r3
 8007842:	1d38      	adds	r0, r7, #4
 8007844:	6800      	ldr	r0, [r0, #0]
 8007846:	f001 f9da 	bl	8008bfe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800784a:	1d3b      	adds	r3, r7, #4
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	1d3b      	adds	r3, r7, #4
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007858:	b29b      	uxth	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	4413      	add	r3, r2
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	463b      	mov	r3, r7
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	00da      	lsls	r2, r3, #3
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	4413      	add	r3, r2
 800786e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007878:	b29a      	uxth	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	801a      	strh	r2, [r3, #0]
 800787e:	f000 bc9f 	b.w	80081c0 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007882:	463b      	mov	r3, r7
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	78db      	ldrb	r3, [r3, #3]
 8007888:	2b02      	cmp	r3, #2
 800788a:	f040 8347 	bne.w	8007f1c <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800788e:	463b      	mov	r3, r7
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6a1a      	ldr	r2, [r3, #32]
 8007894:	463b      	mov	r3, r7
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	429a      	cmp	r2, r3
 800789c:	f240 82eb 	bls.w	8007e76 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80078a0:	1d3b      	adds	r3, r7, #4
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	463b      	mov	r3, r7
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80078be:	1d3b      	adds	r3, r7, #4
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	463b      	mov	r3, r7
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	441a      	add	r2, r3
 80078cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80078dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80078e4:	463b      	mov	r3, r7
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6a1a      	ldr	r2, [r3, #32]
 80078ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ee:	1ad2      	subs	r2, r2, r3
 80078f0:	463b      	mov	r3, r7
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078f6:	1d3b      	adds	r3, r7, #4
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	463b      	mov	r3, r7
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 8159 	beq.w	8007bc4 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007912:	1d3b      	adds	r3, r7, #4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	633b      	str	r3, [r7, #48]	; 0x30
 8007918:	463b      	mov	r3, r7
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d164      	bne.n	80079ec <USB_EPStartXfer+0x206>
 8007922:	1d3b      	adds	r3, r7, #4
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	62bb      	str	r3, [r7, #40]	; 0x28
 8007928:	1d3b      	adds	r3, r7, #4
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007930:	b29b      	uxth	r3, r3
 8007932:	461a      	mov	r2, r3
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	4413      	add	r3, r2
 8007938:	62bb      	str	r3, [r7, #40]	; 0x28
 800793a:	463b      	mov	r3, r7
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	00da      	lsls	r2, r3, #3
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	4413      	add	r3, r2
 8007946:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
 800794c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007950:	2b3e      	cmp	r3, #62	; 0x3e
 8007952:	d91c      	bls.n	800798e <USB_EPStartXfer+0x1a8>
 8007954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007958:	095b      	lsrs	r3, r3, #5
 800795a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800795e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	2b00      	cmp	r3, #0
 8007968:	d104      	bne.n	8007974 <USB_EPStartXfer+0x18e>
 800796a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800796e:	3b01      	subs	r3, #1
 8007970:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007974:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007978:	b29b      	uxth	r3, r3
 800797a:	029b      	lsls	r3, r3, #10
 800797c:	b29b      	uxth	r3, r3
 800797e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007986:	b29a      	uxth	r2, r3
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	801a      	strh	r2, [r3, #0]
 800798c:	e04a      	b.n	8007a24 <USB_EPStartXfer+0x23e>
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007992:	2b00      	cmp	r3, #0
 8007994:	d112      	bne.n	80079bc <USB_EPStartXfer+0x1d6>
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	801a      	strh	r2, [r3, #0]
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	801a      	strh	r2, [r3, #0]
 80079ba:	e033      	b.n	8007a24 <USB_EPStartXfer+0x23e>
 80079bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d004      	beq.n	80079dc <USB_EPStartXfer+0x1f6>
 80079d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079d6:	3301      	adds	r3, #1
 80079d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	029b      	lsls	r3, r3, #10
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	801a      	strh	r2, [r3, #0]
 80079ea:	e01b      	b.n	8007a24 <USB_EPStartXfer+0x23e>
 80079ec:	463b      	mov	r3, r7
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	785b      	ldrb	r3, [r3, #1]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d116      	bne.n	8007a24 <USB_EPStartXfer+0x23e>
 80079f6:	1d3b      	adds	r3, r7, #4
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	4413      	add	r3, r2
 8007a06:	633b      	str	r3, [r7, #48]	; 0x30
 8007a08:	463b      	mov	r3, r7
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	00da      	lsls	r2, r3, #3
 8007a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a12:	4413      	add	r3, r2
 8007a14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a24:	463b      	mov	r3, r7
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	895b      	ldrh	r3, [r3, #10]
 8007a2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a2e:	463b      	mov	r3, r7
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6959      	ldr	r1, [r3, #20]
 8007a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a3e:	1d38      	adds	r0, r7, #4
 8007a40:	6800      	ldr	r0, [r0, #0]
 8007a42:	f001 f8dc 	bl	8008bfe <USB_WritePMA>
            ep->xfer_buff += len;
 8007a46:	463b      	mov	r3, r7
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	695a      	ldr	r2, [r3, #20]
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a50:	441a      	add	r2, r3
 8007a52:	463b      	mov	r3, r7
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a58:	463b      	mov	r3, r7
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6a1a      	ldr	r2, [r3, #32]
 8007a5e:	463b      	mov	r3, r7
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d909      	bls.n	8007a7c <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8007a68:	463b      	mov	r3, r7
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6a1a      	ldr	r2, [r3, #32]
 8007a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a72:	1ad2      	subs	r2, r2, r3
 8007a74:	463b      	mov	r3, r7
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	621a      	str	r2, [r3, #32]
 8007a7a:	e008      	b.n	8007a8e <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007a86:	463b      	mov	r3, r7
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a8e:	463b      	mov	r3, r7
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	785b      	ldrb	r3, [r3, #1]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d164      	bne.n	8007b62 <USB_EPStartXfer+0x37c>
 8007a98:	1d3b      	adds	r3, r7, #4
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	1d3b      	adds	r3, r7, #4
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	4413      	add	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
 8007ab0:	463b      	mov	r3, r7
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	00da      	lsls	r2, r3, #3
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	4413      	add	r3, r2
 8007abc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ac0:	617b      	str	r3, [r7, #20]
 8007ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ac8:	d91c      	bls.n	8007b04 <USB_EPStartXfer+0x31e>
 8007aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad8:	f003 031f 	and.w	r3, r3, #31
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d104      	bne.n	8007aea <USB_EPStartXfer+0x304>
 8007ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	029b      	lsls	r3, r3, #10
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	801a      	strh	r2, [r3, #0]
 8007b02:	e04d      	b.n	8007ba0 <USB_EPStartXfer+0x3ba>
 8007b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d112      	bne.n	8007b32 <USB_EPStartXfer+0x34c>
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	801a      	strh	r2, [r3, #0]
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	801a      	strh	r2, [r3, #0]
 8007b30:	e036      	b.n	8007ba0 <USB_EPStartXfer+0x3ba>
 8007b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b36:	085b      	lsrs	r3, r3, #1
 8007b38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d004      	beq.n	8007b52 <USB_EPStartXfer+0x36c>
 8007b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	029b      	lsls	r3, r3, #10
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	801a      	strh	r2, [r3, #0]
 8007b60:	e01e      	b.n	8007ba0 <USB_EPStartXfer+0x3ba>
 8007b62:	463b      	mov	r3, r7
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	785b      	ldrb	r3, [r3, #1]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d119      	bne.n	8007ba0 <USB_EPStartXfer+0x3ba>
 8007b6c:	1d3b      	adds	r3, r7, #4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	623b      	str	r3, [r7, #32]
 8007b72:	1d3b      	adds	r3, r7, #4
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	4413      	add	r3, r2
 8007b82:	623b      	str	r3, [r7, #32]
 8007b84:	463b      	mov	r3, r7
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	00da      	lsls	r2, r3, #3
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007ba0:	463b      	mov	r3, r7
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	891b      	ldrh	r3, [r3, #8]
 8007ba6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007baa:	463b      	mov	r3, r7
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6959      	ldr	r1, [r3, #20]
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007bba:	1d38      	adds	r0, r7, #4
 8007bbc:	6800      	ldr	r0, [r0, #0]
 8007bbe:	f001 f81e 	bl	8008bfe <USB_WritePMA>
 8007bc2:	e2fd      	b.n	80081c0 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bc4:	463b      	mov	r3, r7
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d164      	bne.n	8007c98 <USB_EPStartXfer+0x4b2>
 8007bce:	1d3b      	adds	r3, r7, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bd4:	1d3b      	adds	r3, r7, #4
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007be2:	4413      	add	r3, r2
 8007be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007be6:	463b      	mov	r3, r7
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	00da      	lsls	r2, r3, #3
 8007bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8007bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bfc:	2b3e      	cmp	r3, #62	; 0x3e
 8007bfe:	d91c      	bls.n	8007c3a <USB_EPStartXfer+0x454>
 8007c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c04:	095b      	lsrs	r3, r3, #5
 8007c06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c0e:	f003 031f 	and.w	r3, r3, #31
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d104      	bne.n	8007c20 <USB_EPStartXfer+0x43a>
 8007c16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	029b      	lsls	r3, r3, #10
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c36:	801a      	strh	r2, [r3, #0]
 8007c38:	e04d      	b.n	8007cd6 <USB_EPStartXfer+0x4f0>
 8007c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d112      	bne.n	8007c68 <USB_EPStartXfer+0x482>
 8007c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c50:	801a      	strh	r2, [r3, #0]
 8007c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c64:	801a      	strh	r2, [r3, #0]
 8007c66:	e036      	b.n	8007cd6 <USB_EPStartXfer+0x4f0>
 8007c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c6c:	085b      	lsrs	r3, r3, #1
 8007c6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d004      	beq.n	8007c88 <USB_EPStartXfer+0x4a2>
 8007c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c82:	3301      	adds	r3, #1
 8007c84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	029b      	lsls	r3, r3, #10
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c94:	801a      	strh	r2, [r3, #0]
 8007c96:	e01e      	b.n	8007cd6 <USB_EPStartXfer+0x4f0>
 8007c98:	463b      	mov	r3, r7
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	785b      	ldrb	r3, [r3, #1]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d119      	bne.n	8007cd6 <USB_EPStartXfer+0x4f0>
 8007ca2:	1d3b      	adds	r3, r7, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ca8:	1d3b      	adds	r3, r7, #4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb6:	4413      	add	r3, r2
 8007cb8:	653b      	str	r3, [r7, #80]	; 0x50
 8007cba:	463b      	mov	r3, r7
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	00da      	lsls	r2, r3, #3
 8007cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	891b      	ldrh	r3, [r3, #8]
 8007cdc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6959      	ldr	r1, [r3, #20]
 8007ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007cf0:	1d38      	adds	r0, r7, #4
 8007cf2:	6800      	ldr	r0, [r0, #0]
 8007cf4:	f000 ff83 	bl	8008bfe <USB_WritePMA>
            ep->xfer_buff += len;
 8007cf8:	463b      	mov	r3, r7
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	695a      	ldr	r2, [r3, #20]
 8007cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d02:	441a      	add	r2, r3
 8007d04:	463b      	mov	r3, r7
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6a1a      	ldr	r2, [r3, #32]
 8007d10:	463b      	mov	r3, r7
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d909      	bls.n	8007d2e <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6a1a      	ldr	r2, [r3, #32]
 8007d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d24:	1ad2      	subs	r2, r2, r3
 8007d26:	463b      	mov	r3, r7
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	621a      	str	r2, [r3, #32]
 8007d2c:	e008      	b.n	8007d40 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007d2e:	463b      	mov	r3, r7
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6a1b      	ldr	r3, [r3, #32]
 8007d34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007d38:	463b      	mov	r3, r7
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d40:	1d3b      	adds	r3, r7, #4
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	643b      	str	r3, [r7, #64]	; 0x40
 8007d46:	463b      	mov	r3, r7
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	785b      	ldrb	r3, [r3, #1]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d164      	bne.n	8007e1a <USB_EPStartXfer+0x634>
 8007d50:	1d3b      	adds	r3, r7, #4
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d56:	1d3b      	adds	r3, r7, #4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	4413      	add	r3, r2
 8007d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d68:	463b      	mov	r3, r7
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	00da      	lsls	r2, r3, #3
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	4413      	add	r3, r2
 8007d74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
 8007d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d80:	d91c      	bls.n	8007dbc <USB_EPStartXfer+0x5d6>
 8007d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d86:	095b      	lsrs	r3, r3, #5
 8007d88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d90:	f003 031f 	and.w	r3, r3, #31
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d104      	bne.n	8007da2 <USB_EPStartXfer+0x5bc>
 8007d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	029b      	lsls	r3, r3, #10
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	801a      	strh	r2, [r3, #0]
 8007dba:	e04a      	b.n	8007e52 <USB_EPStartXfer+0x66c>
 8007dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d112      	bne.n	8007dea <USB_EPStartXfer+0x604>
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd2:	801a      	strh	r2, [r3, #0]
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de6:	801a      	strh	r2, [r3, #0]
 8007de8:	e033      	b.n	8007e52 <USB_EPStartXfer+0x66c>
 8007dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dee:	085b      	lsrs	r3, r3, #1
 8007df0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d004      	beq.n	8007e0a <USB_EPStartXfer+0x624>
 8007e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e04:	3301      	adds	r3, #1
 8007e06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	029b      	lsls	r3, r3, #10
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e16:	801a      	strh	r2, [r3, #0]
 8007e18:	e01b      	b.n	8007e52 <USB_EPStartXfer+0x66c>
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d116      	bne.n	8007e52 <USB_EPStartXfer+0x66c>
 8007e24:	1d3b      	adds	r3, r7, #4
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e32:	4413      	add	r3, r2
 8007e34:	643b      	str	r3, [r7, #64]	; 0x40
 8007e36:	463b      	mov	r3, r7
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	00da      	lsls	r2, r3, #3
 8007e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e40:	4413      	add	r3, r2
 8007e42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e52:	463b      	mov	r3, r7
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	895b      	ldrh	r3, [r3, #10]
 8007e58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6959      	ldr	r1, [r3, #20]
 8007e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e6c:	1d38      	adds	r0, r7, #4
 8007e6e:	6800      	ldr	r0, [r0, #0]
 8007e70:	f000 fec5 	bl	8008bfe <USB_WritePMA>
 8007e74:	e1a4      	b.n	80081c0 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e76:	463b      	mov	r3, r7
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007e80:	1d3b      	adds	r3, r7, #4
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	463b      	mov	r3, r7
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e9a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007e9e:	1d3b      	adds	r3, r7, #4
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	441a      	add	r2, r3
 8007eac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ec4:	1d3b      	adds	r3, r7, #4
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eca:	1d3b      	adds	r3, r7, #4
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ed8:	4413      	add	r3, r2
 8007eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007edc:	463b      	mov	r3, r7
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	00da      	lsls	r2, r3, #3
 8007ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007eec:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ef6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ef8:	463b      	mov	r3, r7
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	891b      	ldrh	r3, [r3, #8]
 8007efe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f02:	463b      	mov	r3, r7
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6959      	ldr	r1, [r3, #20]
 8007f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f12:	1d38      	adds	r0, r7, #4
 8007f14:	6800      	ldr	r0, [r0, #0]
 8007f16:	f000 fe72 	bl	8008bfe <USB_WritePMA>
 8007f1a:	e151      	b.n	80081c0 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007f1c:	463b      	mov	r3, r7
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6a1a      	ldr	r2, [r3, #32]
 8007f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f26:	1ad2      	subs	r2, r2, r3
 8007f28:	463b      	mov	r3, r7
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f2e:	1d3b      	adds	r3, r7, #4
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	463b      	mov	r3, r7
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 809b 	beq.w	8008080 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f4a:	1d3b      	adds	r3, r7, #4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	673b      	str	r3, [r7, #112]	; 0x70
 8007f50:	463b      	mov	r3, r7
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	785b      	ldrb	r3, [r3, #1]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d164      	bne.n	8008024 <USB_EPStartXfer+0x83e>
 8007f5a:	1d3b      	adds	r3, r7, #4
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f60:	1d3b      	adds	r3, r7, #4
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f6e:	4413      	add	r3, r2
 8007f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f72:	463b      	mov	r3, r7
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	00da      	lsls	r2, r3, #3
 8007f7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f82:	667b      	str	r3, [r7, #100]	; 0x64
 8007f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f88:	2b3e      	cmp	r3, #62	; 0x3e
 8007f8a:	d91c      	bls.n	8007fc6 <USB_EPStartXfer+0x7e0>
 8007f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f90:	095b      	lsrs	r3, r3, #5
 8007f92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f9a:	f003 031f 	and.w	r3, r3, #31
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d104      	bne.n	8007fac <USB_EPStartXfer+0x7c6>
 8007fa2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007fac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	029b      	lsls	r3, r3, #10
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc2:	801a      	strh	r2, [r3, #0]
 8007fc4:	e04a      	b.n	800805c <USB_EPStartXfer+0x876>
 8007fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d112      	bne.n	8007ff4 <USB_EPStartXfer+0x80e>
 8007fce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fdc:	801a      	strh	r2, [r3, #0]
 8007fde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ff0:	801a      	strh	r2, [r3, #0]
 8007ff2:	e033      	b.n	800805c <USB_EPStartXfer+0x876>
 8007ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff8:	085b      	lsrs	r3, r3, #1
 8007ffa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d004      	beq.n	8008014 <USB_EPStartXfer+0x82e>
 800800a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800800e:	3301      	adds	r3, #1
 8008010:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008014:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008018:	b29b      	uxth	r3, r3
 800801a:	029b      	lsls	r3, r3, #10
 800801c:	b29a      	uxth	r2, r3
 800801e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008020:	801a      	strh	r2, [r3, #0]
 8008022:	e01b      	b.n	800805c <USB_EPStartXfer+0x876>
 8008024:	463b      	mov	r3, r7
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	785b      	ldrb	r3, [r3, #1]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d116      	bne.n	800805c <USB_EPStartXfer+0x876>
 800802e:	1d3b      	adds	r3, r7, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008036:	b29b      	uxth	r3, r3
 8008038:	461a      	mov	r2, r3
 800803a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800803c:	4413      	add	r3, r2
 800803e:	673b      	str	r3, [r7, #112]	; 0x70
 8008040:	463b      	mov	r3, r7
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	00da      	lsls	r2, r3, #3
 8008048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800804a:	4413      	add	r3, r2
 800804c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008050:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008056:	b29a      	uxth	r2, r3
 8008058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800805a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800805c:	463b      	mov	r3, r7
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	895b      	ldrh	r3, [r3, #10]
 8008062:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008066:	463b      	mov	r3, r7
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	6959      	ldr	r1, [r3, #20]
 800806c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008070:	b29b      	uxth	r3, r3
 8008072:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008076:	1d38      	adds	r0, r7, #4
 8008078:	6800      	ldr	r0, [r0, #0]
 800807a:	f000 fdc0 	bl	8008bfe <USB_WritePMA>
 800807e:	e09f      	b.n	80081c0 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008080:	463b      	mov	r3, r7
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	785b      	ldrb	r3, [r3, #1]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d164      	bne.n	8008154 <USB_EPStartXfer+0x96e>
 800808a:	1d3b      	adds	r3, r7, #4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008090:	1d3b      	adds	r3, r7, #4
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008098:	b29b      	uxth	r3, r3
 800809a:	461a      	mov	r2, r3
 800809c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800809e:	4413      	add	r3, r2
 80080a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80080a2:	463b      	mov	r3, r7
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	00da      	lsls	r2, r3, #3
 80080aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080ac:	4413      	add	r3, r2
 80080ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80080b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080b8:	2b3e      	cmp	r3, #62	; 0x3e
 80080ba:	d91c      	bls.n	80080f6 <USB_EPStartXfer+0x910>
 80080bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c0:	095b      	lsrs	r3, r3, #5
 80080c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80080c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ca:	f003 031f 	and.w	r3, r3, #31
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d104      	bne.n	80080dc <USB_EPStartXfer+0x8f6>
 80080d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80080d6:	3b01      	subs	r3, #1
 80080d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80080dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	029b      	lsls	r3, r3, #10
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080f2:	801a      	strh	r2, [r3, #0]
 80080f4:	e053      	b.n	800819e <USB_EPStartXfer+0x9b8>
 80080f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d112      	bne.n	8008124 <USB_EPStartXfer+0x93e>
 80080fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008108:	b29a      	uxth	r2, r3
 800810a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800810c:	801a      	strh	r2, [r3, #0]
 800810e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800811c:	b29a      	uxth	r2, r3
 800811e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008120:	801a      	strh	r2, [r3, #0]
 8008122:	e03c      	b.n	800819e <USB_EPStartXfer+0x9b8>
 8008124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008128:	085b      	lsrs	r3, r3, #1
 800812a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800812e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d004      	beq.n	8008144 <USB_EPStartXfer+0x95e>
 800813a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800813e:	3301      	adds	r3, #1
 8008140:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008144:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008148:	b29b      	uxth	r3, r3
 800814a:	029b      	lsls	r3, r3, #10
 800814c:	b29a      	uxth	r2, r3
 800814e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008150:	801a      	strh	r2, [r3, #0]
 8008152:	e024      	b.n	800819e <USB_EPStartXfer+0x9b8>
 8008154:	463b      	mov	r3, r7
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d11f      	bne.n	800819e <USB_EPStartXfer+0x9b8>
 800815e:	1d3b      	adds	r3, r7, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008166:	1d3b      	adds	r3, r7, #4
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800816e:	b29b      	uxth	r3, r3
 8008170:	461a      	mov	r2, r3
 8008172:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008176:	4413      	add	r3, r2
 8008178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800817c:	463b      	mov	r3, r7
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	00da      	lsls	r2, r3, #3
 8008184:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008188:	4413      	add	r3, r2
 800818a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800818e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008196:	b29a      	uxth	r2, r3
 8008198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800819c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800819e:	463b      	mov	r3, r7
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	891b      	ldrh	r3, [r3, #8]
 80081a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081a8:	463b      	mov	r3, r7
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6959      	ldr	r1, [r3, #20]
 80081ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80081b8:	1d38      	adds	r0, r7, #4
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	f000 fd1f 	bl	8008bfe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80081c0:	1d3b      	adds	r3, r7, #4
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	463b      	mov	r3, r7
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081da:	817b      	strh	r3, [r7, #10]
 80081dc:	897b      	ldrh	r3, [r7, #10]
 80081de:	f083 0310 	eor.w	r3, r3, #16
 80081e2:	817b      	strh	r3, [r7, #10]
 80081e4:	897b      	ldrh	r3, [r7, #10]
 80081e6:	f083 0320 	eor.w	r3, r3, #32
 80081ea:	817b      	strh	r3, [r7, #10]
 80081ec:	1d3b      	adds	r3, r7, #4
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	463b      	mov	r3, r7
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	441a      	add	r2, r3
 80081fa:	897b      	ldrh	r3, [r7, #10]
 80081fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800820c:	b29b      	uxth	r3, r3
 800820e:	8013      	strh	r3, [r2, #0]
 8008210:	e3b5      	b.n	800897e <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008212:	463b      	mov	r3, r7
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	7b1b      	ldrb	r3, [r3, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f040 8090 	bne.w	800833e <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800821e:	463b      	mov	r3, r7
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	463b      	mov	r3, r7
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	429a      	cmp	r2, r3
 800822c:	d90e      	bls.n	800824c <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800822e:	463b      	mov	r3, r7
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008238:	463b      	mov	r3, r7
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	699a      	ldr	r2, [r3, #24]
 800823e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008242:	1ad2      	subs	r2, r2, r3
 8008244:	463b      	mov	r3, r7
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	619a      	str	r2, [r3, #24]
 800824a:	e008      	b.n	800825e <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800824c:	463b      	mov	r3, r7
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008256:	463b      	mov	r3, r7
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2200      	movs	r2, #0
 800825c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800825e:	1d3b      	adds	r3, r7, #4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008266:	1d3b      	adds	r3, r7, #4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800826e:	b29b      	uxth	r3, r3
 8008270:	461a      	mov	r2, r3
 8008272:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008276:	4413      	add	r3, r2
 8008278:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800827c:	463b      	mov	r3, r7
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	00da      	lsls	r2, r3, #3
 8008284:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008288:	4413      	add	r3, r2
 800828a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800828e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008296:	2b3e      	cmp	r3, #62	; 0x3e
 8008298:	d91d      	bls.n	80082d6 <USB_EPStartXfer+0xaf0>
 800829a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800829e:	095b      	lsrs	r3, r3, #5
 80082a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a8:	f003 031f 	and.w	r3, r3, #31
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <USB_EPStartXfer+0xad4>
 80082b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082b4:	3b01      	subs	r3, #1
 80082b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082be:	b29b      	uxth	r3, r3
 80082c0:	029b      	lsls	r3, r3, #10
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082d2:	801a      	strh	r2, [r3, #0]
 80082d4:	e325      	b.n	8008922 <USB_EPStartXfer+0x113c>
 80082d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d116      	bne.n	800830c <USB_EPStartXfer+0xb26>
 80082de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082f0:	801a      	strh	r2, [r3, #0]
 80082f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008302:	b29a      	uxth	r2, r3
 8008304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008308:	801a      	strh	r2, [r3, #0]
 800830a:	e30a      	b.n	8008922 <USB_EPStartXfer+0x113c>
 800830c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008310:	085b      	lsrs	r3, r3, #1
 8008312:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d004      	beq.n	800832c <USB_EPStartXfer+0xb46>
 8008322:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008326:	3301      	adds	r3, #1
 8008328:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800832c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008330:	b29b      	uxth	r3, r3
 8008332:	029b      	lsls	r3, r3, #10
 8008334:	b29a      	uxth	r2, r3
 8008336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	e2f1      	b.n	8008922 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800833e:	463b      	mov	r3, r7
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	78db      	ldrb	r3, [r3, #3]
 8008344:	2b02      	cmp	r3, #2
 8008346:	f040 818f 	bne.w	8008668 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800834a:	463b      	mov	r3, r7
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	785b      	ldrb	r3, [r3, #1]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d175      	bne.n	8008440 <USB_EPStartXfer+0xc5a>
 8008354:	1d3b      	adds	r3, r7, #4
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800835c:	1d3b      	adds	r3, r7, #4
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008364:	b29b      	uxth	r3, r3
 8008366:	461a      	mov	r2, r3
 8008368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800836c:	4413      	add	r3, r2
 800836e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008372:	463b      	mov	r3, r7
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	00da      	lsls	r2, r3, #3
 800837a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800837e:	4413      	add	r3, r2
 8008380:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008388:	463b      	mov	r3, r7
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b3e      	cmp	r3, #62	; 0x3e
 8008390:	d91f      	bls.n	80083d2 <USB_EPStartXfer+0xbec>
 8008392:	463b      	mov	r3, r7
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	095b      	lsrs	r3, r3, #5
 800839a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800839e:	463b      	mov	r3, r7
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	f003 031f 	and.w	r3, r3, #31
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d104      	bne.n	80083b6 <USB_EPStartXfer+0xbd0>
 80083ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b0:	3b01      	subs	r3, #1
 80083b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	029b      	lsls	r3, r3, #10
 80083be:	b29b      	uxth	r3, r3
 80083c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083ce:	801a      	strh	r2, [r3, #0]
 80083d0:	e05c      	b.n	800848c <USB_EPStartXfer+0xca6>
 80083d2:	463b      	mov	r3, r7
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d116      	bne.n	800840a <USB_EPStartXfer+0xc24>
 80083dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083ee:	801a      	strh	r2, [r3, #0]
 80083f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008400:	b29a      	uxth	r2, r3
 8008402:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008406:	801a      	strh	r2, [r3, #0]
 8008408:	e040      	b.n	800848c <USB_EPStartXfer+0xca6>
 800840a:	463b      	mov	r3, r7
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	085b      	lsrs	r3, r3, #1
 8008412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008416:	463b      	mov	r3, r7
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b00      	cmp	r3, #0
 8008422:	d004      	beq.n	800842e <USB_EPStartXfer+0xc48>
 8008424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008428:	3301      	adds	r3, #1
 800842a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800842e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008432:	b29b      	uxth	r3, r3
 8008434:	029b      	lsls	r3, r3, #10
 8008436:	b29a      	uxth	r2, r3
 8008438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800843c:	801a      	strh	r2, [r3, #0]
 800843e:	e025      	b.n	800848c <USB_EPStartXfer+0xca6>
 8008440:	463b      	mov	r3, r7
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	785b      	ldrb	r3, [r3, #1]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d120      	bne.n	800848c <USB_EPStartXfer+0xca6>
 800844a:	1d3b      	adds	r3, r7, #4
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008452:	1d3b      	adds	r3, r7, #4
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800845a:	b29b      	uxth	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008462:	4413      	add	r3, r2
 8008464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008468:	463b      	mov	r3, r7
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	00da      	lsls	r2, r3, #3
 8008470:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008474:	4413      	add	r3, r2
 8008476:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800847a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800847e:	463b      	mov	r3, r7
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	b29a      	uxth	r2, r3
 8008486:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800848a:	801a      	strh	r2, [r3, #0]
 800848c:	1d3b      	adds	r3, r7, #4
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008494:	463b      	mov	r3, r7
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	785b      	ldrb	r3, [r3, #1]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d175      	bne.n	800858a <USB_EPStartXfer+0xda4>
 800849e:	1d3b      	adds	r3, r7, #4
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084a6:	1d3b      	adds	r3, r7, #4
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	461a      	mov	r2, r3
 80084b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084b6:	4413      	add	r3, r2
 80084b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084bc:	463b      	mov	r3, r7
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	00da      	lsls	r2, r3, #3
 80084c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084c8:	4413      	add	r3, r2
 80084ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084d2:	463b      	mov	r3, r7
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	2b3e      	cmp	r3, #62	; 0x3e
 80084da:	d91f      	bls.n	800851c <USB_EPStartXfer+0xd36>
 80084dc:	463b      	mov	r3, r7
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	095b      	lsrs	r3, r3, #5
 80084e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084e8:	463b      	mov	r3, r7
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	f003 031f 	and.w	r3, r3, #31
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d104      	bne.n	8008500 <USB_EPStartXfer+0xd1a>
 80084f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084fa:	3b01      	subs	r3, #1
 80084fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008504:	b29b      	uxth	r3, r3
 8008506:	029b      	lsls	r3, r3, #10
 8008508:	b29b      	uxth	r3, r3
 800850a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800850e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008512:	b29a      	uxth	r2, r3
 8008514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008518:	801a      	strh	r2, [r3, #0]
 800851a:	e058      	b.n	80085ce <USB_EPStartXfer+0xde8>
 800851c:	463b      	mov	r3, r7
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d116      	bne.n	8008554 <USB_EPStartXfer+0xd6e>
 8008526:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	b29b      	uxth	r3, r3
 800852e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008532:	b29a      	uxth	r2, r3
 8008534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008538:	801a      	strh	r2, [r3, #0]
 800853a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	b29b      	uxth	r3, r3
 8008542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800854a:	b29a      	uxth	r2, r3
 800854c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008550:	801a      	strh	r2, [r3, #0]
 8008552:	e03c      	b.n	80085ce <USB_EPStartXfer+0xde8>
 8008554:	463b      	mov	r3, r7
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	085b      	lsrs	r3, r3, #1
 800855c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008560:	463b      	mov	r3, r7
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d004      	beq.n	8008578 <USB_EPStartXfer+0xd92>
 800856e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008572:	3301      	adds	r3, #1
 8008574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800857c:	b29b      	uxth	r3, r3
 800857e:	029b      	lsls	r3, r3, #10
 8008580:	b29a      	uxth	r2, r3
 8008582:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008586:	801a      	strh	r2, [r3, #0]
 8008588:	e021      	b.n	80085ce <USB_EPStartXfer+0xde8>
 800858a:	463b      	mov	r3, r7
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	785b      	ldrb	r3, [r3, #1]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d11c      	bne.n	80085ce <USB_EPStartXfer+0xde8>
 8008594:	1d3b      	adds	r3, r7, #4
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800859c:	b29b      	uxth	r3, r3
 800859e:	461a      	mov	r2, r3
 80085a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085a4:	4413      	add	r3, r2
 80085a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80085aa:	463b      	mov	r3, r7
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	00da      	lsls	r2, r3, #3
 80085b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085b6:	4413      	add	r3, r2
 80085b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085c0:	463b      	mov	r3, r7
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085cc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80085ce:	463b      	mov	r3, r7
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 81a4 	beq.w	8008922 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80085da:	1d3b      	adds	r3, r7, #4
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	463b      	mov	r3, r7
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80085ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80085f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <USB_EPStartXfer+0xe20>
 80085fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80085fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10d      	bne.n	8008622 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008606:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800860a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800860e:	2b00      	cmp	r3, #0
 8008610:	f040 8187 	bne.w	8008922 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008614:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861c:	2b00      	cmp	r3, #0
 800861e:	f040 8180 	bne.w	8008922 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008622:	1d3b      	adds	r3, r7, #4
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	463b      	mov	r3, r7
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	b29b      	uxth	r3, r3
 8008634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008640:	1d3b      	adds	r3, r7, #4
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	463b      	mov	r3, r7
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	441a      	add	r2, r3
 800864e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800865a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800865e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008662:	b29b      	uxth	r3, r3
 8008664:	8013      	strh	r3, [r2, #0]
 8008666:	e15c      	b.n	8008922 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008668:	463b      	mov	r3, r7
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	78db      	ldrb	r3, [r3, #3]
 800866e:	2b01      	cmp	r3, #1
 8008670:	f040 8155 	bne.w	800891e <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008674:	463b      	mov	r3, r7
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699a      	ldr	r2, [r3, #24]
 800867a:	463b      	mov	r3, r7
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	429a      	cmp	r2, r3
 8008682:	d90e      	bls.n	80086a2 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8008684:	463b      	mov	r3, r7
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800868e:	463b      	mov	r3, r7
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	699a      	ldr	r2, [r3, #24]
 8008694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008698:	1ad2      	subs	r2, r2, r3
 800869a:	463b      	mov	r3, r7
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	619a      	str	r2, [r3, #24]
 80086a0:	e008      	b.n	80086b4 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 80086a2:	463b      	mov	r3, r7
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80086ac:	463b      	mov	r3, r7
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2200      	movs	r2, #0
 80086b2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80086b4:	463b      	mov	r3, r7
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	785b      	ldrb	r3, [r3, #1]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d16f      	bne.n	800879e <USB_EPStartXfer+0xfb8>
 80086be:	1d3b      	adds	r3, r7, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086c6:	1d3b      	adds	r3, r7, #4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	461a      	mov	r2, r3
 80086d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80086d6:	4413      	add	r3, r2
 80086d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086dc:	463b      	mov	r3, r7
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	00da      	lsls	r2, r3, #3
 80086e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80086e8:	4413      	add	r3, r2
 80086ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f6:	2b3e      	cmp	r3, #62	; 0x3e
 80086f8:	d91d      	bls.n	8008736 <USB_EPStartXfer+0xf50>
 80086fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086fe:	095b      	lsrs	r3, r3, #5
 8008700:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008708:	f003 031f 	and.w	r3, r3, #31
 800870c:	2b00      	cmp	r3, #0
 800870e:	d104      	bne.n	800871a <USB_EPStartXfer+0xf34>
 8008710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008714:	3b01      	subs	r3, #1
 8008716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800871a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800871e:	b29b      	uxth	r3, r3
 8008720:	029b      	lsls	r3, r3, #10
 8008722:	b29b      	uxth	r3, r3
 8008724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800872c:	b29a      	uxth	r2, r3
 800872e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008732:	801a      	strh	r2, [r3, #0]
 8008734:	e058      	b.n	80087e8 <USB_EPStartXfer+0x1002>
 8008736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800873a:	2b00      	cmp	r3, #0
 800873c:	d116      	bne.n	800876c <USB_EPStartXfer+0xf86>
 800873e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	b29b      	uxth	r3, r3
 8008746:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800874a:	b29a      	uxth	r2, r3
 800874c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008750:	801a      	strh	r2, [r3, #0]
 8008752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	b29b      	uxth	r3, r3
 800875a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800875e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008762:	b29a      	uxth	r2, r3
 8008764:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008768:	801a      	strh	r2, [r3, #0]
 800876a:	e03d      	b.n	80087e8 <USB_EPStartXfer+0x1002>
 800876c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	d004      	beq.n	800878c <USB_EPStartXfer+0xfa6>
 8008782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008786:	3301      	adds	r3, #1
 8008788:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800878c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008790:	b29b      	uxth	r3, r3
 8008792:	029b      	lsls	r3, r3, #10
 8008794:	b29a      	uxth	r2, r3
 8008796:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800879a:	801a      	strh	r2, [r3, #0]
 800879c:	e024      	b.n	80087e8 <USB_EPStartXfer+0x1002>
 800879e:	463b      	mov	r3, r7
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	785b      	ldrb	r3, [r3, #1]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d11f      	bne.n	80087e8 <USB_EPStartXfer+0x1002>
 80087a8:	1d3b      	adds	r3, r7, #4
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80087b0:	1d3b      	adds	r3, r7, #4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	461a      	mov	r2, r3
 80087bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087c0:	4413      	add	r3, r2
 80087c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80087c6:	463b      	mov	r3, r7
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	00da      	lsls	r2, r3, #3
 80087ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087d2:	4413      	add	r3, r2
 80087d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80087e6:	801a      	strh	r2, [r3, #0]
 80087e8:	1d3b      	adds	r3, r7, #4
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087f0:	463b      	mov	r3, r7
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	785b      	ldrb	r3, [r3, #1]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d16f      	bne.n	80088da <USB_EPStartXfer+0x10f4>
 80087fa:	1d3b      	adds	r3, r7, #4
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008802:	1d3b      	adds	r3, r7, #4
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800880a:	b29b      	uxth	r3, r3
 800880c:	461a      	mov	r2, r3
 800880e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008812:	4413      	add	r3, r2
 8008814:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008818:	463b      	mov	r3, r7
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	00da      	lsls	r2, r3, #3
 8008820:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008824:	4413      	add	r3, r2
 8008826:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800882a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800882e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008832:	2b3e      	cmp	r3, #62	; 0x3e
 8008834:	d91d      	bls.n	8008872 <USB_EPStartXfer+0x108c>
 8008836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800883a:	095b      	lsrs	r3, r3, #5
 800883c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008844:	f003 031f 	and.w	r3, r3, #31
 8008848:	2b00      	cmp	r3, #0
 800884a:	d104      	bne.n	8008856 <USB_EPStartXfer+0x1070>
 800884c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008850:	3b01      	subs	r3, #1
 8008852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008856:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800885a:	b29b      	uxth	r3, r3
 800885c:	029b      	lsls	r3, r3, #10
 800885e:	b29b      	uxth	r3, r3
 8008860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008868:	b29a      	uxth	r2, r3
 800886a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800886e:	801a      	strh	r2, [r3, #0]
 8008870:	e057      	b.n	8008922 <USB_EPStartXfer+0x113c>
 8008872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008876:	2b00      	cmp	r3, #0
 8008878:	d116      	bne.n	80088a8 <USB_EPStartXfer+0x10c2>
 800887a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	b29b      	uxth	r3, r3
 8008882:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008886:	b29a      	uxth	r2, r3
 8008888:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800888c:	801a      	strh	r2, [r3, #0]
 800888e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	b29b      	uxth	r3, r3
 8008896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800889a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800889e:	b29a      	uxth	r2, r3
 80088a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088a4:	801a      	strh	r2, [r3, #0]
 80088a6:	e03c      	b.n	8008922 <USB_EPStartXfer+0x113c>
 80088a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ac:	085b      	lsrs	r3, r3, #1
 80088ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d004      	beq.n	80088c8 <USB_EPStartXfer+0x10e2>
 80088be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088c2:	3301      	adds	r3, #1
 80088c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	029b      	lsls	r3, r3, #10
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088d6:	801a      	strh	r2, [r3, #0]
 80088d8:	e023      	b.n	8008922 <USB_EPStartXfer+0x113c>
 80088da:	463b      	mov	r3, r7
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d11e      	bne.n	8008922 <USB_EPStartXfer+0x113c>
 80088e4:	1d3b      	adds	r3, r7, #4
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	461a      	mov	r2, r3
 80088f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80088f4:	4413      	add	r3, r2
 80088f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088fa:	463b      	mov	r3, r7
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	00da      	lsls	r2, r3, #3
 8008902:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008906:	4413      	add	r3, r2
 8008908:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800890c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008914:	b29a      	uxth	r2, r3
 8008916:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800891a:	801a      	strh	r2, [r3, #0]
 800891c:	e001      	b.n	8008922 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e02e      	b.n	8008980 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008922:	1d3b      	adds	r3, r7, #4
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	463b      	mov	r3, r7
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	b29b      	uxth	r3, r3
 8008934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008940:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008944:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008948:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800894c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008950:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008954:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008958:	1d3b      	adds	r3, r7, #4
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	463b      	mov	r3, r7
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	441a      	add	r2, r3
 8008966:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800896a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800896e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800897a:	b29b      	uxth	r3, r3
 800897c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800898a:	b480      	push	{r7}
 800898c:	b085      	sub	sp, #20
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	785b      	ldrb	r3, [r3, #1]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d020      	beq.n	80089de <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089b2:	81bb      	strh	r3, [r7, #12]
 80089b4:	89bb      	ldrh	r3, [r7, #12]
 80089b6:	f083 0310 	eor.w	r3, r3, #16
 80089ba:	81bb      	strh	r3, [r7, #12]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	441a      	add	r2, r3
 80089c6:	89bb      	ldrh	r3, [r7, #12]
 80089c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d8:	b29b      	uxth	r3, r3
 80089da:	8013      	strh	r3, [r2, #0]
 80089dc:	e01f      	b.n	8008a1e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f4:	81fb      	strh	r3, [r7, #14]
 80089f6:	89fb      	ldrh	r3, [r7, #14]
 80089f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089fc:	81fb      	strh	r3, [r7, #14]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	441a      	add	r2, r3
 8008a08:	89fb      	ldrh	r3, [r7, #14]
 8008a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	7b1b      	ldrb	r3, [r3, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f040 809d 	bne.w	8008b7a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	785b      	ldrb	r3, [r3, #1]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d04c      	beq.n	8008ae2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	823b      	strh	r3, [r7, #16]
 8008a56:	8a3b      	ldrh	r3, [r7, #16]
 8008a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d01b      	beq.n	8008a98 <USB_EPClearStall+0x6c>
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a76:	81fb      	strh	r3, [r7, #14]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	441a      	add	r2, r3
 8008a82:	89fb      	ldrh	r3, [r7, #14]
 8008a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	78db      	ldrb	r3, [r3, #3]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d06c      	beq.n	8008b7a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab6:	81bb      	strh	r3, [r7, #12]
 8008ab8:	89bb      	ldrh	r3, [r7, #12]
 8008aba:	f083 0320 	eor.w	r3, r3, #32
 8008abe:	81bb      	strh	r3, [r7, #12]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	441a      	add	r2, r3
 8008aca:	89bb      	ldrh	r3, [r7, #12]
 8008acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	8013      	strh	r3, [r2, #0]
 8008ae0:	e04b      	b.n	8008b7a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	82fb      	strh	r3, [r7, #22]
 8008af0:	8afb      	ldrh	r3, [r7, #22]
 8008af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d01b      	beq.n	8008b32 <USB_EPClearStall+0x106>
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b10:	82bb      	strh	r3, [r7, #20]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	441a      	add	r2, r3
 8008b1c:	8abb      	ldrh	r3, [r7, #20]
 8008b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	881b      	ldrh	r3, [r3, #0]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b48:	827b      	strh	r3, [r7, #18]
 8008b4a:	8a7b      	ldrh	r3, [r7, #18]
 8008b4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b50:	827b      	strh	r3, [r7, #18]
 8008b52:	8a7b      	ldrh	r3, [r7, #18]
 8008b54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b58:	827b      	strh	r3, [r7, #18]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	441a      	add	r2, r3
 8008b64:	8a7b      	ldrh	r3, [r7, #18]
 8008b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b94:	78fb      	ldrb	r3, [r7, #3]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d103      	bne.n	8008ba2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2280      	movs	r2, #128	; 0x80
 8008b9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b085      	sub	sp, #20
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b08d      	sub	sp, #52	; 0x34
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	80fb      	strh	r3, [r7, #6]
 8008c10:	4613      	mov	r3, r2
 8008c12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008c14:	88bb      	ldrh	r3, [r7, #4]
 8008c16:	3301      	adds	r3, #1
 8008c18:	085b      	lsrs	r3, r3, #1
 8008c1a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c24:	88fa      	ldrh	r2, [r7, #6]
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c2e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c34:	e01b      	b.n	8008c6e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	3301      	adds	r3, #1
 8008c40:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	021b      	lsls	r3, r3, #8
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	3302      	adds	r3, #2
 8008c60:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	3301      	adds	r3, #1
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1e0      	bne.n	8008c36 <USB_WritePMA+0x38>
  }
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	3734      	adds	r7, #52	; 0x34
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b08b      	sub	sp, #44	; 0x2c
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	461a      	mov	r2, r3
 8008c90:	460b      	mov	r3, r1
 8008c92:	80fb      	strh	r3, [r7, #6]
 8008c94:	4613      	mov	r3, r2
 8008c96:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c98:	88bb      	ldrh	r3, [r7, #4]
 8008c9a:	085b      	lsrs	r3, r3, #1
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ca8:	88fa      	ldrh	r2, [r7, #6]
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cb2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb8:	e018      	b.n	8008cec <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	3302      	adds	r3, #2
 8008cc6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	0a1b      	lsrs	r3, r3, #8
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	627b      	str	r3, [r7, #36]	; 0x24
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e3      	bne.n	8008cba <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008cf2:	88bb      	ldrh	r3, [r7, #4]
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d007      	beq.n	8008d0e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	701a      	strb	r2, [r3, #0]
  }
}
 8008d0e:	bf00      	nop
 8008d10:	372c      	adds	r7, #44	; 0x2c
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008d26:	2010      	movs	r0, #16
 8008d28:	f001 fef0 	bl	800ab0c <USBD_static_malloc>
 8008d2c:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d105      	bne.n	8008d40 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	e01b      	b.n	8008d78 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	7c1b      	ldrb	r3, [r3, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d103      	bne.n	8008d58 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2207      	movs	r2, #7
 8008d54:	875a      	strh	r2, [r3, #58]	; 0x3a
 8008d56:	e002      	b.n	8008d5e <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	220a      	movs	r2, #10
 8008d5c:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008d5e:	2304      	movs	r3, #4
 8008d60:	2203      	movs	r2, #3
 8008d62:	2181      	movs	r1, #129	; 0x81
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 fd8a 	bl	800a87e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008d8c:	2181      	movs	r1, #129	; 0x81
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f001 fd9b 	bl	800a8ca <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d009      	beq.n	8008dbe <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008db0:	4618      	mov	r0, r3
 8008db2:	f001 feb9 	bl	800ab28 <USBD_static_free>
    pdev->pClassData = NULL;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dd8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e0e8      	b.n	8008fbe <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d046      	beq.n	8008e86 <USBD_HID_Setup+0xbe>
 8008df8:	2b20      	cmp	r3, #32
 8008dfa:	f040 80d8 	bne.w	8008fae <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	785b      	ldrb	r3, [r3, #1]
 8008e02:	3b02      	subs	r3, #2
 8008e04:	2b09      	cmp	r3, #9
 8008e06:	d836      	bhi.n	8008e76 <USBD_HID_Setup+0xae>
 8008e08:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <USBD_HID_Setup+0x48>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e67 	.word	0x08008e67
 8008e14:	08008e47 	.word	0x08008e47
 8008e18:	08008e77 	.word	0x08008e77
 8008e1c:	08008e77 	.word	0x08008e77
 8008e20:	08008e77 	.word	0x08008e77
 8008e24:	08008e77 	.word	0x08008e77
 8008e28:	08008e77 	.word	0x08008e77
 8008e2c:	08008e77 	.word	0x08008e77
 8008e30:	08008e55 	.word	0x08008e55
 8008e34:	08008e39 	.word	0x08008e39
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	885b      	ldrh	r3, [r3, #2]
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	461a      	mov	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	601a      	str	r2, [r3, #0]
          break;
 8008e44:	e01e      	b.n	8008e84 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f001 f9d8 	bl	800a202 <USBD_CtlSendData>
          break;
 8008e52:	e017      	b.n	8008e84 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	885b      	ldrh	r3, [r3, #2]
 8008e58:	0a1b      	lsrs	r3, r3, #8
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	461a      	mov	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	605a      	str	r2, [r3, #4]
          break;
 8008e64:	e00e      	b.n	8008e84 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f001 f9c7 	bl	800a202 <USBD_CtlSendData>
          break;
 8008e74:	e006      	b.n	8008e84 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 f951 	bl	800a120 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	75fb      	strb	r3, [r7, #23]
          break;
 8008e82:	bf00      	nop
      }
      break;
 8008e84:	e09a      	b.n	8008fbc <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	785b      	ldrb	r3, [r3, #1]
 8008e8a:	2b0b      	cmp	r3, #11
 8008e8c:	f200 8086 	bhi.w	8008f9c <USBD_HID_Setup+0x1d4>
 8008e90:	a201      	add	r2, pc, #4	; (adr r2, 8008e98 <USBD_HID_Setup+0xd0>)
 8008e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e96:	bf00      	nop
 8008e98:	08008ec9 	.word	0x08008ec9
 8008e9c:	08008fab 	.word	0x08008fab
 8008ea0:	08008f9d 	.word	0x08008f9d
 8008ea4:	08008f9d 	.word	0x08008f9d
 8008ea8:	08008f9d 	.word	0x08008f9d
 8008eac:	08008f9d 	.word	0x08008f9d
 8008eb0:	08008ef3 	.word	0x08008ef3
 8008eb4:	08008f9d 	.word	0x08008f9d
 8008eb8:	08008f9d 	.word	0x08008f9d
 8008ebc:	08008f9d 	.word	0x08008f9d
 8008ec0:	08008f4b 	.word	0x08008f4b
 8008ec4:	08008f75 	.word	0x08008f75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d107      	bne.n	8008ee4 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ed4:	f107 030a 	add.w	r3, r7, #10
 8008ed8:	2202      	movs	r2, #2
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f001 f990 	bl	800a202 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ee2:	e063      	b.n	8008fac <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f001 f91a 	bl	800a120 <USBD_CtlError>
            ret = USBD_FAIL;
 8008eec:	2303      	movs	r3, #3
 8008eee:	75fb      	strb	r3, [r7, #23]
          break;
 8008ef0:	e05c      	b.n	8008fac <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	885b      	ldrh	r3, [r3, #2]
 8008ef6:	0a1b      	lsrs	r3, r3, #8
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	2b22      	cmp	r3, #34	; 0x22
 8008efc:	d108      	bne.n	8008f10 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	88db      	ldrh	r3, [r3, #6]
 8008f02:	2b4a      	cmp	r3, #74	; 0x4a
 8008f04:	bf28      	it	cs
 8008f06:	234a      	movcs	r3, #74	; 0x4a
 8008f08:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008f0a:	4b2f      	ldr	r3, [pc, #188]	; (8008fc8 <USBD_HID_Setup+0x200>)
 8008f0c:	613b      	str	r3, [r7, #16]
 8008f0e:	e015      	b.n	8008f3c <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	885b      	ldrh	r3, [r3, #2]
 8008f14:	0a1b      	lsrs	r3, r3, #8
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	2b21      	cmp	r3, #33	; 0x21
 8008f1a:	d108      	bne.n	8008f2e <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8008f1c:	4b2b      	ldr	r3, [pc, #172]	; (8008fcc <USBD_HID_Setup+0x204>)
 8008f1e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	88db      	ldrh	r3, [r3, #6]
 8008f24:	2b09      	cmp	r3, #9
 8008f26:	bf28      	it	cs
 8008f28:	2309      	movcs	r3, #9
 8008f2a:	82bb      	strh	r3, [r7, #20]
 8008f2c:	e006      	b.n	8008f3c <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 f8f5 	bl	800a120 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f36:	2303      	movs	r3, #3
 8008f38:	75fb      	strb	r3, [r7, #23]
            break;
 8008f3a:	e037      	b.n	8008fac <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f3c:	8abb      	ldrh	r3, [r7, #20]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	6939      	ldr	r1, [r7, #16]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 f95d 	bl	800a202 <USBD_CtlSendData>
          break;
 8008f48:	e030      	b.n	8008fac <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d107      	bne.n	8008f66 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3308      	adds	r3, #8
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f001 f94f 	bl	800a202 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f64:	e022      	b.n	8008fac <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 f8d9 	bl	800a120 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	75fb      	strb	r3, [r7, #23]
          break;
 8008f72:	e01b      	b.n	8008fac <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	d106      	bne.n	8008f8e <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	885b      	ldrh	r3, [r3, #2]
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	461a      	mov	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f8c:	e00e      	b.n	8008fac <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f001 f8c5 	bl	800a120 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f96:	2303      	movs	r3, #3
 8008f98:	75fb      	strb	r3, [r7, #23]
          break;
 8008f9a:	e007      	b.n	8008fac <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f001 f8be 	bl	800a120 <USBD_CtlError>
          ret = USBD_FAIL;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	75fb      	strb	r3, [r7, #23]
          break;
 8008fa8:	e000      	b.n	8008fac <USBD_HID_Setup+0x1e4>
          break;
 8008faa:	bf00      	nop
      }
      break;
 8008fac:	e006      	b.n	8008fbc <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 f8b5 	bl	800a120 <USBD_CtlError>
      ret = USBD_FAIL;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8008fba:	bf00      	nop
  }

  return (uint8_t)ret;
 8008fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	200000e4 	.word	0x200000e4
 8008fcc:	200000cc 	.word	0x200000cc

08008fd0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fe4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e013      	b.n	8009018 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d10c      	bne.n	8009016 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	7b1b      	ldrb	r3, [r3, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d108      	bne.n	8009016 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	2201      	movs	r2, #1
 8009008:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800900a:	88fb      	ldrh	r3, [r7, #6]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	2181      	movs	r1, #129	; 0x81
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f001 fd03 	bl	800aa1c <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3718      	adds	r7, #24
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2222      	movs	r2, #34	; 0x22
 800902c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800902e:	4b03      	ldr	r3, [pc, #12]	; (800903c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	20000060 	.word	0x20000060

08009040 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2222      	movs	r2, #34	; 0x22
 800904c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800904e:	4b03      	ldr	r3, [pc, #12]	; (800905c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8009050:	4618      	mov	r0, r3
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	20000084 	.word	0x20000084

08009060 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2222      	movs	r2, #34	; 0x22
 800906c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800906e:	4b03      	ldr	r3, [pc, #12]	; (800907c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009070:	4618      	mov	r0, r3
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	200000a8 	.word	0x200000a8

08009080 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009092:	2200      	movs	r2, #0
 8009094:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	220a      	movs	r2, #10
 80090b0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80090b2:	4b03      	ldr	r3, [pc, #12]	; (80090c0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	200000d8 	.word	0x200000d8

080090c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	4613      	mov	r3, r2
 80090d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80090d8:	2303      	movs	r3, #3
 80090da:	e01f      	b.n	800911c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	79fa      	ldrb	r2, [r7, #7]
 800910e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f001 fb49 	bl	800a7a8 <USBD_LL_Init>
 8009116:	4603      	mov	r3, r0
 8009118:	75fb      	strb	r3, [r7, #23]

  return ret;
 800911a:	7dfb      	ldrb	r3, [r7, #23]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800912e:	2300      	movs	r3, #0
 8009130:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009138:	2303      	movs	r3, #3
 800913a:	e016      	b.n	800916a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800914a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00b      	beq.n	8009168 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	f107 020e 	add.w	r2, r7, #14
 800915c:	4610      	mov	r0, r2
 800915e:	4798      	blx	r3
 8009160:	4602      	mov	r2, r0
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f001 fb64 	bl	800a848 <USBD_LL_Start>
 8009180:	4603      	mov	r3, r0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80091ac:	2303      	movs	r3, #3
 80091ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d009      	beq.n	80091ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	78fa      	ldrb	r2, [r7, #3]
 80091c4:	4611      	mov	r1, r2
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	4798      	blx	r3
 80091ca:	4603      	mov	r3, r0
 80091cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	78fa      	ldrb	r2, [r7, #3]
 80091f8:	4611      	mov	r1, r2
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	4798      	blx	r3
  }

  return USBD_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	4618      	mov	r0, r3
 800921c:	f000 ff46 	bl	800a0ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800922e:	461a      	mov	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800923c:	f003 031f 	and.w	r3, r3, #31
 8009240:	2b02      	cmp	r3, #2
 8009242:	d01a      	beq.n	800927a <USBD_LL_SetupStage+0x72>
 8009244:	2b02      	cmp	r3, #2
 8009246:	d822      	bhi.n	800928e <USBD_LL_SetupStage+0x86>
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <USBD_LL_SetupStage+0x4a>
 800924c:	2b01      	cmp	r3, #1
 800924e:	d00a      	beq.n	8009266 <USBD_LL_SetupStage+0x5e>
 8009250:	e01d      	b.n	800928e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009258:	4619      	mov	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f9ee 	bl	800963c <USBD_StdDevReq>
 8009260:	4603      	mov	r3, r0
 8009262:	73fb      	strb	r3, [r7, #15]
      break;
 8009264:	e020      	b.n	80092a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fa52 	bl	8009718 <USBD_StdItfReq>
 8009274:	4603      	mov	r3, r0
 8009276:	73fb      	strb	r3, [r7, #15]
      break;
 8009278:	e016      	b.n	80092a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fa91 	bl	80097aa <USBD_StdEPReq>
 8009288:	4603      	mov	r3, r0
 800928a:	73fb      	strb	r3, [r7, #15]
      break;
 800928c:	e00c      	b.n	80092a8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009294:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009298:	b2db      	uxtb	r3, r3
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f001 fb33 	bl	800a908 <USBD_LL_StallEP>
 80092a2:	4603      	mov	r3, r0
 80092a4:	73fb      	strb	r3, [r7, #15]
      break;
 80092a6:	bf00      	nop
  }

  return ret;
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b086      	sub	sp, #24
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	460b      	mov	r3, r1
 80092bc:	607a      	str	r2, [r7, #4]
 80092be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80092c0:	7afb      	ldrb	r3, [r7, #11]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d138      	bne.n	8009338 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80092cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d14a      	bne.n	800936e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	689a      	ldr	r2, [r3, #8]
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d913      	bls.n	800930c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	1ad2      	subs	r2, r2, r3
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	68da      	ldr	r2, [r3, #12]
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	4293      	cmp	r3, r2
 80092fc:	bf28      	it	cs
 80092fe:	4613      	movcs	r3, r2
 8009300:	461a      	mov	r2, r3
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f000 ffa8 	bl	800a25a <USBD_CtlContinueRx>
 800930a:	e030      	b.n	800936e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b03      	cmp	r3, #3
 8009316:	d10b      	bne.n	8009330 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d005      	beq.n	8009330 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 ffa3 	bl	800a27c <USBD_CtlSendStatus>
 8009336:	e01a      	b.n	800936e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b03      	cmp	r3, #3
 8009342:	d114      	bne.n	800936e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00e      	beq.n	800936e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	7afa      	ldrb	r2, [r7, #11]
 800935a:	4611      	mov	r1, r2
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	4798      	blx	r3
 8009360:	4603      	mov	r3, r0
 8009362:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	e000      	b.n	8009370 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	460b      	mov	r3, r1
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009386:	7afb      	ldrb	r3, [r7, #11]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d16b      	bne.n	8009464 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	3314      	adds	r3, #20
 8009390:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009398:	2b02      	cmp	r3, #2
 800939a:	d156      	bne.n	800944a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	689a      	ldr	r2, [r3, #8]
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d914      	bls.n	80093d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	1ad2      	subs	r2, r2, r3
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	461a      	mov	r2, r3
 80093bc:	6879      	ldr	r1, [r7, #4]
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 ff3a 	bl	800a238 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093c4:	2300      	movs	r3, #0
 80093c6:	2200      	movs	r2, #0
 80093c8:	2100      	movs	r1, #0
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f001 fb47 	bl	800aa5e <USBD_LL_PrepareReceive>
 80093d0:	e03b      	b.n	800944a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	68da      	ldr	r2, [r3, #12]
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d11c      	bne.n	8009418 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d316      	bcc.n	8009418 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d20f      	bcs.n	8009418 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80093f8:	2200      	movs	r2, #0
 80093fa:	2100      	movs	r1, #0
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 ff1b 	bl	800a238 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800940a:	2300      	movs	r3, #0
 800940c:	2200      	movs	r2, #0
 800940e:	2100      	movs	r1, #0
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f001 fb24 	bl	800aa5e <USBD_LL_PrepareReceive>
 8009416:	e018      	b.n	800944a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b03      	cmp	r3, #3
 8009422:	d10b      	bne.n	800943c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800943c:	2180      	movs	r1, #128	; 0x80
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f001 fa62 	bl	800a908 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 ff2c 	bl	800a2a2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009450:	2b01      	cmp	r3, #1
 8009452:	d122      	bne.n	800949a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f7ff fe98 	bl	800918a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009462:	e01a      	b.n	800949a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b03      	cmp	r3, #3
 800946e:	d114      	bne.n	800949a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00e      	beq.n	800949a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	7afa      	ldrb	r2, [r7, #11]
 8009486:	4611      	mov	r1, r2
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	4798      	blx	r3
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	e000      	b.n	800949c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80094d4:	2303      	movs	r3, #3
 80094d6:	e02f      	b.n	8009538 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00f      	beq.n	8009502 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d009      	beq.n	8009502 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	6852      	ldr	r2, [r2, #4]
 80094fa:	b2d2      	uxtb	r2, r2
 80094fc:	4611      	mov	r1, r2
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009502:	2340      	movs	r3, #64	; 0x40
 8009504:	2200      	movs	r2, #0
 8009506:	2100      	movs	r1, #0
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f001 f9b8 	bl	800a87e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2240      	movs	r2, #64	; 0x40
 800951a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800951e:	2340      	movs	r3, #64	; 0x40
 8009520:	2200      	movs	r2, #0
 8009522:	2180      	movs	r1, #128	; 0x80
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 f9aa 	bl	800a87e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2240      	movs	r2, #64	; 0x40
 8009534:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	460b      	mov	r3, r1
 800954a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	78fa      	ldrb	r2, [r7, #3]
 8009550:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800956e:	b2da      	uxtb	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2204      	movs	r2, #4
 800957a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b04      	cmp	r3, #4
 800959e:	d106      	bne.n	80095ae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e012      	b.n	80095f8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	2b03      	cmp	r3, #3
 80095dc:	d10b      	bne.n	80095f6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d005      	beq.n	80095f6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	3301      	adds	r3, #1
 8009616:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800961e:	8a3b      	ldrh	r3, [r7, #16]
 8009620:	021b      	lsls	r3, r3, #8
 8009622:	b21a      	sxth	r2, r3
 8009624:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009628:	4313      	orrs	r3, r2
 800962a:	b21b      	sxth	r3, r3
 800962c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800962e:	89fb      	ldrh	r3, [r7, #14]
}
 8009630:	4618      	mov	r0, r3
 8009632:	371c      	adds	r7, #28
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009652:	2b40      	cmp	r3, #64	; 0x40
 8009654:	d005      	beq.n	8009662 <USBD_StdDevReq+0x26>
 8009656:	2b40      	cmp	r3, #64	; 0x40
 8009658:	d853      	bhi.n	8009702 <USBD_StdDevReq+0xc6>
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00b      	beq.n	8009676 <USBD_StdDevReq+0x3a>
 800965e:	2b20      	cmp	r3, #32
 8009660:	d14f      	bne.n	8009702 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
 8009670:	4603      	mov	r3, r0
 8009672:	73fb      	strb	r3, [r7, #15]
      break;
 8009674:	e04a      	b.n	800970c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	785b      	ldrb	r3, [r3, #1]
 800967a:	2b09      	cmp	r3, #9
 800967c:	d83b      	bhi.n	80096f6 <USBD_StdDevReq+0xba>
 800967e:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <USBD_StdDevReq+0x48>)
 8009680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009684:	080096d9 	.word	0x080096d9
 8009688:	080096ed 	.word	0x080096ed
 800968c:	080096f7 	.word	0x080096f7
 8009690:	080096e3 	.word	0x080096e3
 8009694:	080096f7 	.word	0x080096f7
 8009698:	080096b7 	.word	0x080096b7
 800969c:	080096ad 	.word	0x080096ad
 80096a0:	080096f7 	.word	0x080096f7
 80096a4:	080096cf 	.word	0x080096cf
 80096a8:	080096c1 	.word	0x080096c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f9de 	bl	8009a70 <USBD_GetDescriptor>
          break;
 80096b4:	e024      	b.n	8009700 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fb6d 	bl	8009d98 <USBD_SetAddress>
          break;
 80096be:	e01f      	b.n	8009700 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fbac 	bl	8009e20 <USBD_SetConfig>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]
          break;
 80096cc:	e018      	b.n	8009700 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fc4b 	bl	8009f6c <USBD_GetConfig>
          break;
 80096d6:	e013      	b.n	8009700 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fc7c 	bl	8009fd8 <USBD_GetStatus>
          break;
 80096e0:	e00e      	b.n	8009700 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fcab 	bl	800a040 <USBD_SetFeature>
          break;
 80096ea:	e009      	b.n	8009700 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fcba 	bl	800a068 <USBD_ClrFeature>
          break;
 80096f4:	e004      	b.n	8009700 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fd11 	bl	800a120 <USBD_CtlError>
          break;
 80096fe:	bf00      	nop
      }
      break;
 8009700:	e004      	b.n	800970c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fd0b 	bl	800a120 <USBD_CtlError>
      break;
 800970a:	bf00      	nop
  }

  return ret;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop

08009718 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800972e:	2b40      	cmp	r3, #64	; 0x40
 8009730:	d005      	beq.n	800973e <USBD_StdItfReq+0x26>
 8009732:	2b40      	cmp	r3, #64	; 0x40
 8009734:	d82f      	bhi.n	8009796 <USBD_StdItfReq+0x7e>
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <USBD_StdItfReq+0x26>
 800973a:	2b20      	cmp	r3, #32
 800973c:	d12b      	bne.n	8009796 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009744:	b2db      	uxtb	r3, r3
 8009746:	3b01      	subs	r3, #1
 8009748:	2b02      	cmp	r3, #2
 800974a:	d81d      	bhi.n	8009788 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	889b      	ldrh	r3, [r3, #4]
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b01      	cmp	r3, #1
 8009754:	d813      	bhi.n	800977e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	4798      	blx	r3
 8009764:	4603      	mov	r3, r0
 8009766:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	88db      	ldrh	r3, [r3, #6]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d110      	bne.n	8009792 <USBD_StdItfReq+0x7a>
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10d      	bne.n	8009792 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fd80 	bl	800a27c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800977c:	e009      	b.n	8009792 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fccd 	bl	800a120 <USBD_CtlError>
          break;
 8009786:	e004      	b.n	8009792 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fcc8 	bl	800a120 <USBD_CtlError>
          break;
 8009790:	e000      	b.n	8009794 <USBD_StdItfReq+0x7c>
          break;
 8009792:	bf00      	nop
      }
      break;
 8009794:	e004      	b.n	80097a0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fcc1 	bl	800a120 <USBD_CtlError>
      break;
 800979e:	bf00      	nop
  }

  return ret;
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b084      	sub	sp, #16
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	889b      	ldrh	r3, [r3, #4]
 80097bc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097c6:	2b40      	cmp	r3, #64	; 0x40
 80097c8:	d007      	beq.n	80097da <USBD_StdEPReq+0x30>
 80097ca:	2b40      	cmp	r3, #64	; 0x40
 80097cc:	f200 8145 	bhi.w	8009a5a <USBD_StdEPReq+0x2b0>
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00c      	beq.n	80097ee <USBD_StdEPReq+0x44>
 80097d4:	2b20      	cmp	r3, #32
 80097d6:	f040 8140 	bne.w	8009a5a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	4798      	blx	r3
 80097e8:	4603      	mov	r3, r0
 80097ea:	73fb      	strb	r3, [r7, #15]
      break;
 80097ec:	e13a      	b.n	8009a64 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	785b      	ldrb	r3, [r3, #1]
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d007      	beq.n	8009806 <USBD_StdEPReq+0x5c>
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	f300 8129 	bgt.w	8009a4e <USBD_StdEPReq+0x2a4>
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d07f      	beq.n	8009900 <USBD_StdEPReq+0x156>
 8009800:	2b01      	cmp	r3, #1
 8009802:	d03c      	beq.n	800987e <USBD_StdEPReq+0xd4>
 8009804:	e123      	b.n	8009a4e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b02      	cmp	r3, #2
 8009810:	d002      	beq.n	8009818 <USBD_StdEPReq+0x6e>
 8009812:	2b03      	cmp	r3, #3
 8009814:	d016      	beq.n	8009844 <USBD_StdEPReq+0x9a>
 8009816:	e02c      	b.n	8009872 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009818:	7bbb      	ldrb	r3, [r7, #14]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00d      	beq.n	800983a <USBD_StdEPReq+0x90>
 800981e:	7bbb      	ldrb	r3, [r7, #14]
 8009820:	2b80      	cmp	r3, #128	; 0x80
 8009822:	d00a      	beq.n	800983a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f001 f86d 	bl	800a908 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800982e:	2180      	movs	r1, #128	; 0x80
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f001 f869 	bl	800a908 <USBD_LL_StallEP>
 8009836:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009838:	e020      	b.n	800987c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fc6f 	bl	800a120 <USBD_CtlError>
              break;
 8009842:	e01b      	b.n	800987c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	885b      	ldrh	r3, [r3, #2]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10e      	bne.n	800986a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800984c:	7bbb      	ldrb	r3, [r7, #14]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00b      	beq.n	800986a <USBD_StdEPReq+0xc0>
 8009852:	7bbb      	ldrb	r3, [r7, #14]
 8009854:	2b80      	cmp	r3, #128	; 0x80
 8009856:	d008      	beq.n	800986a <USBD_StdEPReq+0xc0>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	88db      	ldrh	r3, [r3, #6]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d104      	bne.n	800986a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f001 f84f 	bl	800a908 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fd06 	bl	800a27c <USBD_CtlSendStatus>

              break;
 8009870:	e004      	b.n	800987c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fc53 	bl	800a120 <USBD_CtlError>
              break;
 800987a:	bf00      	nop
          }
          break;
 800987c:	e0ec      	b.n	8009a58 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b02      	cmp	r3, #2
 8009888:	d002      	beq.n	8009890 <USBD_StdEPReq+0xe6>
 800988a:	2b03      	cmp	r3, #3
 800988c:	d016      	beq.n	80098bc <USBD_StdEPReq+0x112>
 800988e:	e030      	b.n	80098f2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009890:	7bbb      	ldrb	r3, [r7, #14]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00d      	beq.n	80098b2 <USBD_StdEPReq+0x108>
 8009896:	7bbb      	ldrb	r3, [r7, #14]
 8009898:	2b80      	cmp	r3, #128	; 0x80
 800989a:	d00a      	beq.n	80098b2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800989c:	7bbb      	ldrb	r3, [r7, #14]
 800989e:	4619      	mov	r1, r3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f001 f831 	bl	800a908 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098a6:	2180      	movs	r1, #128	; 0x80
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f001 f82d 	bl	800a908 <USBD_LL_StallEP>
 80098ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098b0:	e025      	b.n	80098fe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fc33 	bl	800a120 <USBD_CtlError>
              break;
 80098ba:	e020      	b.n	80098fe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	885b      	ldrh	r3, [r3, #2]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d11b      	bne.n	80098fc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d004      	beq.n	80098d8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f001 f837 	bl	800a946 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fccf 	bl	800a27c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	4798      	blx	r3
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80098f0:	e004      	b.n	80098fc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fc13 	bl	800a120 <USBD_CtlError>
              break;
 80098fa:	e000      	b.n	80098fe <USBD_StdEPReq+0x154>
              break;
 80098fc:	bf00      	nop
          }
          break;
 80098fe:	e0ab      	b.n	8009a58 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b02      	cmp	r3, #2
 800990a:	d002      	beq.n	8009912 <USBD_StdEPReq+0x168>
 800990c:	2b03      	cmp	r3, #3
 800990e:	d032      	beq.n	8009976 <USBD_StdEPReq+0x1cc>
 8009910:	e097      	b.n	8009a42 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009912:	7bbb      	ldrb	r3, [r7, #14]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d007      	beq.n	8009928 <USBD_StdEPReq+0x17e>
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	2b80      	cmp	r3, #128	; 0x80
 800991c:	d004      	beq.n	8009928 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fbfd 	bl	800a120 <USBD_CtlError>
                break;
 8009926:	e091      	b.n	8009a4c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800992c:	2b00      	cmp	r3, #0
 800992e:	da0b      	bge.n	8009948 <USBD_StdEPReq+0x19e>
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009936:	4613      	mov	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4413      	add	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	3310      	adds	r3, #16
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	4413      	add	r3, r2
 8009944:	3304      	adds	r3, #4
 8009946:	e00b      	b.n	8009960 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800994e:	4613      	mov	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	4413      	add	r3, r2
 800995e:	3304      	adds	r3, #4
 8009960:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	2202      	movs	r2, #2
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fc47 	bl	800a202 <USBD_CtlSendData>
              break;
 8009974:	e06a      	b.n	8009a4c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800997a:	2b00      	cmp	r3, #0
 800997c:	da11      	bge.n	80099a2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	f003 020f 	and.w	r2, r3, #15
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	440b      	add	r3, r1
 8009990:	3324      	adds	r3, #36	; 0x24
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d117      	bne.n	80099c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fbc0 	bl	800a120 <USBD_CtlError>
                  break;
 80099a0:	e054      	b.n	8009a4c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
 80099a4:	f003 020f 	and.w	r2, r3, #15
 80099a8:	6879      	ldr	r1, [r7, #4]
 80099aa:	4613      	mov	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	440b      	add	r3, r1
 80099b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d104      	bne.n	80099c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fbad 	bl	800a120 <USBD_CtlError>
                  break;
 80099c6:	e041      	b.n	8009a4c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	da0b      	bge.n	80099e8 <USBD_StdEPReq+0x23e>
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099d6:	4613      	mov	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	3310      	adds	r3, #16
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	4413      	add	r3, r2
 80099e4:	3304      	adds	r3, #4
 80099e6:	e00b      	b.n	8009a00 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
 80099ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099ee:	4613      	mov	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	4413      	add	r3, r2
 80099fe:	3304      	adds	r3, #4
 8009a00:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <USBD_StdEPReq+0x264>
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	2b80      	cmp	r3, #128	; 0x80
 8009a0c:	d103      	bne.n	8009a16 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	e00e      	b.n	8009a34 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 ffb2 	bl	800a984 <USBD_LL_IsStallEP>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d003      	beq.n	8009a2e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	e002      	b.n	8009a34 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2200      	movs	r2, #0
 8009a32:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	2202      	movs	r2, #2
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fbe1 	bl	800a202 <USBD_CtlSendData>
              break;
 8009a40:	e004      	b.n	8009a4c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fb6b 	bl	800a120 <USBD_CtlError>
              break;
 8009a4a:	bf00      	nop
          }
          break;
 8009a4c:	e004      	b.n	8009a58 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fb65 	bl	800a120 <USBD_CtlError>
          break;
 8009a56:	bf00      	nop
      }
      break;
 8009a58:	e004      	b.n	8009a64 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fb5f 	bl	800a120 <USBD_CtlError>
      break;
 8009a62:	bf00      	nop
  }

  return ret;
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a82:	2300      	movs	r3, #0
 8009a84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	885b      	ldrh	r3, [r3, #2]
 8009a8a:	0a1b      	lsrs	r3, r3, #8
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	2b0e      	cmp	r3, #14
 8009a92:	f200 8152 	bhi.w	8009d3a <USBD_GetDescriptor+0x2ca>
 8009a96:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <USBD_GetDescriptor+0x2c>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009b0d 	.word	0x08009b0d
 8009aa0:	08009b25 	.word	0x08009b25
 8009aa4:	08009b65 	.word	0x08009b65
 8009aa8:	08009d3b 	.word	0x08009d3b
 8009aac:	08009d3b 	.word	0x08009d3b
 8009ab0:	08009cdb 	.word	0x08009cdb
 8009ab4:	08009d07 	.word	0x08009d07
 8009ab8:	08009d3b 	.word	0x08009d3b
 8009abc:	08009d3b 	.word	0x08009d3b
 8009ac0:	08009d3b 	.word	0x08009d3b
 8009ac4:	08009d3b 	.word	0x08009d3b
 8009ac8:	08009d3b 	.word	0x08009d3b
 8009acc:	08009d3b 	.word	0x08009d3b
 8009ad0:	08009d3b 	.word	0x08009d3b
 8009ad4:	08009ad9 	.word	0x08009ad9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ade:	69db      	ldr	r3, [r3, #28]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00b      	beq.n	8009afc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aea:	69db      	ldr	r3, [r3, #28]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	7c12      	ldrb	r2, [r2, #16]
 8009af0:	f107 0108 	add.w	r1, r7, #8
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
 8009af8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009afa:	e126      	b.n	8009d4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fb0e 	bl	800a120 <USBD_CtlError>
        err++;
 8009b04:	7afb      	ldrb	r3, [r7, #11]
 8009b06:	3301      	adds	r3, #1
 8009b08:	72fb      	strb	r3, [r7, #11]
      break;
 8009b0a:	e11e      	b.n	8009d4a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	7c12      	ldrb	r2, [r2, #16]
 8009b18:	f107 0108 	add.w	r1, r7, #8
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	4798      	blx	r3
 8009b20:	60f8      	str	r0, [r7, #12]
      break;
 8009b22:	e112      	b.n	8009d4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7c1b      	ldrb	r3, [r3, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10d      	bne.n	8009b48 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b34:	f107 0208 	add.w	r2, r7, #8
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4798      	blx	r3
 8009b3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3301      	adds	r3, #1
 8009b42:	2202      	movs	r2, #2
 8009b44:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b46:	e100      	b.n	8009d4a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b50:	f107 0208 	add.w	r2, r7, #8
 8009b54:	4610      	mov	r0, r2
 8009b56:	4798      	blx	r3
 8009b58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	2202      	movs	r2, #2
 8009b60:	701a      	strb	r2, [r3, #0]
      break;
 8009b62:	e0f2      	b.n	8009d4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	885b      	ldrh	r3, [r3, #2]
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b05      	cmp	r3, #5
 8009b6c:	f200 80ac 	bhi.w	8009cc8 <USBD_GetDescriptor+0x258>
 8009b70:	a201      	add	r2, pc, #4	; (adr r2, 8009b78 <USBD_GetDescriptor+0x108>)
 8009b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b76:	bf00      	nop
 8009b78:	08009b91 	.word	0x08009b91
 8009b7c:	08009bc5 	.word	0x08009bc5
 8009b80:	08009bf9 	.word	0x08009bf9
 8009b84:	08009c2d 	.word	0x08009c2d
 8009b88:	08009c61 	.word	0x08009c61
 8009b8c:	08009c95 	.word	0x08009c95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00b      	beq.n	8009bb4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	7c12      	ldrb	r2, [r2, #16]
 8009ba8:	f107 0108 	add.w	r1, r7, #8
 8009bac:	4610      	mov	r0, r2
 8009bae:	4798      	blx	r3
 8009bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bb2:	e091      	b.n	8009cd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fab2 	bl	800a120 <USBD_CtlError>
            err++;
 8009bbc:	7afb      	ldrb	r3, [r7, #11]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8009bc2:	e089      	b.n	8009cd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00b      	beq.n	8009be8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	7c12      	ldrb	r2, [r2, #16]
 8009bdc:	f107 0108 	add.w	r1, r7, #8
 8009be0:	4610      	mov	r0, r2
 8009be2:	4798      	blx	r3
 8009be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009be6:	e077      	b.n	8009cd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fa98 	bl	800a120 <USBD_CtlError>
            err++;
 8009bf0:	7afb      	ldrb	r3, [r7, #11]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8009bf6:	e06f      	b.n	8009cd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00b      	beq.n	8009c1c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	7c12      	ldrb	r2, [r2, #16]
 8009c10:	f107 0108 	add.w	r1, r7, #8
 8009c14:	4610      	mov	r0, r2
 8009c16:	4798      	blx	r3
 8009c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c1a:	e05d      	b.n	8009cd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 fa7e 	bl	800a120 <USBD_CtlError>
            err++;
 8009c24:	7afb      	ldrb	r3, [r7, #11]
 8009c26:	3301      	adds	r3, #1
 8009c28:	72fb      	strb	r3, [r7, #11]
          break;
 8009c2a:	e055      	b.n	8009cd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00b      	beq.n	8009c50 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	7c12      	ldrb	r2, [r2, #16]
 8009c44:	f107 0108 	add.w	r1, r7, #8
 8009c48:	4610      	mov	r0, r2
 8009c4a:	4798      	blx	r3
 8009c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c4e:	e043      	b.n	8009cd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fa64 	bl	800a120 <USBD_CtlError>
            err++;
 8009c58:	7afb      	ldrb	r3, [r7, #11]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c5e:	e03b      	b.n	8009cd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00b      	beq.n	8009c84 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	7c12      	ldrb	r2, [r2, #16]
 8009c78:	f107 0108 	add.w	r1, r7, #8
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	4798      	blx	r3
 8009c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c82:	e029      	b.n	8009cd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fa4a 	bl	800a120 <USBD_CtlError>
            err++;
 8009c8c:	7afb      	ldrb	r3, [r7, #11]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	72fb      	strb	r3, [r7, #11]
          break;
 8009c92:	e021      	b.n	8009cd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00b      	beq.n	8009cb8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	7c12      	ldrb	r2, [r2, #16]
 8009cac:	f107 0108 	add.w	r1, r7, #8
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	4798      	blx	r3
 8009cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cb6:	e00f      	b.n	8009cd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fa30 	bl	800a120 <USBD_CtlError>
            err++;
 8009cc0:	7afb      	ldrb	r3, [r7, #11]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cc6:	e007      	b.n	8009cd8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fa28 	bl	800a120 <USBD_CtlError>
          err++;
 8009cd0:	7afb      	ldrb	r3, [r7, #11]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009cd6:	bf00      	nop
      }
      break;
 8009cd8:	e037      	b.n	8009d4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	7c1b      	ldrb	r3, [r3, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d109      	bne.n	8009cf6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cea:	f107 0208 	add.w	r2, r7, #8
 8009cee:	4610      	mov	r0, r2
 8009cf0:	4798      	blx	r3
 8009cf2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cf4:	e029      	b.n	8009d4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fa11 	bl	800a120 <USBD_CtlError>
        err++;
 8009cfe:	7afb      	ldrb	r3, [r7, #11]
 8009d00:	3301      	adds	r3, #1
 8009d02:	72fb      	strb	r3, [r7, #11]
      break;
 8009d04:	e021      	b.n	8009d4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	7c1b      	ldrb	r3, [r3, #16]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10d      	bne.n	8009d2a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d16:	f107 0208 	add.w	r2, r7, #8
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	4798      	blx	r3
 8009d1e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	3301      	adds	r3, #1
 8009d24:	2207      	movs	r2, #7
 8009d26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d28:	e00f      	b.n	8009d4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f9f7 	bl	800a120 <USBD_CtlError>
        err++;
 8009d32:	7afb      	ldrb	r3, [r7, #11]
 8009d34:	3301      	adds	r3, #1
 8009d36:	72fb      	strb	r3, [r7, #11]
      break;
 8009d38:	e007      	b.n	8009d4a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f9ef 	bl	800a120 <USBD_CtlError>
      err++;
 8009d42:	7afb      	ldrb	r3, [r7, #11]
 8009d44:	3301      	adds	r3, #1
 8009d46:	72fb      	strb	r3, [r7, #11]
      break;
 8009d48:	bf00      	nop
  }

  if (err != 0U)
 8009d4a:	7afb      	ldrb	r3, [r7, #11]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d11e      	bne.n	8009d8e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	88db      	ldrh	r3, [r3, #6]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d016      	beq.n	8009d86 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009d58:	893b      	ldrh	r3, [r7, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00e      	beq.n	8009d7c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	88da      	ldrh	r2, [r3, #6]
 8009d62:	893b      	ldrh	r3, [r7, #8]
 8009d64:	4293      	cmp	r3, r2
 8009d66:	bf28      	it	cs
 8009d68:	4613      	movcs	r3, r2
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d6e:	893b      	ldrh	r3, [r7, #8]
 8009d70:	461a      	mov	r2, r3
 8009d72:	68f9      	ldr	r1, [r7, #12]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fa44 	bl	800a202 <USBD_CtlSendData>
 8009d7a:	e009      	b.n	8009d90 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f9ce 	bl	800a120 <USBD_CtlError>
 8009d84:	e004      	b.n	8009d90 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fa78 	bl	800a27c <USBD_CtlSendStatus>
 8009d8c:	e000      	b.n	8009d90 <USBD_GetDescriptor+0x320>
    return;
 8009d8e:	bf00      	nop
  }
}
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop

08009d98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	889b      	ldrh	r3, [r3, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d131      	bne.n	8009e0e <USBD_SetAddress+0x76>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	88db      	ldrh	r3, [r3, #6]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d12d      	bne.n	8009e0e <USBD_SetAddress+0x76>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	885b      	ldrh	r3, [r3, #2]
 8009db6:	2b7f      	cmp	r3, #127	; 0x7f
 8009db8:	d829      	bhi.n	8009e0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	885b      	ldrh	r3, [r3, #2]
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	d104      	bne.n	8009ddc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f9a3 	bl	800a120 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dda:	e01d      	b.n	8009e18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	7bfa      	ldrb	r2, [r7, #15]
 8009de0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fdf8 	bl	800a9de <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fa44 	bl	800a27c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d004      	beq.n	8009e04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e02:	e009      	b.n	8009e18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e0c:	e004      	b.n	8009e18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f985 	bl	800a120 <USBD_CtlError>
  }
}
 8009e16:	bf00      	nop
 8009e18:	bf00      	nop
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	885b      	ldrh	r3, [r3, #2]
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	4b4c      	ldr	r3, [pc, #304]	; (8009f68 <USBD_SetConfig+0x148>)
 8009e36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e38:	4b4b      	ldr	r3, [pc, #300]	; (8009f68 <USBD_SetConfig+0x148>)
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d905      	bls.n	8009e4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f96c 	bl	800a120 <USBD_CtlError>
    return USBD_FAIL;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e088      	b.n	8009f5e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d002      	beq.n	8009e5e <USBD_SetConfig+0x3e>
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d025      	beq.n	8009ea8 <USBD_SetConfig+0x88>
 8009e5c:	e071      	b.n	8009f42 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009e5e:	4b42      	ldr	r3, [pc, #264]	; (8009f68 <USBD_SetConfig+0x148>)
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d01c      	beq.n	8009ea0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009e66:	4b40      	ldr	r3, [pc, #256]	; (8009f68 <USBD_SetConfig+0x148>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e70:	4b3d      	ldr	r3, [pc, #244]	; (8009f68 <USBD_SetConfig+0x148>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7ff f992 	bl	80091a0 <USBD_SetClassConfig>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d004      	beq.n	8009e90 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f949 	bl	800a120 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e8e:	e065      	b.n	8009f5c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f9f3 	bl	800a27c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2203      	movs	r2, #3
 8009e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e9e:	e05d      	b.n	8009f5c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f9eb 	bl	800a27c <USBD_CtlSendStatus>
      break;
 8009ea6:	e059      	b.n	8009f5c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ea8:	4b2f      	ldr	r3, [pc, #188]	; (8009f68 <USBD_SetConfig+0x148>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d112      	bne.n	8009ed6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009eb8:	4b2b      	ldr	r3, [pc, #172]	; (8009f68 <USBD_SetConfig+0x148>)
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ec2:	4b29      	ldr	r3, [pc, #164]	; (8009f68 <USBD_SetConfig+0x148>)
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff f985 	bl	80091d8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f9d4 	bl	800a27c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ed4:	e042      	b.n	8009f5c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009ed6:	4b24      	ldr	r3, [pc, #144]	; (8009f68 <USBD_SetConfig+0x148>)
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d02a      	beq.n	8009f3a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff f973 	bl	80091d8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009ef2:	4b1d      	ldr	r3, [pc, #116]	; (8009f68 <USBD_SetConfig+0x148>)
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009efc:	4b1a      	ldr	r3, [pc, #104]	; (8009f68 <USBD_SetConfig+0x148>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff f94c 	bl	80091a0 <USBD_SetClassConfig>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00f      	beq.n	8009f32 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f903 	bl	800a120 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7ff f958 	bl	80091d8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f30:	e014      	b.n	8009f5c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f9a2 	bl	800a27c <USBD_CtlSendStatus>
      break;
 8009f38:	e010      	b.n	8009f5c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f99e 	bl	800a27c <USBD_CtlSendStatus>
      break;
 8009f40:	e00c      	b.n	8009f5c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f8eb 	bl	800a120 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f4a:	4b07      	ldr	r3, [pc, #28]	; (8009f68 <USBD_SetConfig+0x148>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7ff f941 	bl	80091d8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009f56:	2303      	movs	r3, #3
 8009f58:	73fb      	strb	r3, [r7, #15]
      break;
 8009f5a:	bf00      	nop
  }

  return ret;
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	200001dc 	.word	0x200001dc

08009f6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	88db      	ldrh	r3, [r3, #6]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d004      	beq.n	8009f88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 f8cd 	bl	800a120 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f86:	e023      	b.n	8009fd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	dc02      	bgt.n	8009f9a <USBD_GetConfig+0x2e>
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	dc03      	bgt.n	8009fa0 <USBD_GetConfig+0x34>
 8009f98:	e015      	b.n	8009fc6 <USBD_GetConfig+0x5a>
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d00b      	beq.n	8009fb6 <USBD_GetConfig+0x4a>
 8009f9e:	e012      	b.n	8009fc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3308      	adds	r3, #8
 8009faa:	2201      	movs	r2, #1
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f927 	bl	800a202 <USBD_CtlSendData>
        break;
 8009fb4:	e00c      	b.n	8009fd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	2201      	movs	r2, #1
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f91f 	bl	800a202 <USBD_CtlSendData>
        break;
 8009fc4:	e004      	b.n	8009fd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f8a9 	bl	800a120 <USBD_CtlError>
        break;
 8009fce:	bf00      	nop
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	3b01      	subs	r3, #1
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d81e      	bhi.n	800a02e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	88db      	ldrh	r3, [r3, #6]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d004      	beq.n	800a002 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f890 	bl	800a120 <USBD_CtlError>
        break;
 800a000:	e01a      	b.n	800a038 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d005      	beq.n	800a01e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	f043 0202 	orr.w	r2, r3, #2
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	330c      	adds	r3, #12
 800a022:	2202      	movs	r2, #2
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f8eb 	bl	800a202 <USBD_CtlSendData>
      break;
 800a02c:	e004      	b.n	800a038 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f875 	bl	800a120 <USBD_CtlError>
      break;
 800a036:	bf00      	nop
  }
}
 800a038:	bf00      	nop
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	885b      	ldrh	r3, [r3, #2]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d106      	bne.n	800a060 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f90e 	bl	800a27c <USBD_CtlSendStatus>
  }
}
 800a060:	bf00      	nop
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	3b01      	subs	r3, #1
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d80b      	bhi.n	800a098 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	885b      	ldrh	r3, [r3, #2]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d10c      	bne.n	800a0a2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f8f3 	bl	800a27c <USBD_CtlSendStatus>
      }
      break;
 800a096:	e004      	b.n	800a0a2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f840 	bl	800a120 <USBD_CtlError>
      break;
 800a0a0:	e000      	b.n	800a0a4 <USBD_ClrFeature+0x3c>
      break;
 800a0a2:	bf00      	nop
  }
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	781a      	ldrb	r2, [r3, #0]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	781a      	ldrb	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f7ff fa92 	bl	8009600 <SWAPBYTE>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	461a      	mov	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f7ff fa85 	bl	8009600 <SWAPBYTE>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3301      	adds	r3, #1
 800a102:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3301      	adds	r3, #1
 800a108:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f7ff fa78 	bl	8009600 <SWAPBYTE>
 800a110:	4603      	mov	r3, r0
 800a112:	461a      	mov	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	80da      	strh	r2, [r3, #6]
}
 800a118:	bf00      	nop
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a12a:	2180      	movs	r1, #128	; 0x80
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fbeb 	bl	800a908 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a132:	2100      	movs	r1, #0
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fbe7 	bl	800a908 <USBD_LL_StallEP>
}
 800a13a:	bf00      	nop
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b086      	sub	sp, #24
 800a146:	af00      	add	r7, sp, #0
 800a148:	60f8      	str	r0, [r7, #12]
 800a14a:	60b9      	str	r1, [r7, #8]
 800a14c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a14e:	2300      	movs	r3, #0
 800a150:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d036      	beq.n	800a1c6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a15c:	6938      	ldr	r0, [r7, #16]
 800a15e:	f000 f836 	bl	800a1ce <USBD_GetLen>
 800a162:	4603      	mov	r3, r0
 800a164:	3301      	adds	r3, #1
 800a166:	b29b      	uxth	r3, r3
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a170:	7dfb      	ldrb	r3, [r7, #23]
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	4413      	add	r3, r2
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	7812      	ldrb	r2, [r2, #0]
 800a17a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
 800a17e:	3301      	adds	r3, #1
 800a180:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a182:	7dfb      	ldrb	r3, [r7, #23]
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	4413      	add	r3, r2
 800a188:	2203      	movs	r2, #3
 800a18a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a18c:	7dfb      	ldrb	r3, [r7, #23]
 800a18e:	3301      	adds	r3, #1
 800a190:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a192:	e013      	b.n	800a1bc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a194:	7dfb      	ldrb	r3, [r7, #23]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	4413      	add	r3, r2
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	7812      	ldrb	r2, [r2, #0]
 800a19e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	613b      	str	r3, [r7, #16]
    idx++;
 800a1a6:	7dfb      	ldrb	r3, [r7, #23]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a1ac:	7dfb      	ldrb	r3, [r7, #23]
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	701a      	strb	r2, [r3, #0]
    idx++;
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1e7      	bne.n	800a194 <USBD_GetString+0x52>
 800a1c4:	e000      	b.n	800a1c8 <USBD_GetString+0x86>
    return;
 800a1c6:	bf00      	nop
  }
}
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b085      	sub	sp, #20
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a1de:	e005      	b.n	800a1ec <USBD_GetLen+0x1e>
  {
    len++;
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1f5      	bne.n	800a1e0 <USBD_GetLen+0x12>
  }

  return len;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2202      	movs	r2, #2
 800a212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	2100      	movs	r1, #0
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f000 fbf7 	bl	800aa1c <USBD_LL_Transmit>

  return USBD_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	2100      	movs	r1, #0
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f000 fbe6 	bl	800aa1c <USBD_LL_Transmit>

  return USBD_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b084      	sub	sp, #16
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	60b9      	str	r1, [r7, #8]
 800a264:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	2100      	movs	r1, #0
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f000 fbf6 	bl	800aa5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2204      	movs	r2, #4
 800a288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a28c:	2300      	movs	r3, #0
 800a28e:	2200      	movs	r2, #0
 800a290:	2100      	movs	r1, #0
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fbc2 	bl	800aa1c <USBD_LL_Transmit>

  return USBD_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2205      	movs	r2, #5
 800a2ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fbd0 	bl	800aa5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	490e      	ldr	r1, [pc, #56]	; (800a308 <MX_USB_Device_Init+0x40>)
 800a2d0:	480e      	ldr	r0, [pc, #56]	; (800a30c <MX_USB_Device_Init+0x44>)
 800a2d2:	f7fe fef7 	bl	80090c4 <USBD_Init>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a2dc:	f7f7 fb05 	bl	80018ea <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800a2e0:	490b      	ldr	r1, [pc, #44]	; (800a310 <MX_USB_Device_Init+0x48>)
 800a2e2:	480a      	ldr	r0, [pc, #40]	; (800a30c <MX_USB_Device_Init+0x44>)
 800a2e4:	f7fe ff1e 	bl	8009124 <USBD_RegisterClass>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d001      	beq.n	800a2f2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a2ee:	f7f7 fafc 	bl	80018ea <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a2f2:	4806      	ldr	r0, [pc, #24]	; (800a30c <MX_USB_Device_Init+0x44>)
 800a2f4:	f7fe ff3d 	bl	8009172 <USBD_Start>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800a2fe:	f7f7 faf4 	bl	80018ea <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a302:	bf00      	nop
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	20000130 	.word	0x20000130
 800a30c:	200002c0 	.word	0x200002c0
 800a310:	20000028 	.word	0x20000028

0800a314 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	4603      	mov	r3, r0
 800a31c:	6039      	str	r1, [r7, #0]
 800a31e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	2212      	movs	r2, #18
 800a324:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800a326:	4b03      	ldr	r3, [pc, #12]	; (800a334 <USBD_HID_DeviceDescriptor+0x20>)
}
 800a328:	4618      	mov	r0, r3
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	20000150 	.word	0x20000150

0800a338 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	6039      	str	r1, [r7, #0]
 800a342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2204      	movs	r2, #4
 800a348:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a34a:	4b03      	ldr	r3, [pc, #12]	; (800a358 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	20000164 	.word	0x20000164

0800a35c <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	6039      	str	r1, [r7, #0]
 800a366:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a368:	79fb      	ldrb	r3, [r7, #7]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d105      	bne.n	800a37a <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	4907      	ldr	r1, [pc, #28]	; (800a390 <USBD_HID_ProductStrDescriptor+0x34>)
 800a372:	4808      	ldr	r0, [pc, #32]	; (800a394 <USBD_HID_ProductStrDescriptor+0x38>)
 800a374:	f7ff fee5 	bl	800a142 <USBD_GetString>
 800a378:	e004      	b.n	800a384 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	4904      	ldr	r1, [pc, #16]	; (800a390 <USBD_HID_ProductStrDescriptor+0x34>)
 800a37e:	4805      	ldr	r0, [pc, #20]	; (800a394 <USBD_HID_ProductStrDescriptor+0x38>)
 800a380:	f7ff fedf 	bl	800a142 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a384:	4b02      	ldr	r3, [pc, #8]	; (800a390 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800a386:	4618      	mov	r0, r3
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20000590 	.word	0x20000590
 800a394:	0800ac3c 	.word	0x0800ac3c

0800a398 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	4904      	ldr	r1, [pc, #16]	; (800a3b8 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800a3a8:	4804      	ldr	r0, [pc, #16]	; (800a3bc <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800a3aa:	f7ff feca 	bl	800a142 <USBD_GetString>
  return USBD_StrDesc;
 800a3ae:	4b02      	ldr	r3, [pc, #8]	; (800a3b8 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20000590 	.word	0x20000590
 800a3bc:	0800ac54 	.word	0x0800ac54

0800a3c0 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	6039      	str	r1, [r7, #0]
 800a3ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	221a      	movs	r2, #26
 800a3d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a3d2:	f000 f843 	bl	800a45c <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a3d6:	4b02      	ldr	r3, [pc, #8]	; (800a3e0 <USBD_HID_SerialStrDescriptor+0x20>)
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	20000168 	.word	0x20000168

0800a3e4 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	6039      	str	r1, [r7, #0]
 800a3ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a3f0:	79fb      	ldrb	r3, [r7, #7]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d105      	bne.n	800a402 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	4907      	ldr	r1, [pc, #28]	; (800a418 <USBD_HID_ConfigStrDescriptor+0x34>)
 800a3fa:	4808      	ldr	r0, [pc, #32]	; (800a41c <USBD_HID_ConfigStrDescriptor+0x38>)
 800a3fc:	f7ff fea1 	bl	800a142 <USBD_GetString>
 800a400:	e004      	b.n	800a40c <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	4904      	ldr	r1, [pc, #16]	; (800a418 <USBD_HID_ConfigStrDescriptor+0x34>)
 800a406:	4805      	ldr	r0, [pc, #20]	; (800a41c <USBD_HID_ConfigStrDescriptor+0x38>)
 800a408:	f7ff fe9b 	bl	800a142 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a40c:	4b02      	ldr	r3, [pc, #8]	; (800a418 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20000590 	.word	0x20000590
 800a41c:	0800ac68 	.word	0x0800ac68

0800a420 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	6039      	str	r1, [r7, #0]
 800a42a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a42c:	79fb      	ldrb	r3, [r7, #7]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d105      	bne.n	800a43e <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	4907      	ldr	r1, [pc, #28]	; (800a454 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800a436:	4808      	ldr	r0, [pc, #32]	; (800a458 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800a438:	f7ff fe83 	bl	800a142 <USBD_GetString>
 800a43c:	e004      	b.n	800a448 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	4904      	ldr	r1, [pc, #16]	; (800a454 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800a442:	4805      	ldr	r0, [pc, #20]	; (800a458 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800a444:	f7ff fe7d 	bl	800a142 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a448:	4b02      	ldr	r3, [pc, #8]	; (800a454 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20000590 	.word	0x20000590
 800a458:	0800ac74 	.word	0x0800ac74

0800a45c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a462:	4b0f      	ldr	r3, [pc, #60]	; (800a4a0 <Get_SerialNum+0x44>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a468:	4b0e      	ldr	r3, [pc, #56]	; (800a4a4 <Get_SerialNum+0x48>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a46e:	4b0e      	ldr	r3, [pc, #56]	; (800a4a8 <Get_SerialNum+0x4c>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4413      	add	r3, r2
 800a47a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d009      	beq.n	800a496 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a482:	2208      	movs	r2, #8
 800a484:	4909      	ldr	r1, [pc, #36]	; (800a4ac <Get_SerialNum+0x50>)
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f000 f814 	bl	800a4b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a48c:	2204      	movs	r2, #4
 800a48e:	4908      	ldr	r1, [pc, #32]	; (800a4b0 <Get_SerialNum+0x54>)
 800a490:	68b8      	ldr	r0, [r7, #8]
 800a492:	f000 f80f 	bl	800a4b4 <IntToUnicode>
  }
}
 800a496:	bf00      	nop
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	1fff7590 	.word	0x1fff7590
 800a4a4:	1fff7594 	.word	0x1fff7594
 800a4a8:	1fff7598 	.word	0x1fff7598
 800a4ac:	2000016a 	.word	0x2000016a
 800a4b0:	2000017a 	.word	0x2000017a

0800a4b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	75fb      	strb	r3, [r7, #23]
 800a4ca:	e027      	b.n	800a51c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	0f1b      	lsrs	r3, r3, #28
 800a4d0:	2b09      	cmp	r3, #9
 800a4d2:	d80b      	bhi.n	800a4ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	0f1b      	lsrs	r3, r3, #28
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	7dfb      	ldrb	r3, [r7, #23]
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	4619      	mov	r1, r3
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	440b      	add	r3, r1
 800a4e4:	3230      	adds	r2, #48	; 0x30
 800a4e6:	b2d2      	uxtb	r2, r2
 800a4e8:	701a      	strb	r2, [r3, #0]
 800a4ea:	e00a      	b.n	800a502 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	0f1b      	lsrs	r3, r3, #28
 800a4f0:	b2da      	uxtb	r2, r3
 800a4f2:	7dfb      	ldrb	r3, [r7, #23]
 800a4f4:	005b      	lsls	r3, r3, #1
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	440b      	add	r3, r1
 800a4fc:	3237      	adds	r2, #55	; 0x37
 800a4fe:	b2d2      	uxtb	r2, r2
 800a500:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	011b      	lsls	r3, r3, #4
 800a506:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a508:	7dfb      	ldrb	r3, [r7, #23]
 800a50a:	005b      	lsls	r3, r3, #1
 800a50c:	3301      	adds	r3, #1
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	4413      	add	r3, r2
 800a512:	2200      	movs	r2, #0
 800a514:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a516:	7dfb      	ldrb	r3, [r7, #23]
 800a518:	3301      	adds	r3, #1
 800a51a:	75fb      	strb	r3, [r7, #23]
 800a51c:	7dfa      	ldrb	r2, [r7, #23]
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	429a      	cmp	r2, r3
 800a522:	d3d3      	bcc.n	800a4cc <IntToUnicode+0x18>
  }
}
 800a524:	bf00      	nop
 800a526:	bf00      	nop
 800a528:	371c      	adds	r7, #28
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <LL_AHB2_GRP1_EnableClock>:
{
 800a532:	b480      	push	{r7}
 800a534:	b085      	sub	sp, #20
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a53a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a53e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4313      	orrs	r3, r2
 800a548:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a54a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a54e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4013      	ands	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a556:	68fb      	ldr	r3, [r7, #12]
}
 800a558:	bf00      	nop
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <LL_APB1_GRP1_EnableClock>:
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a56c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a570:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4313      	orrs	r3, r2
 800a57a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a57c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a580:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4013      	ands	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a588:	68fb      	ldr	r3, [r7, #12]
}
 800a58a:	bf00      	nop
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
	...

0800a598 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b09c      	sub	sp, #112	; 0x70
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	605a      	str	r2, [r3, #4]
 800a5aa:	609a      	str	r2, [r3, #8]
 800a5ac:	60da      	str	r2, [r3, #12]
 800a5ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a5b0:	f107 030c 	add.w	r3, r7, #12
 800a5b4:	2250      	movs	r2, #80	; 0x50
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 fb15 	bl	800abe8 <memset>
  if(pcdHandle->Instance==USB)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a23      	ldr	r2, [pc, #140]	; (800a650 <HAL_PCD_MspInit+0xb8>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d13e      	bne.n	800a646 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a5c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5cc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800a5ce:	2318      	movs	r3, #24
 800a5d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800a5d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a5d6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800a5d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800a5de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a5e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800a5e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5e8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a5ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a5ee:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a5f0:	f107 030c 	add.w	r3, r7, #12
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fa ff65 	bl	80054c4 <HAL_RCCEx_PeriphCLKConfig>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800a600:	f7f7 f973 	bl	80018ea <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a604:	2001      	movs	r0, #1
 800a606:	f7ff ff94 	bl	800a532 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a60a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a60e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a610:	2302      	movs	r3, #2
 800a612:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a614:	2300      	movs	r3, #0
 800a616:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a618:	2300      	movs	r3, #0
 800a61a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a61c:	230a      	movs	r3, #10
 800a61e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a620:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a624:	4619      	mov	r1, r3
 800a626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a62a:	f7f7 fd5b 	bl	80020e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a62e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a632:	f7ff ff97 	bl	800a564 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a636:	2200      	movs	r2, #0
 800a638:	2100      	movs	r1, #0
 800a63a:	2014      	movs	r0, #20
 800a63c:	f7f7 fd1d 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a640:	2014      	movs	r0, #20
 800a642:	f7f7 fd34 	bl	80020ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a646:	bf00      	nop
 800a648:	3770      	adds	r7, #112	; 0x70
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	40006800 	.word	0x40006800

0800a654 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a668:	4619      	mov	r1, r3
 800a66a:	4610      	mov	r0, r2
 800a66c:	f7fe fdcc 	bl	8009208 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a670:	bf00      	nop
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a68a:	78fa      	ldrb	r2, [r7, #3]
 800a68c:	6879      	ldr	r1, [r7, #4]
 800a68e:	4613      	mov	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	00db      	lsls	r3, r3, #3
 800a696:	440b      	add	r3, r1
 800a698:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	78fb      	ldrb	r3, [r7, #3]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	f7fe fe06 	bl	80092b2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a6a6:	bf00      	nop
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a6c0:	78fa      	ldrb	r2, [r7, #3]
 800a6c2:	6879      	ldr	r1, [r7, #4]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4413      	add	r3, r2
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	440b      	add	r3, r1
 800a6ce:	333c      	adds	r3, #60	; 0x3c
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	78fb      	ldrb	r3, [r7, #3]
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	f7fe fe4f 	bl	8009378 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a6da:	bf00      	nop
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b082      	sub	sp, #8
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fe ff63 	bl	80095bc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b084      	sub	sp, #16
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a706:	2301      	movs	r3, #1
 800a708:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d001      	beq.n	800a716 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a712:	f7f7 f8ea 	bl	80018ea <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a71c:	7bfa      	ldrb	r2, [r7, #15]
 800a71e:	4611      	mov	r1, r2
 800a720:	4618      	mov	r0, r3
 800a722:	f7fe ff0d 	bl	8009540 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fe feb9 	bl	80094a4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a732:	bf00      	nop
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
	...

0800a73c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fe ff08 	bl	8009560 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d005      	beq.n	800a764 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a758:	4b04      	ldr	r3, [pc, #16]	; (800a76c <HAL_PCD_SuspendCallback+0x30>)
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	4a03      	ldr	r2, [pc, #12]	; (800a76c <HAL_PCD_SuspendCallback+0x30>)
 800a75e:	f043 0306 	orr.w	r3, r3, #6
 800a762:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a764:	bf00      	nop
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	e000ed00 	.word	0xe000ed00

0800a770 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d007      	beq.n	800a790 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a780:	4b08      	ldr	r3, [pc, #32]	; (800a7a4 <HAL_PCD_ResumeCallback+0x34>)
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	4a07      	ldr	r2, [pc, #28]	; (800a7a4 <HAL_PCD_ResumeCallback+0x34>)
 800a786:	f023 0306 	bic.w	r3, r3, #6
 800a78a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a78c:	f000 f9d6 	bl	800ab3c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe fef8 	bl	800958c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	e000ed00 	.word	0xe000ed00

0800a7a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a7b0:	4a23      	ldr	r2, [pc, #140]	; (800a840 <USBD_LL_Init+0x98>)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a21      	ldr	r2, [pc, #132]	; (800a840 <USBD_LL_Init+0x98>)
 800a7bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800a7c0:	f7f9 fb62 	bl	8003e88 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800a7c4:	4b1e      	ldr	r3, [pc, #120]	; (800a840 <USBD_LL_Init+0x98>)
 800a7c6:	4a1f      	ldr	r2, [pc, #124]	; (800a844 <USBD_LL_Init+0x9c>)
 800a7c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a7ca:	4b1d      	ldr	r3, [pc, #116]	; (800a840 <USBD_LL_Init+0x98>)
 800a7cc:	2208      	movs	r2, #8
 800a7ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a7d0:	4b1b      	ldr	r3, [pc, #108]	; (800a840 <USBD_LL_Init+0x98>)
 800a7d2:	2202      	movs	r2, #2
 800a7d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a7d6:	4b1a      	ldr	r3, [pc, #104]	; (800a840 <USBD_LL_Init+0x98>)
 800a7d8:	2202      	movs	r2, #2
 800a7da:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a7dc:	4b18      	ldr	r3, [pc, #96]	; (800a840 <USBD_LL_Init+0x98>)
 800a7de:	2200      	movs	r2, #0
 800a7e0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a7e2:	4b17      	ldr	r3, [pc, #92]	; (800a840 <USBD_LL_Init+0x98>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a7e8:	4b15      	ldr	r3, [pc, #84]	; (800a840 <USBD_LL_Init+0x98>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a7ee:	4b14      	ldr	r3, [pc, #80]	; (800a840 <USBD_LL_Init+0x98>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a7f4:	4812      	ldr	r0, [pc, #72]	; (800a840 <USBD_LL_Init+0x98>)
 800a7f6:	f7f7 fe0d 	bl	8002414 <HAL_PCD_Init>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800a800:	f7f7 f873 	bl	80018ea <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a80a:	2318      	movs	r3, #24
 800a80c:	2200      	movs	r2, #0
 800a80e:	2100      	movs	r1, #0
 800a810:	f7f9 faae 	bl	8003d70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a81a:	2358      	movs	r3, #88	; 0x58
 800a81c:	2200      	movs	r2, #0
 800a81e:	2180      	movs	r1, #128	; 0x80
 800a820:	f7f9 faa6 	bl	8003d70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a82a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a82e:	2200      	movs	r2, #0
 800a830:	2181      	movs	r1, #129	; 0x81
 800a832:	f7f9 fa9d 	bl	8003d70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20000790 	.word	0x20000790
 800a844:	40006800 	.word	0x40006800

0800a848 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a85e:	4618      	mov	r0, r3
 800a860:	f7f7 febd 	bl	80025de <HAL_PCD_Start>
 800a864:	4603      	mov	r3, r0
 800a866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a868:	7bfb      	ldrb	r3, [r7, #15]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 f96c 	bl	800ab48 <USBD_Get_USB_Status>
 800a870:	4603      	mov	r3, r0
 800a872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a874:	7bbb      	ldrb	r3, [r7, #14]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	4608      	mov	r0, r1
 800a888:	4611      	mov	r1, r2
 800a88a:	461a      	mov	r2, r3
 800a88c:	4603      	mov	r3, r0
 800a88e:	70fb      	strb	r3, [r7, #3]
 800a890:	460b      	mov	r3, r1
 800a892:	70bb      	strb	r3, [r7, #2]
 800a894:	4613      	mov	r3, r2
 800a896:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a8a6:	78bb      	ldrb	r3, [r7, #2]
 800a8a8:	883a      	ldrh	r2, [r7, #0]
 800a8aa:	78f9      	ldrb	r1, [r7, #3]
 800a8ac:	f7f8 f805 	bl	80028ba <HAL_PCD_EP_Open>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 f946 	bl	800ab48 <USBD_Get_USB_Status>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8e4:	78fa      	ldrb	r2, [r7, #3]
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7f8 f84c 	bl	8002986 <HAL_PCD_EP_Close>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8f2:	7bfb      	ldrb	r3, [r7, #15]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 f927 	bl	800ab48 <USBD_Get_USB_Status>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	460b      	mov	r3, r1
 800a912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a922:	78fa      	ldrb	r2, [r7, #3]
 800a924:	4611      	mov	r1, r2
 800a926:	4618      	mov	r0, r3
 800a928:	f7f8 f8f5 	bl	8002b16 <HAL_PCD_EP_SetStall>
 800a92c:	4603      	mov	r3, r0
 800a92e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	4618      	mov	r0, r3
 800a934:	f000 f908 	bl	800ab48 <USBD_Get_USB_Status>
 800a938:	4603      	mov	r3, r0
 800a93a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b084      	sub	sp, #16
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	460b      	mov	r3, r1
 800a950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a960:	78fa      	ldrb	r2, [r7, #3]
 800a962:	4611      	mov	r1, r2
 800a964:	4618      	mov	r0, r3
 800a966:	f7f8 f928 	bl	8002bba <HAL_PCD_EP_ClrStall>
 800a96a:	4603      	mov	r3, r0
 800a96c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
 800a970:	4618      	mov	r0, r3
 800a972:	f000 f8e9 	bl	800ab48 <USBD_Get_USB_Status>
 800a976:	4603      	mov	r3, r0
 800a978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a97a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a996:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	da0c      	bge.n	800a9ba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a9a0:	78fb      	ldrb	r3, [r7, #3]
 800a9a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9a6:	68f9      	ldr	r1, [r7, #12]
 800a9a8:	1c5a      	adds	r2, r3, #1
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	00db      	lsls	r3, r3, #3
 800a9b2:	440b      	add	r3, r1
 800a9b4:	3302      	adds	r3, #2
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	e00b      	b.n	800a9d2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9ba:	78fb      	ldrb	r3, [r7, #3]
 800a9bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9c0:	68f9      	ldr	r1, [r7, #12]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4413      	add	r3, r2
 800a9c8:	00db      	lsls	r3, r3, #3
 800a9ca:	440b      	add	r3, r1
 800a9cc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a9d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b084      	sub	sp, #16
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9f8:	78fa      	ldrb	r2, [r7, #3]
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7f7 ff37 	bl	8002870 <HAL_PCD_SetAddress>
 800aa02:	4603      	mov	r3, r0
 800aa04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 f89d 	bl	800ab48 <USBD_Get_USB_Status>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa12:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	607a      	str	r2, [r7, #4]
 800aa26:	603b      	str	r3, [r7, #0]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa3a:	7af9      	ldrb	r1, [r7, #11]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	f7f8 f826 	bl	8002a90 <HAL_PCD_EP_Transmit>
 800aa44:	4603      	mov	r3, r0
 800aa46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 f87c 	bl	800ab48 <USBD_Get_USB_Status>
 800aa50:	4603      	mov	r3, r0
 800aa52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa54:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b086      	sub	sp, #24
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	60f8      	str	r0, [r7, #12]
 800aa66:	607a      	str	r2, [r7, #4]
 800aa68:	603b      	str	r3, [r7, #0]
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa7c:	7af9      	ldrb	r1, [r7, #11]
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	f7f7 ffc8 	bl	8002a16 <HAL_PCD_EP_Receive>
 800aa86:	4603      	mov	r3, r0
 800aa88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 f85b 	bl	800ab48 <USBD_Get_USB_Status>
 800aa92:	4603      	mov	r3, r0
 800aa94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa96:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3718      	adds	r7, #24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d002      	beq.n	800aab8 <HAL_PCDEx_LPM_Callback+0x18>
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d013      	beq.n	800aade <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800aab6:	e023      	b.n	800ab00 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d007      	beq.n	800aad0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aac0:	f000 f83c 	bl	800ab3c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aac4:	4b10      	ldr	r3, [pc, #64]	; (800ab08 <HAL_PCDEx_LPM_Callback+0x68>)
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	4a0f      	ldr	r2, [pc, #60]	; (800ab08 <HAL_PCDEx_LPM_Callback+0x68>)
 800aaca:	f023 0306 	bic.w	r3, r3, #6
 800aace:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fe fd58 	bl	800958c <USBD_LL_Resume>
    break;
 800aadc:	e010      	b.n	800ab00 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7fe fd3b 	bl	8009560 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	699b      	ldr	r3, [r3, #24]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d005      	beq.n	800aafe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aaf2:	4b05      	ldr	r3, [pc, #20]	; (800ab08 <HAL_PCDEx_LPM_Callback+0x68>)
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	4a04      	ldr	r2, [pc, #16]	; (800ab08 <HAL_PCDEx_LPM_Callback+0x68>)
 800aaf8:	f043 0306 	orr.w	r3, r3, #6
 800aafc:	6113      	str	r3, [r2, #16]
    break;
 800aafe:	bf00      	nop
}
 800ab00:	bf00      	nop
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	e000ed00 	.word	0xe000ed00

0800ab0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab14:	4b03      	ldr	r3, [pc, #12]	; (800ab24 <USBD_static_malloc+0x18>)
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	200001e0 	.word	0x200001e0

0800ab28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]

}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ab40:	f7f6 fe4a 	bl	80017d8 <SystemClock_Config>
}
 800ab44:	bf00      	nop
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab56:	79fb      	ldrb	r3, [r7, #7]
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	d817      	bhi.n	800ab8c <USBD_Get_USB_Status+0x44>
 800ab5c:	a201      	add	r2, pc, #4	; (adr r2, 800ab64 <USBD_Get_USB_Status+0x1c>)
 800ab5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab62:	bf00      	nop
 800ab64:	0800ab75 	.word	0x0800ab75
 800ab68:	0800ab7b 	.word	0x0800ab7b
 800ab6c:	0800ab81 	.word	0x0800ab81
 800ab70:	0800ab87 	.word	0x0800ab87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	73fb      	strb	r3, [r7, #15]
    break;
 800ab78:	e00b      	b.n	800ab92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab7e:	e008      	b.n	800ab92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab80:	2301      	movs	r3, #1
 800ab82:	73fb      	strb	r3, [r7, #15]
    break;
 800ab84:	e005      	b.n	800ab92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab86:	2303      	movs	r3, #3
 800ab88:	73fb      	strb	r3, [r7, #15]
    break;
 800ab8a:	e002      	b.n	800ab92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab90:	bf00      	nop
  }
  return usb_status;
 800ab92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <__libc_init_array>:
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	4d0d      	ldr	r5, [pc, #52]	; (800abd8 <__libc_init_array+0x38>)
 800aba4:	4c0d      	ldr	r4, [pc, #52]	; (800abdc <__libc_init_array+0x3c>)
 800aba6:	1b64      	subs	r4, r4, r5
 800aba8:	10a4      	asrs	r4, r4, #2
 800abaa:	2600      	movs	r6, #0
 800abac:	42a6      	cmp	r6, r4
 800abae:	d109      	bne.n	800abc4 <__libc_init_array+0x24>
 800abb0:	4d0b      	ldr	r5, [pc, #44]	; (800abe0 <__libc_init_array+0x40>)
 800abb2:	4c0c      	ldr	r4, [pc, #48]	; (800abe4 <__libc_init_array+0x44>)
 800abb4:	f000 f820 	bl	800abf8 <_init>
 800abb8:	1b64      	subs	r4, r4, r5
 800abba:	10a4      	asrs	r4, r4, #2
 800abbc:	2600      	movs	r6, #0
 800abbe:	42a6      	cmp	r6, r4
 800abc0:	d105      	bne.n	800abce <__libc_init_array+0x2e>
 800abc2:	bd70      	pop	{r4, r5, r6, pc}
 800abc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800abc8:	4798      	blx	r3
 800abca:	3601      	adds	r6, #1
 800abcc:	e7ee      	b.n	800abac <__libc_init_array+0xc>
 800abce:	f855 3b04 	ldr.w	r3, [r5], #4
 800abd2:	4798      	blx	r3
 800abd4:	3601      	adds	r6, #1
 800abd6:	e7f2      	b.n	800abbe <__libc_init_array+0x1e>
 800abd8:	0800ad04 	.word	0x0800ad04
 800abdc:	0800ad04 	.word	0x0800ad04
 800abe0:	0800ad04 	.word	0x0800ad04
 800abe4:	0800ad08 	.word	0x0800ad08

0800abe8 <memset>:
 800abe8:	4402      	add	r2, r0
 800abea:	4603      	mov	r3, r0
 800abec:	4293      	cmp	r3, r2
 800abee:	d100      	bne.n	800abf2 <memset+0xa>
 800abf0:	4770      	bx	lr
 800abf2:	f803 1b01 	strb.w	r1, [r3], #1
 800abf6:	e7f9      	b.n	800abec <memset+0x4>

0800abf8 <_init>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	bf00      	nop
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr

0800ac04 <_fini>:
 800ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac06:	bf00      	nop
 800ac08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac0a:	bc08      	pop	{r3}
 800ac0c:	469e      	mov	lr, r3
 800ac0e:	4770      	bx	lr
